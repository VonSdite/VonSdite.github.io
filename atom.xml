<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Von Sdite</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://vonsdite.cn/"/>
  <updated>2019-01-15T07:46:06.659Z</updated>
  <id>https://vonsdite.cn/</id>
  
  <author>
    <name>Von Sdite</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>[Chrome 71版本]彻底解决Chrome请停用以开发者模式运行的扩展程序</title>
    <link href="https://vonsdite.cn/posts/d0e30452.html"/>
    <id>https://vonsdite.cn/posts/d0e30452.html</id>
    <published>2019-01-15T07:02:10.000Z</published>
    <updated>2019-01-15T07:46:06.659Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Tue Jan 15 2019 15:46:17 GMT+0800 (中国标准时间) --><h1 id="前言">前言</h1><p>想使用Chrome商店以外的插件时, 总会遇到以下的问题。<br>每次重启Chrome插件, 都会弹出<strong>请停用以开发者模式运行的扩展程序</strong>, 以下通过反汇编修改<strong>dll</strong>的方式<br><img src="/images/2019-01-15-15-11-47.png" alt=""></p><p>参考: <a href="https://stackoverflow.com/questions/30287907/how-to-get-rid-of-disable-developer-mode-extensions-pop-up/30361260#30361260" target="_blank" rel="noopener">https://stackoverflow.com/questions/30287907/how-to-get-rid-of-disable-developer-mode-extensions-pop-up/30361260#30361260</a></p><a id="more"></a><h1 id="题外话">题外话</h1><p>解决该问题的办法三种,</p><ul><li>一种是<strong>组策略白名单法(早就失效)</strong></li><li>一种是<strong>批处理法(Chrome 60版本左右已失效)</strong>,</li><li>最后一种就是<strong>修改dll</strong>方法, 唯一能成功的办法了, 也是接下来要介绍的办法(实际上批处理法只是将该办法封装成代码了而已)</li></ul><h1 id="解决办法">解决办法</h1><h2 id="安装x64dbg">安装x64dbg</h2><blockquote><ul><li>到<strong>x64dbg官网</strong>下载x64dbg, <a href="https://x64dbg.com/#start" target="_blank" rel="noopener">https://x64dbg.com/#start</a></li></ul></blockquote><h2 id="修改chrome-dll">修改chrome.dll</h2><ol><li><p>找到Chrome的主目录, 一般在<code>C:\Program Files (x86)</code>中, 然后找到如图的目录路径下的<strong>chrome.dll</strong><br><img src="/images/2019-01-15-15-18-56.png" alt=""></p></li><li><p>使用刚下载好的x64dbg打开chrome.dll</p></li></ol><p>双击<strong>x96dbg.exe</strong>, 然后选择x64dbg(如果打不开, 换x32dbg打开)<br><img src="/images/2019-01-15-15-20-49.png" alt=""></p><p><img src="/images/2019-01-15-15-23-26.png" alt=""></p><p><img src="/images/2019-01-15-15-26-06.png" alt=""></p><p>然后在主面板<strong>右键</strong>, 依次选择<code>搜索</code>-&gt; <code>当前模块</code> -&gt; <code>字符串</code><br><img src="/images/2019-01-15-15-26-55.png" alt=""></p><p>接着会进入一个搜索界面, 等待进度条加载完毕, 搜索<code>ExtensionDeveloperModeWarning</code>, 然后<strong>双击第一行结果</strong><br><img src="/images/2019-01-15-15-29-11.png" alt=""></p><p>接着会跳转到反汇编界面, 往上翻一点, 找到<code>cmp eax, 2</code>(也有可能是<code>cmp eax, 3</code>)<br><img src="/images/2019-01-15-15-30-40.png" alt=""></p><p>双击打开编辑页面, 修改成<code>cmp eax,9</code>, 然后点击确定, 注意只需要点击一次确定即可, 点击确定后它还是会继续弹出其它行的编辑界面, 此时直接关闭对话框即可。<br><img src="/images/2019-01-15-15-31-30.png" alt=""></p><p>修改完之后<code>Ctrl+P</code>导出修改过的dll文件(点击<strong>修补文件</strong>按钮就是导出dll文件)<br><img src="/images/2019-01-15-15-32-07.png" alt=""></p><p>你可以把dll文件导出到其它某个位置, 然后把<strong>原始chrome.dll文件备份</strong>, 再把这个修改过的替换, 然后重启Chrome, 可以发现提示已经没有了。</p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Tue Jan 15 2019 15:46:17 GMT+0800 (中国标准时间) --&gt;&lt;h1 id=&quot;前言&quot;&gt;前言&lt;/h1&gt;&lt;p&gt;想使用Chrome商店以外的插件时, 总会遇到以下的问题。&lt;br&gt;每次重启Chrome插件, 都会弹出&lt;strong&gt;请停用以开发者模式运行的扩展程序&lt;/strong&gt;, 以下通过反汇编修改&lt;strong&gt;dll&lt;/strong&gt;的方式&lt;br&gt;&lt;img src=&quot;/images/2019-01-15-15-11-47.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;&lt;p&gt;参考: &lt;a href=&quot;https://stackoverflow.com/questions/30287907/how-to-get-rid-of-disable-developer-mode-extensions-pop-up/30361260#30361260&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://stackoverflow.com/questions/30287907/how-to-get-rid-of-disable-developer-mode-extensions-pop-up/30361260#30361260&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="逆向" scheme="https://vonsdite.cn/categories/%E9%80%86%E5%90%91/"/>
    
      <category term="Chrome" scheme="https://vonsdite.cn/categories/%E9%80%86%E5%90%91/Chrome/"/>
    
    
      <category term="逆向" scheme="https://vonsdite.cn/tags/%E9%80%86%E5%90%91/"/>
    
      <category term="Chrome" scheme="https://vonsdite.cn/tags/Chrome/"/>
    
  </entry>
  
  <entry>
    <title>获取leetcode题目Html代码, markdown原汁原味呈现leetcode题目</title>
    <link href="https://vonsdite.cn/posts/31cb5475.html"/>
    <id>https://vonsdite.cn/posts/31cb5475.html</id>
    <published>2019-01-14T16:08:14.000Z</published>
    <updated>2019-01-14T16:21:50.163Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Tue Jan 15 2019 15:11:55 GMT+0800 (中国标准时间) --><p><a href="https://github.com/VonSdite/GetLeetcodeQuestion" target="_blank" rel="noopener">项目代码: https://github.com/VonSdite/GetLeetcodeQuestion</a></p><h1>前言</h1><p>写leetcode题解(特指用<strong>markdown</strong>写)的时候, 想把leetcode的<strong>题目信息</strong>也放入到题解中,<br>但是又不想截图(图片占空间、而且题目可能很长, 需要分段截图),<br>因此想着把leetcode题目的html直接拿下来, 但是直接copy html代码,<br>又会<strong>丢失</strong>css样式, 不能很好地将题目原样呈现出来, 而且操作<strong>繁琐</strong>,<br>所以就做了一个<strong>获取leetcode题目信息html代码的Chrome插件</strong></p><a id="more"></a><h1>环境</h1><blockquote><ul><li><strong>Chrome插件</strong>(仅适用Chrome内核的浏览器, 比如Chrome、360、QQ浏览器等)</li></ul></blockquote><h1>使用</h1><ol><li>使用命令<code>git</code><strong>clone</strong>本项目</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/VonSdite/GetLeetcodeQuestion.git</span><br></pre></td></tr></table></figure><ol start="2"><li><p>打开<strong>Chrome浏览器</strong>的扩展程序(点击Chrome浏览器右上角<strong>设置</strong> - <strong>更多工具</strong> - <strong>扩展程序(E)</strong>)<br><img src="/images/2019-01-14-23-54-56.png" alt=""></p></li><li><p>点击<strong>加载已解压的扩展程序</strong>, 选择本项目即可<br><img src="/images/2019-01-14-23-56-57.png" alt=""></p></li></ol><h1>演示</h1><p>完成上述操作后,<br>以后打开<strong>leetcode</strong>的题目就会在<strong>题目旁边</strong>多了如下的按钮, 点击按钮即可将题目的html代码放入到剪切板中<br><img src="/images/2019-01-14-23-58-23.png" alt=""><br><img src="/images/2019-01-14-23-59-14.png" alt=""></p><h2 id="复制的html代码"><a class="header-anchor" href="#复制的html代码">¶</a>复制的html代码</h2><p>之后只需要<code>ctrl</code>+<code>v</code>就可以粘贴代码了, 比如上面这题<strong>Two Sum</strong>粘贴出来的代码如下</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">[Two Sum - LeetCode](https://leetcode.com/problems/two-sum/)</span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"margin:1em 0;font-size:13px;"</span>&gt;</span><span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">p</span>&gt;</span>Given an array of integers, return <span class="tag">&lt;<span class="name">strong</span>&gt;</span>indices<span class="tag">&lt;/<span class="name">strong</span>&gt;</span> of the two numbers such that they add up to a specific target.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>You may assume that each input would have <span class="tag">&lt;<span class="name">strong</span>&gt;</span><span class="tag">&lt;<span class="name">em</span>&gt;</span>exactly<span class="tag">&lt;/<span class="name">em</span>&gt;</span><span class="tag">&lt;/<span class="name">strong</span>&gt;</span> one solution, and you may not use the <span class="tag">&lt;<span class="name">em</span>&gt;</span>same<span class="tag">&lt;/<span class="name">em</span>&gt;</span> element twice.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">strong</span>&gt;</span>Example:<span class="tag">&lt;/<span class="name">strong</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">pre</span> <span class="attr">style</span>=<span class="string">"white-space:pre-wrap;background:#f7f9fa;padding:10px15px;color:#263238;line-height:1.6;font-size:13px;border-radius:3px;margin-top:0;margin-bottom:1em;overflow:auto;font-family:SFMono-Regular,Consolas,LiberationMono,Menlo,Courier,monospace;"</span>&gt;</span>Given nums = [2, 7, 11, 15], target = 9,</span><br><span class="line"></span><br><span class="line">Because nums[<span class="tag">&lt;<span class="name">strong</span>&gt;</span>0<span class="tag">&lt;/<span class="name">strong</span>&gt;</span>] + nums[<span class="tag">&lt;<span class="name">strong</span>&gt;</span>1<span class="tag">&lt;/<span class="name">strong</span>&gt;</span>] = 2 + 7 = 9,</span><br><span class="line">return [<span class="tag">&lt;<span class="name">strong</span>&gt;</span>0<span class="tag">&lt;/<span class="name">strong</span>&gt;</span>, <span class="tag">&lt;<span class="name">strong</span>&gt;</span>1<span class="tag">&lt;/<span class="name">strong</span>&gt;</span>].</span><br><span class="line"><span class="tag">&lt;/<span class="name">pre</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>&amp;nbsp;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><details><summary>markdown中的效果</summary><p><a href="https://leetcode.com/problems/two-sum/" target="_blank" rel="noopener">Two Sum - LeetCode</a></p><div style="margin:1em 0;font-size:13px"><div><p>Given an array of integers, return <strong>indices</strong> of the two numbers such that they add up to a specific target.</p><p>You may assume that each input would have <strong><em>exactly</em></strong> one solution, and you may not use the <em>same</em> element twice.</p><p><strong>Example:</strong></p><pre style="white-space:pre-wrap;background:#f7f9fa;padding:10px15px;color:#263238;line-height:1.6;font-size:13px;border-radius:3px;margin-top:0;margin-bottom:1em;overflow:auto;font-family:SFMono-Regular,Consolas,LiberationMono,Menlo,Courier,monospace">Given nums = [2, 7, 11, 15], target = 9,Because nums[<strong>0</strong>] + nums[<strong>1</strong>] = 2 + 7 = 9,return [<strong>0</strong>, <strong>1</strong>].</pre><p>&nbsp;</p></div></div></details><p>可以发现, 粘贴的代码与原来的html代码的区别:</p><ol><li>html标签的<code>class</code>均被替换为原来的<strong>css样式</strong></li><li><code>&lt;pre&gt;</code>标签额外添加了它的<strong>css样式</strong></li></ol><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Tue Jan 15 2019 15:11:55 GMT+0800 (中国标准时间) --&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/VonSdite/GetLeetcodeQuestion&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;项目代码: https://github.com/VonSdite/GetLeetcodeQuestion&lt;/a&gt;&lt;/p&gt;&lt;h1&gt;前言&lt;/h1&gt;&lt;p&gt;写leetcode题解(特指用&lt;strong&gt;markdown&lt;/strong&gt;写)的时候, 想把leetcode的&lt;strong&gt;题目信息&lt;/strong&gt;也放入到题解中,&lt;br&gt;但是又不想截图(图片占空间、而且题目可能很长, 需要分段截图),&lt;br&gt;因此想着把leetcode题目的html直接拿下来, 但是直接copy html代码,&lt;br&gt;又会&lt;strong&gt;丢失&lt;/strong&gt;css样式, 不能很好地将题目原样呈现出来, 而且操作&lt;strong&gt;繁琐&lt;/strong&gt;,&lt;br&gt;所以就做了一个&lt;strong&gt;获取leetcode题目信息html代码的Chrome插件&lt;/strong&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="JavaScript" scheme="https://vonsdite.cn/categories/JavaScript/"/>
    
      <category term="Chrome插件" scheme="https://vonsdite.cn/categories/JavaScript/Chrome%E6%8F%92%E4%BB%B6/"/>
    
    
      <category term="JavaScript" scheme="https://vonsdite.cn/tags/JavaScript/"/>
    
      <category term="Chrome插件" scheme="https://vonsdite.cn/tags/Chrome%E6%8F%92%E4%BB%B6/"/>
    
      <category term="Leetcode" scheme="https://vonsdite.cn/tags/Leetcode/"/>
    
  </entry>
  
  <entry>
    <title>Jupyter 常用魔法命令</title>
    <link href="https://vonsdite.cn/posts/e422ea85.html"/>
    <id>https://vonsdite.cn/posts/e422ea85.html</id>
    <published>2019-01-09T08:31:20.000Z</published>
    <updated>2019-01-14T13:58:15.352Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Tue Jan 15 2019 15:11:55 GMT+0800 (中国标准时间) --><h1>前言</h1><p>Jupyter NoteBook 是功能强大的Python交互IDE, 自带的一些常用Magic Command 可以让它变得更加得心应手。</p><p>magic函数主要包含两大类，一类是**行魔法（Line magic）<strong>前缀为<code>%</code>，一类是</strong>单元魔法(Cell magic)**前缀为<code>%%</code>;</p><a id="more"></a><h1>%lsmagic</h1><p>打印当前可以用的魔法命令<br><img src="/images/2019-01-09-16-39-15.png" alt=""></p><h1>%matplotlib inline</h1><p>使用matplotlib画图时，图片嵌入在jupyter notebook里面，不以单独窗口显示<br><img src="/images/2019-01-09-16-43-22.png" alt=""></p><h1>%timeit %%timeit</h1><p>为代码执行计时<br>%timeit 是 <strong>行魔法命令</strong><br>%%timeit 是 <strong>块魔法命令</strong><br><img src="/images/2019-01-09-16-45-04.png" alt=""></p><h1>%%writefile</h1><p>后面紧接着一个file_name.py, 表示在jupyter notebook里面创建一个py文件，后面cell里面的内容为py文件内容</p><p>比如</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">%%writefile test_peace.py</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">print(np.random.randint(<span class="number">1</span>,<span class="number">5</span>))</span><br></pre></td></tr></table></figure><p>在当前路径下会生成一个test_peace.py的文件，内容就是cell里面的内容</p><h1>%run</h1><p>后面紧接着一个相对地址的file_name.py，表示运行一个py文件</p><p>比如</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">%run test_peace.py</span><br></pre></td></tr></table></figure><h1>%pwd</h1><p>查找当前目录<br><img src="/images/2019-01-09-16-46-57.png" alt=""></p><h1>%cd</h1><p>更改当前目录<br><img src="/images/2019-01-09-16-47-39.png" alt=""></p><h1>%cp</h1><p>复制文件</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">%cp test_peace.py test_load.py</span><br></pre></td></tr></table></figure><h1>%whos</h1><p>查看当前变量,类型，信息</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Variable   Type       Data/Info</span><br><span class="line">-------------------------------</span><br><span class="line">np         module     &lt;module <span class="string">'numpy'</span> <span class="keyword">from</span> <span class="string">'/us&lt;...&gt;kages/numpy/__init__.py'</span>&gt;</span><br><span class="line">plt        module     &lt;module <span class="string">'matplotlib.pyplo&lt;...&gt;es/matplotlib/pyplot.py'</span>&gt;</span><br><span class="line">x          float64    <span class="number">-0.3048106211022167</span></span><br><span class="line">y          list       n=<span class="number">3</span></span><br></pre></td></tr></table></figure><h1>%reset</h1><p>清除变量</p><h1>%del</h1><p>清除某一个变量</p><h1>%load</h1><p>加载一个文件里面的内容</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">%load test_peace.py</span><br></pre></td></tr></table></figure><h1>魔法命令+?</h1><p>加<code>?</code>可以获取魔法命令的用法<br><img src="/images/2019-01-09-16-41-04.png" alt=""><br><img src="/images/2019-01-09-16-40-47.png" alt=""></p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Tue Jan 15 2019 15:11:55 GMT+0800 (中国标准时间) --&gt;&lt;h1&gt;前言&lt;/h1&gt;&lt;p&gt;Jupyter NoteBook 是功能强大的Python交互IDE, 自带的一些常用Magic Command 可以让它变得更加得心应手。&lt;/p&gt;&lt;p&gt;magic函数主要包含两大类，一类是**行魔法（Line magic）&lt;strong&gt;前缀为&lt;code&gt;%&lt;/code&gt;，一类是&lt;/strong&gt;单元魔法(Cell magic)**前缀为&lt;code&gt;%%&lt;/code&gt;;&lt;/p&gt;
    
    </summary>
    
      <category term="Python" scheme="https://vonsdite.cn/categories/Python/"/>
    
      <category term="Jupyter" scheme="https://vonsdite.cn/categories/Python/Jupyter/"/>
    
    
      <category term="Python" scheme="https://vonsdite.cn/tags/Python/"/>
    
      <category term="Jupyter" scheme="https://vonsdite.cn/tags/Jupyter/"/>
    
  </entry>
  
  <entry>
    <title>Jupyter Lab默认快捷键与Jupyter Notebook的区别</title>
    <link href="https://vonsdite.cn/posts/c0a62ed9.html"/>
    <id>https://vonsdite.cn/posts/c0a62ed9.html</id>
    <published>2019-01-09T06:57:52.000Z</published>
    <updated>2019-01-09T08:03:59.708Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Tue Jan 15 2019 15:11:55 GMT+0800 (中国标准时间) --><h1>前言</h1><p>Jupyter Notebook和Jupyter Lab还是挺像的, 但Jupyter Lab更像IDE多一点</p><p>虽说Jupyter Lab包含 Jupyter Notebook, 但是Jupyter Notebook的一些快捷键在 Jupyter Lab中用不了</p><p><strong>以下均是Jupyter Notebook的快捷键, 会说明哪些在Jupyter Lab中失效了</strong></p><a id="more"></a><h1>命令行模式(按 <strong>Esc</strong> 生效)</h1><table><thead><tr><th>按键</th><th>功能</th></tr></thead><tbody><tr><td>F</td><td>查找并且替换 <img src="/images/ExclamationMark.png" alt="">Lab中失效了</td></tr><tr><td>Ctrl-Shift-F</td><td>打开命令配置 <img src="/images/ExclamationMark.png" alt="">Lab中失效了, 变成了隐藏侧边栏</td></tr><tr><td>Ctrl-Shift-P</td><td>打开命令配置 <img src="/images/ExclamationMark.png" alt="">Lab中失效了, 打印服务…</td></tr><tr><td>Enter</td><td>进入编辑模式</td></tr><tr><td>P</td><td>打开命令配置 <img src="/images/ExclamationMark.png" alt="">Lab中失效了</td></tr><tr><td>Alt-Enter</td><td>运行代码块并且插入下面</td></tr><tr><td>Y</td><td>把代码块变成代码</td></tr><tr><td>M</td><td>把代码块变成标签</td></tr><tr><td>R</td><td>清除代码块格式</td></tr><tr><td>1</td><td>把代码块变成heading 1</td></tr><tr><td>2</td><td>把代码块变成heading 2</td></tr><tr><td>3</td><td>把代码块变成heading 3</td></tr><tr><td>4</td><td>把代码块变成heading 4</td></tr><tr><td>5</td><td>把代码块变成heading 5</td></tr><tr><td>6</td><td>把代码块变成heading 6</td></tr><tr><td>K</td><td>选择上面的代码块</td></tr><tr><td>方向键上</td><td>选择上面的代码块</td></tr><tr><td>方向键下</td><td>选择下面的代码块</td></tr><tr><td>J</td><td>选择下面的代码块</td></tr><tr><td>Shift-K</td><td>扩展上面选择的代码块</td></tr><tr><td>Shift-方向键上</td><td>扩展上面选择的代码块</td></tr><tr><td>Shift-方向键下</td><td>扩展下面选择的代码块</td></tr><tr><td>Shift-J</td><td>扩展下面选择的代码块</td></tr><tr><td>A</td><td>在上面插入代码块</td></tr><tr><td>B</td><td>在下面插入代码块</td></tr><tr><td>X</td><td>剪切选择的代码块</td></tr><tr><td>C</td><td>复制选择的代码块</td></tr><tr><td>Shift-V</td><td>粘贴到上面</td></tr><tr><td>V</td><td>粘贴到下面</td></tr><tr><td>Z</td><td>撤销</td></tr><tr><td>D,D</td><td>删除选中单元格</td></tr><tr><td>Shift-M</td><td>合并选中单元格, 如果只有一个单元格被选中</td></tr><tr><td>Ctrl-S</td><td>保存并检查</td></tr><tr><td>S</td><td>保存并检查 <img src="/images/ExclamationMark.png" alt="">Lab中失效了</td></tr><tr><td>L</td><td>切换行号</td></tr><tr><td>O</td><td>折叠单元格的输出 <img src="/images/ExclamationMark.png" alt="">Lab中失效了</td></tr><tr><td>Shift-O</td><td>切换选定单元的输出滚动 <img src="/images/ExclamationMark.png" alt="">不知道有什么用, 也失效了</td></tr><tr><td>H</td><td>显示快捷键 <img src="/images/ExclamationMark.png" alt="">Lab中失效了</td></tr><tr><td>I,I</td><td>中断服务</td></tr><tr><td>0,0</td><td>重启服务(带窗口)</td></tr><tr><td>Shift-L</td><td>在所有单元格中切换行号, 并保持设置</td></tr><tr><td>Shift-空格</td><td>向上滚动</td></tr><tr><td>空格</td><td>向下滚动</td></tr></tbody></table><h1>编辑模式(按 <strong>Enter</strong> 生效)</h1><table><thead><tr><th>按键</th><th>功能</th></tr></thead><tbody><tr><td>Tab</td><td>代码完成或缩进</td></tr><tr><td>Shift-Tab</td><td>工具提示 <img src="/images/ExclamationMark.png" alt="">不知道有什么用</td></tr><tr><td>Ctrl-]</td><td>缩进</td></tr><tr><td>Ctrl-[</td><td>取消缩进</td></tr><tr><td>Ctrl-A</td><td>全选</td></tr><tr><td>Ctrl-Z</td><td>撤销</td></tr><tr><td>Ctrl-/</td><td>注释</td></tr><tr><td>Ctrl-D</td><td>删除整行</td></tr><tr><td>Ctrl-U</td><td>撤销</td></tr><tr><td>Insert</td><td>切换 重写标志</td></tr><tr><td>Ctrl-Home</td><td>跳到单元格起始处</td></tr><tr><td>Ctrl-上</td><td>跳到单元格起始处</td></tr><tr><td>Ctrl-End</td><td>跳到单元格最后</td></tr><tr><td>Ctrl-下</td><td>跳到单元格最后</td></tr><tr><td>Ctrl-左</td><td>跳到单词左边</td></tr><tr><td>Ctrl-右</td><td>跳到单词右边</td></tr><tr><td>Ctrl-backspace</td><td>删除前面的单词</td></tr><tr><td>Ctrl-Delete</td><td>删除后面的单词</td></tr><tr><td>Ctrl-Y</td><td>重做</td></tr><tr><td>Ctrl-M</td><td>进入命令行模式</td></tr><tr><td>Ctrl-Shift-F</td><td>打开命令配置 <img src="/images/ExclamationMark.png" alt="">Lab中失效了, 变成了隐藏侧边栏</td></tr><tr><td>Ctrl-Shift-P</td><td>打开命令配置 <img src="/images/ExclamationMark.png" alt="">Lab中失效了, 打印服务…</td></tr><tr><td>Esc</td><td>进入命令行模式</td></tr><tr><td>Alt-Enter</td><td>运行代码块并且插入下面</td></tr><tr><td>Ctrl-S</td><td>保存并检查</td></tr><tr><td>方向键下</td><td>光标下移</td></tr><tr><td>方向键上</td><td>光标上移</td></tr></tbody></table><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Tue Jan 15 2019 15:11:55 GMT+0800 (中国标准时间) --&gt;&lt;h1&gt;前言&lt;/h1&gt;&lt;p&gt;Jupyter Notebook和Jupyter Lab还是挺像的, 但Jupyter Lab更像IDE多一点&lt;/p&gt;&lt;p&gt;虽说Jupyter Lab包含 Jupyter Notebook, 但是Jupyter Notebook的一些快捷键在 Jupyter Lab中用不了&lt;/p&gt;&lt;p&gt;&lt;strong&gt;以下均是Jupyter Notebook的快捷键, 会说明哪些在Jupyter Lab中失效了&lt;/strong&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Python" scheme="https://vonsdite.cn/categories/Python/"/>
    
      <category term="Jupyter" scheme="https://vonsdite.cn/categories/Python/Jupyter/"/>
    
    
      <category term="Python" scheme="https://vonsdite.cn/tags/Python/"/>
    
      <category term="Jupyter" scheme="https://vonsdite.cn/tags/Jupyter/"/>
    
  </entry>
  
  <entry>
    <title>conda 管理python包和环境</title>
    <link href="https://vonsdite.cn/posts/99747462.html"/>
    <id>https://vonsdite.cn/posts/99747462.html</id>
    <published>2019-01-08T12:44:37.000Z</published>
    <updated>2019-01-08T16:08:54.432Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Tue Jan 15 2019 15:11:55 GMT+0800 (中国标准时间) --><h1>前言</h1><p>Conda 是一个开源的软件包管理系统和环境管理系统, 用于安装多个版本的软件包及其依赖关系, 并可在它们之间轻松切换。<br>Conda 是为 Python 程序创建的, 适用于 Linux, OS X 和Windows, 是目前最流行的 Python 环境管理工具</p><a id="more"></a><h1>管理包</h1><h2 id="conda-安装包"><a class="header-anchor" href="#conda-安装包">¶</a>conda 安装包</h2><p>在终端中键入 <code>conda install [-n env_name] package_name</code><br>可以通过<code>[-n env_name]</code>指定要安装包的环境</p><p>例如, 要安装 numpy, 请键入 <code>conda install numpy</code>。</p><p>你还可以同时安装多个包。类似 <code>conda install numpy scipy pandas</code> 的命令会同时安装所有这些包。还可以通过添加版本号(例如 <code>conda install numpy=1.10</code>)来指定所需的包版本。</p><p>Conda 还会自动为你安装依赖项。例如, scipy 依赖于 numpy, 因为它使用并需要 numpy。如果你只安装 scipy (<code>conda install scipy</code>), 则 conda 还会安装 numpy(如果尚未安装的话)。</p><h3 id="添加国内源"><a class="header-anchor" href="#添加国内源">¶</a>添加国内源</h3><p>详情见: <a href="https://mirrors.tuna.tsinghua.edu.cn/help/anaconda/" target="_blank" rel="noopener">清华镜像 https://mirrors.tuna.tsinghua.edu.cn/help/anaconda/</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">conda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/free/</span><br><span class="line">conda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/main/</span><br><span class="line">conda config --set show_channel_urls yes</span><br></pre></td></tr></table></figure><h2 id="conda-删除包"><a class="header-anchor" href="#conda-删除包">¶</a>conda 删除包</h2><p>在终端中键入 <code>conda remove [-n env_name] package_name</code><br>可以通过<code>[-n env_name]</code>指定要删除包的环境</p><h2 id="conda-更新包"><a class="header-anchor" href="#conda-更新包">¶</a>conda 更新包</h2><p>在终端中键入 <code>conda update package_name</code></p><p>如果想更新环境中的所有包, 请使用 <code>conda update --all</code></p><h2 id="conda-列出包"><a class="header-anchor" href="#conda-列出包">¶</a>conda 列出包</h2><p>在终端中键入 <code>conda list</code><br><img src="/images/2019-01-08-21-02-39.png" alt=""></p><h2 id="conda-搜索包"><a class="header-anchor" href="#conda-搜索包">¶</a>conda 搜索包</h2><p>在终端中键入 <code>conda search search_iterm</code></p><h1>管理环境</h1><h2 id="conda-创建环境"><a class="header-anchor" href="#conda-创建环境">¶</a>conda 创建环境</h2><p>你可以使用 conda 创建环境以隔离项目。</p><p>要创建环境, 请在终端中使用 <code>conda create -n env_name [list of packages] [python=version]</code>。</p><p>创建具有特定 Python 版本的环境,<br>请键入类似于 <code>conda create -n py3 python=3</code> 或 <code>conda create -n py2 python=2</code> 的命令,<br>这些命令将<strong>分别安装</strong> Python 3 和 Python 2 的最新版本。<br>要安装特定版本(例如 Python 3.3), 请使用 <code>conda create -n py python=3.3</code>。</p><p>在这里,</p><blockquote><ul><li><code>-n env_name</code> 设置环境的名称(<strong>-n 是指名称</strong>),</li><li><code>list of packages</code> 是要安装在环境中的包的列表, 可不设置</li><li><code>python=version</code> version是指python版本, 一般都指定</li><li>只执行<code>conda create -n env_name</code>只会创建一个<strong>空的环境</strong>, 连python都没有, 运行的python是环境变量的python。需要装一个库后, 才会有python</li></ul></blockquote><p>例如, 要创建名为 my_env 的环境并在其中安装 numpy, 请键入 <code>conda create -n my_env numpy python=3.7</code>。<br><img src="/images/2019-01-08-21-25-55.png" alt=""></p><h2 id="conda-进入环境"><a class="header-anchor" href="#conda-进入环境">¶</a>conda 进入环境</h2><p>创建了环境后,<br>在 OSX/Linux 上使用 <code>source activate my_env</code> 进入环境<br>在 Windows 上, 请使用 <code>activate my_env</code></p><p><img src="/images/2019-01-08-21-38-35.png" alt=""></p><h2 id="conda-退出环境"><a class="header-anchor" href="#conda-退出环境">¶</a>conda 退出环境</h2><p>要离开环境,<br>在 OSX/Linux 上使用 <code>source deactivate</code><br>在 Windows 上, 请使用 <code>deactivate</code><br><img src="/images/2019-01-08-21-39-14.png" alt=""></p><h2 id="conda-查看环境"><a class="header-anchor" href="#conda-查看环境">¶</a>conda 查看环境</h2><p>终端键入 <code>conda info -e</code> 或 <code>conda info --env</code><br><img src="/images/2019-01-08-21-41-28.png" alt=""></p><h2 id="conda-删除环境"><a class="header-anchor" href="#conda-删除环境">¶</a>conda 删除环境</h2><p>终端键入 <code>conda remove -n env_name --all</code><br><img src="/images/2019-01-08-21-42-39.png" alt=""></p><h1>环境导出和导入</h1><h2 id="环境导出"><a class="header-anchor" href="#环境导出">¶</a>环境导出</h2><p>使用 <code>conda env export &gt; environment.yaml</code> 将<strong>包信息</strong>保存为 YAML。<br>命令的第一部分 <code>conda env export</code> 用于输出环境中的所有包的名称(包括 Python 版本)。</p><h2 id="环境导入"><a class="header-anchor" href="#环境导入">¶</a>环境导入</h2><p>要通过环境文件导入环境,<br>使用 <code>conda env create -f environment.yaml</code><br>这会创建一个新环境, 而且它具有同样的在 <code>environment.yaml</code> 中列出的库。</p><h1>其他</h1><p><code>conda update conda # 检查更新当前conda</code><br><code>python -version # 检查当前环境python版本</code></p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Tue Jan 15 2019 15:11:55 GMT+0800 (中国标准时间) --&gt;&lt;h1&gt;前言&lt;/h1&gt;&lt;p&gt;Conda 是一个开源的软件包管理系统和环境管理系统, 用于安装多个版本的软件包及其依赖关系, 并可在它们之间轻松切换。&lt;br&gt;Conda 是为 Python 程序创建的, 适用于 Linux, OS X 和Windows, 是目前最流行的 Python 环境管理工具&lt;/p&gt;
    
    </summary>
    
      <category term="Python" scheme="https://vonsdite.cn/categories/Python/"/>
    
      <category term="Anaconda" scheme="https://vonsdite.cn/categories/Python/Anaconda/"/>
    
    
      <category term="Python" scheme="https://vonsdite.cn/tags/Python/"/>
    
      <category term="Anaconda" scheme="https://vonsdite.cn/tags/Anaconda/"/>
    
  </entry>
  
  <entry>
    <title>Anaconda Navigator 简介</title>
    <link href="https://vonsdite.cn/posts/13d55c5e.html"/>
    <id>https://vonsdite.cn/posts/13d55c5e.html</id>
    <published>2019-01-08T12:14:24.000Z</published>
    <updated>2019-01-08T12:33:48.740Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Tue Jan 15 2019 15:11:55 GMT+0800 (中国标准时间) --><h1>简介</h1><h2 id="anaconda-navigator"><a class="header-anchor" href="#anaconda-navigator">¶</a>Anaconda Navigator</h2><p><strong>Anaconda Navigator</strong>: 是Anaconda Prompt的图形界面, 提供图形化显示和鼠标操作, 可以管理、安装更新第三方包等<br><img src="/images/2019-01-08-20-17-24.png" alt=""></p><a id="more"></a><h2 id="anaconda-prompt"><a class="header-anchor" href="#anaconda-prompt">¶</a>Anaconda Prompt</h2><p><strong>Anaconda Prompt</strong>: 是一个Anaconda的终端, 类似cmd命令可以便捷操作conda环境, 可以建立不同的python版本环境如Python2和Python3<br><img src="/images/2019-01-08-20-18-27.png" alt=""></p><h2 id="ipython"><a class="header-anchor" href="#ipython">¶</a>IPython</h2><p><strong>IPython</strong>: 是一个 python 的交互式 shell, 比默认的python shell 好用得多, 支持<strong>变量自动补全</strong>(tab), 自动缩进, 支持 <code>bash shell</code> 命令, 内置了许多很有用的功能和函数。</p><p><img src="/images/2019-01-08-20-25-37.png" alt=""></p><ul><li>自动补全功能, 使用tab键, 如输入im后按tab键, 可自动补全import。</li><li>进入IPython, CMD中输入ipython</li><li>退出IPython, CMD中输入quit()</li></ul><h3 id="使用魔法指令"><a class="header-anchor" href="#使用魔法指令">¶</a>使用魔法指令%</h3><blockquote><ul><li><code>%run test.py</code> 直接运行python脚本</li><li><code>%pwd</code>: 显示当前工作目录。</li><li><code>%cd</code>: 切换工作目录。</li><li><code>%bookmark</code>: 工作目录书签</li></ul></blockquote><h3 id="使用快捷键"><a class="header-anchor" href="#使用快捷键">¶</a>使用快捷键</h3><blockquote><ul><li><code>ctrl+u</code> 删除整行(光标在最后)</li><li><code>ctrl+k</code> 删除整行(光标在最前)</li><li><code>ctrl+l</code> 清空屏幕</li><li><code>ctrl+c</code> 中止运行程序</li><li><code>ctrl+e</code> 跳转到最后</li><li><code>ctrl+a</code> 跳转到第一行(与Windows热键冲突, 是全选)</li><li><code>ctrl+r</code> 反向搜索历史</li></ul></blockquote><h2 id="jupyter-notebook"><a class="header-anchor" href="#jupyter-notebook">¶</a>Jupyter Notebook</h2><p><strong>Jupyter Notebook</strong>: 这得从<code>IPython3.x</code>版本开始说起, 这是最后的大一统版本, 包括notebook、qtconsole等等, 从IPython 4.0版本开始IPython只集中精力做交互式shell, 变得轻量化; 而剩下的notebook格式, qtconsole, 和notebook web应用等都分离出来统一命名为<strong>Jupyter</strong>,至此IPython和Jupyter分家。<strong>jupyter用网页浏览器打开, 以cell为单元运行, 可用cmd命令直接打开</strong>。</p><h3 id="jupyter的各种快捷键"><a class="header-anchor" href="#jupyter的各种快捷键">¶</a>Jupyter的各种快捷键</h3><blockquote><ul><li>执行当前cell, 并自动跳到下一个cell: <code>Shift Enter</code></li><li>执行当前cell, 执行后不自动调转到下一个cell: <code>Ctrl Enter</code></li><li>是当前的cell进入编辑模式:<code>Enter</code></li><li>退出当前cell的编辑模式: <code>Esc</code></li><li>删除当前的cell: <code>双D</code></li><li>为当前的cell加入line number: <code>单L</code></li><li>将当前的cell转化为具有一级标题的maskdown: <code>单1</code></li><li>将当前的cell转化为具有二级标题的maskdown: <code>单2</code></li><li>将当前的cell转化为具有三级标题的maskdown: <code>单3</code></li><li>为一行或者多行添加/取消注释: <code>Crtl /</code></li><li>撤销对某个cell的删除: <code>z</code></li><li>浏览器的各个Tab之间切换: <code>Crtl PgUp</code>和<code>Crtl PgDn</code></li><li>快速跳转到首个cell: <code>Crtl Home</code></li><li>快速跳转到最后一个cell: <code>Crtl End</code></li></ul></blockquote><h2 id="jupyter-qtconsole"><a class="header-anchor" href="#jupyter-qtconsole">¶</a>Jupyter Qtconsole</h2><p><strong>Jupyter Qtconsole</strong>: 调用交互式命令台。从IPython4.0版本开始, 很多IPython子命令现在变成了Jupyter子命令, 如ipython notebook现在是jupyter noteboook。</p><h2 id="spyder"><a class="header-anchor" href="#spyder">¶</a>Spyder</h2><p>Spyder: 是一个使用Python语言的开放源代码跨平台科学运算IDE。Spyder可以跨平台, 也可以使用附加组件扩充, 自带交互式工具以处理数据。可以直接查看对象, 如果是多列还是彩色的, 相对来说便于分辨行列。</p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Tue Jan 15 2019 15:11:55 GMT+0800 (中国标准时间) --&gt;&lt;h1&gt;简介&lt;/h1&gt;&lt;h2 id=&quot;anaconda-navigator&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#anaconda-navigator&quot;&gt;¶&lt;/a&gt;Anaconda Navigator&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;Anaconda Navigator&lt;/strong&gt;: 是Anaconda Prompt的图形界面, 提供图形化显示和鼠标操作, 可以管理、安装更新第三方包等&lt;br&gt;&lt;img src=&quot;/images/2019-01-08-20-17-24.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Python" scheme="https://vonsdite.cn/categories/Python/"/>
    
      <category term="Anaconda" scheme="https://vonsdite.cn/categories/Python/Anaconda/"/>
    
    
      <category term="Python" scheme="https://vonsdite.cn/tags/Python/"/>
    
      <category term="Anaconda" scheme="https://vonsdite.cn/tags/Anaconda/"/>
    
  </entry>
  
  <entry>
    <title>解决hexo leancloud Too many requests 错误</title>
    <link href="https://vonsdite.cn/posts/416930d1.html"/>
    <id>https://vonsdite.cn/posts/416930d1.html</id>
    <published>2019-01-08T10:19:40.000Z</published>
    <updated>2019-01-08T10:44:05.853Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Tue Jan 15 2019 15:11:55 GMT+0800 (中国标准时间) --><h1>前言</h1><p>LeanCloud可以统计Hexo文章的阅读次数, 但是有它的缺陷。<br>当你的文章数目逐渐变多的时候, 使用<code>hexo d</code>时, 经常会出现 Too many requests的错误。<br>原因是, 使用<strong>免费开发版</strong>Leancloud无法短时间内接受太多的请求, 所以会导致429错误。<br><img src="/images/2019-01-08-18-37-36.png" alt=""></p><a id="more"></a><h1>官方解释</h1><blockquote><p>信息 - Too many requests.<br>含义 - 超过应用的流控限制, 即超过每个应用同一时刻最多可使用的工作线程数, 或者说同一时刻最多可以同时处理的数据请求。通过 控制台 &gt; 存储 &gt; API 统计 &gt; API 性能 &gt; 总览 可以查看应用产生的请求统计数据, 如平均工作线程、平均响应时间等。使用 LeanCloud 商用版或企业版 的用户, 如有需要, 可以联系我们来调整工作线程数。</p></blockquote><h1>原因</h1><p>查看源代码, <code>node_modules\hexo-leancloud-counter-security\index.js</code>, 发现每次进行<code>hexo d</code>的时候, 他对每个博文的title和url, 向leancloud发送一次查询请求, 如果发现leancloud那边儿没有该条记录的话, 那么再发送一条插入请求。<br>原逻辑如下:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">_.forEach(urls, <span class="function"><span class="keyword">function</span> (<span class="params">x</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> query = <span class="keyword">new</span> AV.Query(<span class="string">'Counter'</span>);</span><br><span class="line">    query.equalTo(<span class="string">'url'</span>, x.url);</span><br><span class="line">    query.count().then(<span class="function"><span class="keyword">function</span> (<span class="params">count</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (count === <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">var</span> counter = <span class="keyword">new</span> Counter();</span><br><span class="line">            counter.set(<span class="string">'url'</span>, x.url);</span><br><span class="line">            counter.set(<span class="string">'title'</span>, x.title);</span><br><span class="line">            counter.set(<span class="string">'time'</span>, <span class="number">0</span>);</span><br><span class="line">            counter.save().then(<span class="function"><span class="keyword">function</span> (<span class="params">obj</span>) </span>&#123;</span><br><span class="line">                log.info(x.title + <span class="string">' is saved as: '</span> + obj.id);</span><br><span class="line">            &#125;, <span class="function"><span class="keyword">function</span> (<span class="params">error</span>) </span>&#123;</span><br><span class="line">                log.error(error);</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;, <span class="function"><span class="keyword">function</span> (<span class="params">error</span>) </span>&#123;</span><br><span class="line">        log.error(error);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>就是说, 每一次<code>hexo d</code>的时候最少的查询次数等于你的博文个数。如果你的leancloud的应用的处理能力不够强大的时候, 对于这种高强度的请求, 当然会出现Too Many Requests的错误代码。</p><p>我们要做的就是较少不必要的请求咯。<br>本地记录一个title和url的json数组, 每次查询这个数组, 看看哪些是真正的需要查询的, 然后再去查询leancloud。其实可以这样理解, 这个本地的数组存储就是leancloud的远程数据库表。<br>因为筛除了一些记录, 所以每次hexo d时的请求数量仅仅是相比上一次hexo d时候的增量。</p><h1>修改代码</h1><p>修改<code>node_modules\hexo-leancloud-counter-security\index.js</code>这个文件, 修改处代码均有注释, 往下翻就可以看到了</p><details><summary>展开代码</summary><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">'use strict'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> _regenerator = <span class="built_in">require</span>(<span class="string">'babel-runtime/regenerator'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> _regenerator2 = _interopRequireDefault(_regenerator);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> _asyncToGenerator2 = <span class="built_in">require</span>(<span class="string">'babel-runtime/helpers/asyncToGenerator'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> _stringify = <span class="built_in">require</span>(<span class="string">'babel-runtime/core-js/json/stringify'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> _stringify2 = _interopRequireDefault(_stringify);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> sync = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> _ref = (<span class="number">0</span>, _asyncToGenerator3.default)( <span class="comment">/*#__PURE__*/</span>_regenerator2.default.mark(<span class="function"><span class="keyword">function</span> _callee(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> log, config, APP_ID, APP_KEY, publicDir, UrlsFile, urls, currentUser, userName, passWord, Counter;</span><br><span class="line">        <span class="keyword">return</span> _regenerator2.default.wrap(<span class="function"><span class="keyword">function</span> _callee$(<span class="params">_context</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">while</span> (<span class="number">1</span>) &#123;</span><br><span class="line">                <span class="keyword">switch</span> (_context.prev = _context.next) &#123;</span><br><span class="line">                    <span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">                        log = <span class="keyword">this</span>.log;</span><br><span class="line">                        config = <span class="keyword">this</span>.config;</span><br><span class="line"></span><br><span class="line">                        <span class="keyword">if</span> (!config.leancloud_counter_security.enable_sync) &#123;</span><br><span class="line">                            _context.next = <span class="number">19</span>;</span><br><span class="line">                            <span class="keyword">break</span>;</span><br><span class="line">                        &#125;</span><br><span class="line"></span><br><span class="line">                        APP_ID = config.leancloud_counter_security.app_id;</span><br><span class="line">                        APP_KEY = config.leancloud_counter_security.app_key;</span><br><span class="line">                        publicDir = <span class="keyword">this</span>.public_dir;</span><br><span class="line">                        UrlsFile = pathFn.join(publicDir, <span class="string">'leancloud_counter_security_urls.json'</span>);</span><br><span class="line">                        urls = <span class="built_in">JSON</span>.parse(fs.readFileSync(UrlsFile, <span class="string">'utf8'</span>));</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">                        AV.init(&#123;</span><br><span class="line">                            appId: APP_ID,</span><br><span class="line">                            appKey: APP_KEY</span><br><span class="line">                        &#125;);</span><br><span class="line"></span><br><span class="line">                        currentUser = AV.User.current();</span><br><span class="line"></span><br><span class="line">                        <span class="keyword">if</span> (currentUser) &#123;</span><br><span class="line">                            _context.next = <span class="number">16</span>;</span><br><span class="line">                            <span class="keyword">break</span>;</span><br><span class="line">                        &#125;</span><br><span class="line"></span><br><span class="line">                        userName = config.leancloud_counter_security.username;</span><br><span class="line">                        passWord = config.leancloud_counter_security.password;</span><br><span class="line"></span><br><span class="line">                        <span class="keyword">if</span> (!userName) &#123;</span><br><span class="line">                            userName = readlineSync.question(<span class="string">'Enter your username: '</span>);</span><br><span class="line">                            passWord = readlineSync.question(<span class="string">'Enter your password: '</span>, &#123; <span class="attr">hideEchoBack</span>: <span class="literal">true</span> &#125;);</span><br><span class="line">                        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (!passWord) &#123;</span><br><span class="line">                            passWord = readlineSync.question(<span class="string">'Enter your password: '</span>, &#123; <span class="attr">hideEchoBack</span>: <span class="literal">true</span> &#125;);</span><br><span class="line">                        &#125;</span><br><span class="line">                        _context.next = <span class="number">16</span>;</span><br><span class="line">                        <span class="keyword">return</span> AV.User.logIn(userName, passWord).then(<span class="function"><span class="keyword">function</span> (<span class="params">loginedUser</span>) </span>&#123;</span><br><span class="line">                            log.info(<span class="string">'Logined as: '</span> + loginedUser.getUsername());</span><br><span class="line">                        &#125;, <span class="function"><span class="keyword">function</span> (<span class="params">error</span>) </span>&#123;</span><br><span class="line">                            log.error(error);</span><br><span class="line">                        &#125;);</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">case</span> <span class="number">16</span>:</span><br><span class="line"></span><br><span class="line">                        log.info(<span class="string">'Now syncing your posts list to leancloud counter...'</span>);</span><br><span class="line">                        Counter = AV.Object.extend(<span class="string">'Counter'</span>);</span><br><span class="line"></span><br><span class="line">                        <span class="comment">//----add----</span></span><br><span class="line">                        urls.sort(cmp);</span><br><span class="line"></span><br><span class="line">                        <span class="keyword">var</span> memoFile = pathFn.join(publicDir, <span class="string">"leancloud_memo.json"</span>);</span><br><span class="line">                        <span class="keyword">if</span>(!fs.existsSync(memoFile))&#123;</span><br><span class="line">                            fs.writeFileSync(memoFile, <span class="string">"[\n]"</span>);</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">var</span> memoData = fs.readFileSync(memoFile, <span class="string">"utf-8"</span>).split(<span class="string">"\n"</span>);</span><br><span class="line">                        <span class="keyword">var</span> memoIdx = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">                        <span class="keyword">var</span> newData = [];</span><br><span class="line">                        <span class="keyword">var</span> cnt = <span class="number">0</span>;</span><br><span class="line">                        <span class="keyword">var</span> limit = <span class="number">0</span>;</span><br><span class="line">                        <span class="keyword">var</span> env = <span class="keyword">this</span>;</span><br><span class="line">                        <span class="comment">//----end----</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">                        _.forEach(urls, <span class="function"><span class="keyword">function</span> (<span class="params">x</span>) </span>&#123;</span><br><span class="line">                            <span class="comment">//----add----</span></span><br><span class="line">                            <span class="keyword">var</span> y = &#123;&#125;;</span><br><span class="line">                            y.title = <span class="string">""</span>;</span><br><span class="line">                            y.url = <span class="string">""</span>;</span><br><span class="line"></span><br><span class="line">                            <span class="keyword">var</span> flag = <span class="literal">false</span>;</span><br><span class="line">                            <span class="keyword">while</span>(<span class="literal">true</span>)&#123;</span><br><span class="line">                                <span class="keyword">if</span>(memoData[memoIdx] == <span class="string">']'</span>) <span class="keyword">break</span>;</span><br><span class="line">                                y = <span class="built_in">JSON</span>.parse(memoData[memoIdx].substring(<span class="number">0</span>, memoData[memoIdx].length<span class="number">-1</span>));</span><br><span class="line">                                <span class="keyword">if</span>(y.url &gt; x.url) <span class="keyword">break</span>;</span><br><span class="line">                                <span class="keyword">if</span>(y.url == x.url &amp;&amp; y.title == x.title)&#123;</span><br><span class="line">                                    flag = <span class="literal">true</span>;</span><br><span class="line">                                    <span class="keyword">break</span>;</span><br><span class="line">                                &#125;</span><br><span class="line">                                memoIdx++;</span><br><span class="line">                            &#125;</span><br><span class="line">                            <span class="keyword">if</span>(!flag) &#123;</span><br><span class="line">                                log.info(<span class="string">"Dealing with record of "</span> + x.title);</span><br><span class="line">                                limit++;</span><br><span class="line">                                <span class="comment">//----end----</span></span><br><span class="line">                                <span class="keyword">var</span> query = <span class="keyword">new</span> AV.Query(<span class="string">'Counter'</span>);</span><br><span class="line">                                query.equalTo(<span class="string">'url'</span>, x.url);</span><br><span class="line">                                query.count().then(<span class="function"><span class="keyword">function</span> (<span class="params">count</span>) </span>&#123;</span><br><span class="line">                                    <span class="keyword">if</span> (count === <span class="number">0</span>) &#123;</span><br><span class="line">                                        <span class="keyword">var</span> counter = <span class="keyword">new</span> Counter();</span><br><span class="line">                                        counter.set(<span class="string">'url'</span>, x.url);</span><br><span class="line">                                        counter.set(<span class="string">'title'</span>, x.title);</span><br><span class="line">                                        counter.set(<span class="string">'time'</span>, <span class="number">0</span>);</span><br><span class="line">                                        counter.save().then(<span class="function"><span class="keyword">function</span> (<span class="params">obj</span>) </span>&#123;</span><br><span class="line">                                            log.info(x.title + <span class="string">' is saved as: '</span> + obj.id);</span><br><span class="line">                                            <span class="comment">//----add----</span></span><br><span class="line">                                            newData.push(x);</span><br><span class="line">                                            cnt++;</span><br><span class="line">                                            postOperation(env, cnt, limit, newData, memoData);</span><br><span class="line">                                            <span class="comment">//----end----</span></span><br><span class="line"></span><br><span class="line">                                        &#125;, <span class="function"><span class="keyword">function</span> (<span class="params">error</span>) </span>&#123;</span><br><span class="line">                                            log.error(error);</span><br><span class="line">                                            <span class="comment">//----add----</span></span><br><span class="line">                                            cnt++;</span><br><span class="line">                                            postOperation(env, cnt, limit, newData, memoData);</span><br><span class="line">                                            <span class="comment">//----end----</span></span><br><span class="line">                                        &#125;);</span><br><span class="line">                                    &#125;</span><br><span class="line">                                    <span class="comment">//----add----</span></span><br><span class="line">                                    <span class="keyword">else</span>&#123;</span><br><span class="line">                                        newData.push(x);</span><br><span class="line">                                        cnt++;</span><br><span class="line">                                        postOperation(env, cnt, limit, newData, memoData);</span><br><span class="line">                                    &#125;</span><br><span class="line">                                    <span class="comment">//----end----</span></span><br><span class="line"></span><br><span class="line">                                &#125;, <span class="function"><span class="keyword">function</span> (<span class="params">error</span>) </span>&#123;</span><br><span class="line">                                    log.error(error);</span><br><span class="line">                                    <span class="comment">//----add----</span></span><br><span class="line">                                    cnt++;</span><br><span class="line">                                    postOperation(env, cnt, limit, newData, memoData);</span><br><span class="line">                                    <span class="comment">//----end----</span></span><br><span class="line">                                &#125;);</span><br><span class="line">                            <span class="comment">//----add----</span></span><br><span class="line">                            &#125;</span><br><span class="line">                            <span class="comment">//----end----</span></span><br><span class="line">                        &#125;);</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">case</span> <span class="number">19</span>:</span><br><span class="line">                    <span class="keyword">case</span> <span class="string">'end'</span>:</span><br><span class="line">                        <span class="keyword">return</span> _context.stop();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, _callee, <span class="keyword">this</span>);</span><br><span class="line">    &#125;));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> <span class="title">sync</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> _ref.apply(<span class="keyword">this</span>, <span class="built_in">arguments</span>);</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;();</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> _interopRequireDefault(<span class="params">obj</span>) </span>&#123; <span class="keyword">return</span> obj &amp;&amp; obj.__esModule ? obj : &#123; <span class="attr">default</span>: obj &#125;; &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> AV = <span class="built_in">require</span>(<span class="string">'leancloud-storage'</span>);</span><br><span class="line"><span class="keyword">var</span> _ = <span class="built_in">require</span>(<span class="string">'lodash'</span>);</span><br><span class="line"><span class="keyword">var</span> readlineSync = <span class="built_in">require</span>(<span class="string">'readline-sync'</span>);</span><br><span class="line"><span class="keyword">var</span> packageInfo = <span class="built_in">require</span>(<span class="string">'./package.json'</span>);</span><br><span class="line"><span class="keyword">var</span> pathFn = <span class="built_in">require</span>(<span class="string">'path'</span>);</span><br><span class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">generate_post_list</span>(<span class="params">locals</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> config = <span class="keyword">this</span>.config;</span><br><span class="line">    <span class="keyword">if</span> (config.leancloud_counter_security.enable_sync) &#123;</span><br><span class="line">        <span class="keyword">var</span> urlsPath = <span class="string">'leancloud_counter_security_urls.json'</span>;</span><br><span class="line">        <span class="keyword">var</span> urls = [].concat(locals.posts.toArray()).filter(<span class="function"><span class="keyword">function</span> (<span class="params">x</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> x.published;</span><br><span class="line">        &#125;).map(<span class="function"><span class="keyword">function</span> (<span class="params">x</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> &#123;</span><br><span class="line">                title: x.title,</span><br><span class="line">                url: config.root + x.path</span><br><span class="line">            &#125;;</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            path: urlsPath,</span><br><span class="line">            data: (<span class="number">0</span>, _stringify2.default)(urls)</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">hexo.extend.generator.register(<span class="string">'leancloud_counter_security_generator'</span>, generate_post_list);</span><br><span class="line"></span><br><span class="line">hexo.extend.deployer.register(<span class="string">'leancloud_counter_security_sync'</span>, sync);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> commandOptions = &#123;</span><br><span class="line">    desc: packageInfo.description,</span><br><span class="line">    usage: <span class="string">' &lt;argument&gt;'</span>,</span><br><span class="line">    <span class="string">'arguments'</span>: [&#123;</span><br><span class="line">        <span class="string">'name'</span>: <span class="string">'register | r &lt;username&gt; &lt;password&gt;'</span>,</span><br><span class="line">        <span class="string">'desc'</span>: <span class="string">'Register a new user.'</span></span><br><span class="line">    &#125;]</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">commandFunc</span>(<span class="params">args</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> log = <span class="keyword">this</span>.log;</span><br><span class="line">    <span class="keyword">var</span> config = <span class="keyword">this</span>.config;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (args._.length !== <span class="number">3</span>) &#123;</span><br><span class="line">        log.error(<span class="string">'Too Few or Many Arguments.'</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (args._[<span class="number">0</span>] === <span class="string">'register'</span> || args._[<span class="number">0</span>] === <span class="string">'r'</span>) &#123;</span><br><span class="line">        <span class="keyword">var</span> APP_ID = config.leancloud_counter_security.app_id;</span><br><span class="line">        <span class="keyword">var</span> APP_KEY = config.leancloud_counter_security.app_key;</span><br><span class="line">        AV.init(&#123;</span><br><span class="line">            appId: APP_ID,</span><br><span class="line">            appKey: APP_KEY</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> user = <span class="keyword">new</span> AV.User();</span><br><span class="line">        user.setUsername(<span class="built_in">String</span>(args._[<span class="number">1</span>]));</span><br><span class="line">        user.setPassword(<span class="built_in">String</span>(args._[<span class="number">2</span>]));</span><br><span class="line">        user.signUp().then(<span class="function"><span class="keyword">function</span> (<span class="params">loginedUser</span>) </span>&#123;</span><br><span class="line">            log.info(loginedUser.getUsername() + <span class="string">' is successfully signed up'</span>);</span><br><span class="line">        &#125;, <span class="function"><span class="keyword">function</span> (<span class="params">error</span>) </span>&#123;</span><br><span class="line">            log.error(error);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        log.error(<span class="string">'Unknown Command.'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">hexo.extend.console.register(<span class="string">'lc-counter'</span>, <span class="string">'hexo-leancloud-counter-security'</span>, commandOptions, commandFunc);</span><br><span class="line"><span class="comment">//----add----</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">cmp</span>(<span class="params">x, y</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(x.url &lt; y.url)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(x.url == y.url)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> postOperation = <span class="function"><span class="keyword">function</span> (<span class="params">env, cnt, limit, newData, memoData</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(cnt == limit)&#123;</span><br><span class="line">        <span class="keyword">var</span> log = env.log;</span><br><span class="line">        newData.sort(cmp);</span><br><span class="line">        <span class="keyword">var</span> sourceDir = env.source_dir;</span><br><span class="line">        <span class="keyword">var</span> publicDir = env.public_dir;</span><br><span class="line">        <span class="keyword">var</span> memoFile = pathFn.join(sourceDir, <span class="string">"leancloud_memo.json"</span>);</span><br><span class="line">        fs.writeFileSync(memoFile, <span class="string">"[\n"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> memoIdx = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; newData[i]; i++)&#123;</span><br><span class="line">            <span class="keyword">while</span>(<span class="literal">true</span>)&#123;</span><br><span class="line">                <span class="keyword">if</span>(memoData[memoIdx] == <span class="string">']'</span>) <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">var</span> y = <span class="built_in">JSON</span>.parse(memoData[memoIdx].substring(<span class="number">0</span>, memoData[memoIdx].length<span class="number">-1</span>));</span><br><span class="line">                <span class="keyword">if</span>(y.url &gt; newData[i].url) <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">                fs.writeFileSync(memoFile, memoData[memoIdx] + <span class="string">"\n"</span>, &#123;<span class="string">'flag'</span>:<span class="string">'a'</span>&#125;);</span><br><span class="line">                memoIdx++;</span><br><span class="line">            &#125;</span><br><span class="line">            fs.writeFileSync(memoFile, <span class="string">"&#123;\"title\":\""</span> + newData[i].title + <span class="string">"\",\"url\":\""</span> + newData[i].url + <span class="string">"\"&#125;,\n"</span>, &#123;<span class="string">'flag'</span>:<span class="string">'a'</span>&#125;);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span>(memoData[memoIdx] != <span class="string">']'</span>)&#123;</span><br><span class="line">            fs.writeFileSync(memoFile, memoData[memoIdx] + <span class="string">"\n"</span>, &#123;<span class="string">'flag'</span>:<span class="string">'a'</span>&#125;);</span><br><span class="line">            memoIdx++;</span><br><span class="line">        &#125;</span><br><span class="line">        fs.writeFileSync(memoFile, memoData[memoIdx], &#123;<span class="string">'flag'</span>:<span class="string">'a'</span>&#125;);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> srcFile = pathFn.join(sourceDir, <span class="string">"leancloud_memo.json"</span>);</span><br><span class="line">        <span class="keyword">var</span> destFile = pathFn.join(publicDir, <span class="string">"leancloud_memo.json"</span>);</span><br><span class="line">        <span class="keyword">var</span> readStream = fs.createReadStream(srcFile);</span><br><span class="line">        <span class="keyword">var</span> writeStream = fs.createWriteStream(destFile);</span><br><span class="line">        readStream.pipe(writeStream);</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"leancloud_memo.json successfully updated."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></details><p>修改完后, 还需要打开博客配置文件<code>_config.yml</code>找到<code>skip_render:</code>这一项，然后加上<code>leancloud_memo.json</code>。</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">skip_render:</span> </span><br><span class="line"><span class="bullet">  -</span> <span class="string">leancloud_memo.json</span></span><br></pre></td></tr></table></figure><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Tue Jan 15 2019 15:11:55 GMT+0800 (中国标准时间) --&gt;&lt;h1&gt;前言&lt;/h1&gt;&lt;p&gt;LeanCloud可以统计Hexo文章的阅读次数, 但是有它的缺陷。&lt;br&gt;当你的文章数目逐渐变多的时候, 使用&lt;code&gt;hexo d&lt;/code&gt;时, 经常会出现 Too many requests的错误。&lt;br&gt;原因是, 使用&lt;strong&gt;免费开发版&lt;/strong&gt;Leancloud无法短时间内接受太多的请求, 所以会导致429错误。&lt;br&gt;&lt;img src=&quot;/images/2019-01-08-18-37-36.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Hexo" scheme="https://vonsdite.cn/categories/Hexo/"/>
    
      <category term="Next" scheme="https://vonsdite.cn/categories/Hexo/Next/"/>
    
    
      <category term="Hexo" scheme="https://vonsdite.cn/tags/Hexo/"/>
    
      <category term="Next" scheme="https://vonsdite.cn/tags/Next/"/>
    
      <category term="Leancloud" scheme="https://vonsdite.cn/tags/Leancloud/"/>
    
  </entry>
  
  <entry>
    <title>K-Means 算法实现, 动态显示变化</title>
    <link href="https://vonsdite.cn/posts/b62ef61c.html"/>
    <id>https://vonsdite.cn/posts/b62ef61c.html</id>
    <published>2019-01-08T07:07:57.000Z</published>
    <updated>2019-01-08T06:36:58.873Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Tue Jan 15 2019 15:11:55 GMT+0800 (中国标准时间) --><h1>项目介绍</h1><p><strong>源代码: <a href="https://github.com/VonSdite/K-Means" target="_blank" rel="noopener">https://github.com/VonSdite/K-Means</a></strong><br><strong>使用前记得先安装相关的包</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install -r requirement.txt</span><br></pre></td></tr></table></figure><h2 id="以本项目为例"><a class="header-anchor" href="#以本项目为例">¶</a>以本项目为例</h2><ol><li>先运行<code>dataClean.py</code>程序, 对数据<code>iris.data</code>做处理, 得到<code>iris.csv</code>以及真实的分类图<br><img src="/images/2.png" alt=""></li></ol><a id="more"></a><blockquote><p><code>iris.data</code>是鸢尾花数据集, 包含3个不同品种的鸢尾花(Setosa, Versicolour, and Virginica)数据, 以及花瓣和萼片的长度、宽度。 数据有150行4列, 150行指150朵花, 4列分别是Sepal Length(萼片长度), Sepal Width(萼片宽度), Petal Length(花瓣长度) and Petal Width(花瓣宽度)</p></blockquote><ol start="2"><li>运行<code>main.py</code></li></ol><p><img src="/images/1.png" alt=""></p><ol start="3"><li>点击 <code>打开</code>-<code>open file</code>, 打开csv文件(也只能打开csv文件)</li></ol><p><strong>注意csv文件的要求:</strong></p><ul><li>要带有表头</li><li>数据是两列数值数据, 所以需要先处理数据<br>数据格式类似如下</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">x,y</span><br><span class="line">1,1</span><br><span class="line">2,3</span><br><span class="line">4,5</span><br></pre></td></tr></table></figure><ol start="4"><li><p>打开后, 会先绘制出数据的散点图<br><img src="/images/3.png" alt=""></p></li><li><p>输入<code>分类个数k</code>-点击<code>分类</code>, 分类过程如下</p></li></ol><p>分类过程中, <strong>左下角状态栏</strong>会显示<strong>当前的状态</strong><br><img src="/images/4.gif" alt=""></p><h2 id="分类结果比较"><a class="header-anchor" href="#分类结果比较">¶</a>分类结果比较</h2><p><img src="/images/6.jpg" alt=""></p><p><strong>分析</strong></p><p>因为数据只用到了<strong>萼片的宽度和长度</strong>, 只做了二维数据的<code>k-means</code>, 所以对于区分<strong>1类</strong>和<strong>2类花朵</strong>的效果还没达到完全区分的效果, 但是已经能万全区分<strong>0类花朵</strong>了</p><p>提升方面, 提升维度, 把花瓣的宽度和长度也考虑进去, 可能可以更好的区分</p><h1>K-Means介绍</h1><h2 id="概述"><a class="header-anchor" href="#概述">¶</a>概述</h2><p><code>K-means算法</code>是集简单和经典于一身的<strong>基于距离</strong>的聚类算法</p><p>采用距离作为相似性的评价指标, 即认为两个对象的距离越近, 其相似度就越大。</p><p>该算法认为类簇是由距离靠近的对象组成的, 因此把得到<strong>紧凑且独立</strong>的簇作为最终目标。</p><h2 id="核心思想"><a class="header-anchor" href="#核心思想">¶</a>核心思想</h2><p>通过迭代寻找k个类簇的一种划分方案, 使得用这k个类簇的均值来代表相应各类样本时所得的总体误差最小。</p><p>k个聚类具有以下特点：各聚类本身尽可能的紧凑, 而各聚类之间尽可能的分开。</p><p>k-means算法的基础是最小误差平方和准则,</p><p>其代价函数是：<br><img src="/images/6.png" alt=""> 式中, μc(i)表示第i个聚类的均值。</p><p>各类簇内的样本越相似, 其与该类均值间的误差平方越小, 对所有类所得到的误差平方求和, 即可验证分为k类时, 各聚类是否是最优的。</p><p>上式的代价函数无法用解析的方法最小化, 只能有迭代的方法。</p><h2 id="算法实现步骤"><a class="header-anchor" href="#算法实现步骤">¶</a>算法实现步骤</h2><p>k-means算法是将样本聚类成 k个簇(cluster), 其中k是用户给定的, 其求解过程非常直观简单, 具体算法描述如下：</p><ol><li><p>随机选取 k个聚类质心点</p></li><li><p>重复下面过程直到收敛 {</p></li></ol><p>对于每一个样例 i, 计算其应该属于的类：<br><img src="/images/7.png" alt=""></p><p>对于每一个类 j, 重新计算该类的质心：<br><img src="/images/8.png" alt=""><br>}</p><p>其伪代码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">创建k个点作为初始的质心点(随机选择)</span><br><span class="line"></span><br><span class="line">当任意一个点的簇分配结果发生改变时</span><br><span class="line"></span><br><span class="line">       对数据集中的每一个数据点</span><br><span class="line"></span><br><span class="line">              对每一个质心</span><br><span class="line"></span><br><span class="line">                     计算质心与数据点的距离</span><br><span class="line"></span><br><span class="line">              将数据点分配到距离最近的簇</span><br><span class="line"></span><br><span class="line">       对每一个簇, 计算簇中所有点的均值, 并将均值作为质心</span><br></pre></td></tr></table></figure><h2 id="k-means算法补充"><a class="header-anchor" href="#k-means算法补充">¶</a>K-means算法补充</h2><p>K-means算法的缺点及改进方法</p><p>(1)k值的选择是用户指定的,不同的k得到的结果会有挺大的不同,如下图所示,左边是k=3的结果,这个就太稀疏了,蓝色的那个簇其实是可以再划分成两个簇的。而右图是k=5的结果,可以看到红色菱形和蓝色菱形这两个簇应该是可以合并成一个簇的：</p><p>改进：</p><p>对k的选择可以先用一些算法分析数据的分布,如重心和密度等,然后选择合适的k</p><p><img src="/images/9.png" alt=""></p><p>(2)对k个<strong>初始质心</strong>的选择比较敏感,容易陷入<strong>局部最小值</strong>。例如,我们上面的算法运行的时候,有可能会得到不同的结果,如下面这两种情况。K-means也是收敛了,只是收敛到了局部最小值：</p><p>改进：<br>有人提出了另一个成为二分k均值(bisecting k-means)算法,它对初始的k个质心的选择就不太敏感</p><p><img src="/images/10.png" alt=""></p><p>(3)存在局限性,如下面这种非球状的数据分布就搞不定了：</p><p><img src="/images/11.png" alt=""></p><p>(4)数据集<strong>比较大</strong>的时候,收敛会<strong>比较慢</strong>。</p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Tue Jan 15 2019 15:11:55 GMT+0800 (中国标准时间) --&gt;&lt;h1&gt;项目介绍&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;源代码: &lt;a href=&quot;https://github.com/VonSdite/K-Means&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://github.com/VonSdite/K-Means&lt;/a&gt;&lt;/strong&gt;&lt;br&gt;&lt;strong&gt;使用前记得先安装相关的包&lt;/strong&gt;&lt;/p&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;pip install -r requirement.txt&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h2 id=&quot;以本项目为例&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#以本项目为例&quot;&gt;¶&lt;/a&gt;以本项目为例&lt;/h2&gt;&lt;ol&gt;&lt;li&gt;先运行&lt;code&gt;dataClean.py&lt;/code&gt;程序, 对数据&lt;code&gt;iris.data&lt;/code&gt;做处理, 得到&lt;code&gt;iris.csv&lt;/code&gt;以及真实的分类图&lt;br&gt;&lt;img src=&quot;/images/2.png&quot; alt=&quot;&quot;&gt;&lt;/li&gt;&lt;/ol&gt;
    
    </summary>
    
      <category term="Python" scheme="https://vonsdite.cn/categories/Python/"/>
    
      <category term="KMeans" scheme="https://vonsdite.cn/categories/Python/KMeans/"/>
    
    
      <category term="Python" scheme="https://vonsdite.cn/tags/Python/"/>
    
      <category term="KMeans" scheme="https://vonsdite.cn/tags/KMeans/"/>
    
  </entry>
  
  <entry>
    <title>vi/vim 字符出现次数统计</title>
    <link href="https://vonsdite.cn/posts/205709c1.html"/>
    <id>https://vonsdite.cn/posts/205709c1.html</id>
    <published>2019-01-03T11:22:45.000Z</published>
    <updated>2019-01-12T10:58:49.229Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Tue Jan 15 2019 15:11:55 GMT+0800 (中国标准时间) --><h1>Vi/Vim统计字符出现次数</h1><p>将被统计的文本内容如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"> network. 1network net work Networked NETWORK</span><br><span class="line"> network 1network net work Networked NETWORK</span><br><span class="line">networked</span><br><span class="line">network network,hello worldk</span><br></pre></td></tr></table></figure><a id="more"></a><h2 id="全词匹配"><a class="header-anchor" href="#全词匹配">¶</a>全词匹配</h2><p>只统计&quot;network&quot;这个单词出现的次数</p><p>vi进入ex模式, 键入如下的命令</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">:%s/\&lt;network\&gt;//gn</span><br></pre></td></tr></table></figure><p><img src="/images/2019-01-03-19-36-59.png" alt=""></p><p>由图可知, 共<strong>匹配到4次</strong>, 而且我们知道单词<strong>network后面跟 &quot;.&quot; &quot;,&quot;</strong>, 它依旧是 network单词, 均被匹配到了</p><p><strong>解释</strong></p><blockquote><ul><li><strong>%</strong> 指明操作区间, **%**表示全文本; 可以使用1,$或者行区间代替</li><li><strong>n</strong> 统计字符的个数, 替换操作不会被执行</li><li><strong>g</strong> 所有满足匹配的字符</li><li><strong>&quot;\&gt;&quot;</strong> 是一个特殊的记号, 表示只匹配单词<strong>末尾</strong>。类似地, <strong>&quot;&lt;&quot;</strong> 只匹配单词的<strong>开头</strong>。</li></ul></blockquote><h2 id="字符串匹配"><a class="header-anchor" href="#字符串匹配">¶</a>字符串匹配</h2><p>统计&quot;network&quot;这个字符串出现的次数<br>vi进入ex模式, 键入如下的命令</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">:%s/network//gn</span><br></pre></td></tr></table></figure><p><img src="/images/2019-01-03-19-41-36.png" alt=""><br>由图可知, 共<strong>匹配到7次</strong>。<br>字符串匹配, 只要有&quot;network&quot;这个字符串出现, 则就算一次匹配了。</p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Tue Jan 15 2019 15:11:55 GMT+0800 (中国标准时间) --&gt;&lt;h1&gt;Vi/Vim统计字符出现次数&lt;/h1&gt;&lt;p&gt;将被统计的文本内容如下&lt;/p&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt; network. 1network net work Networked NETWORK&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; network 1network net work Networked NETWORK&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;networked&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;network network,hello worldk&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="Linux" scheme="https://vonsdite.cn/categories/Linux/"/>
    
      <category term="Vim" scheme="https://vonsdite.cn/categories/Linux/Vim/"/>
    
    
      <category term="Linux" scheme="https://vonsdite.cn/tags/Linux/"/>
    
      <category term="Vim" scheme="https://vonsdite.cn/tags/Vim/"/>
    
  </entry>
  
  <entry>
    <title>makefile 介绍与编写(四) 伪目标</title>
    <link href="https://vonsdite.cn/posts/a08b2a98.html"/>
    <id>https://vonsdite.cn/posts/a08b2a98.html</id>
    <published>2019-01-02T14:00:20.000Z</published>
    <updated>2019-01-02T14:31:05.550Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Tue Jan 15 2019 15:11:55 GMT+0800 (中国标准时间) --><h1>前言</h1><p><strong>摘录于 《跟我一起写makefile》</strong></p><p>本文主要开始介绍<strong>makefile</strong>的伪目标。</p><a id="more"></a><h1>伪目标</h1><p>最早先的一个例子中, 我们提到过一个&quot;clean&quot;的目标, 这是一个&quot;伪目标&quot;,</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">clean:</span></span><br><span class="line">    rm *.o temp</span><br></pre></td></tr></table></figure><p>正像我们前面例子中的&quot;clean&quot;一样, 即然我们生成了许多文件编译文件, 我们也应该提供一个清除它们的&quot;目标&quot;以备完整地重编译而用。 (以&quot;make clean&quot;来使用该目标)<br>因为, 我们并不生成&quot;clean&quot;这个文件。&quot;伪目标&quot;并不是一个文件, 只是一个标签。由于&quot;伪目标&quot;不是文件, 所以 make 无法生成它的依赖关系和决定它是否要执行。我们只有通过显示地指明这个&quot;目标&quot;才能让其生效。当然, &quot;伪目标&quot;的取名不能和文件名重名, 不然其就失去了&quot;伪目标&quot;的意义了。</p><p>当然, 为了避免和文件重名的这种情况, 我们可以使用一个特殊的标记<code>&quot;.PHONY&quot;</code>来显示地指明一个目标是&quot;伪目标&quot;, 向 make 说明, 不管是否有这个文件, 这个目标就是&quot;伪目标&quot;。</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.PHONY : clean</span><br></pre></td></tr></table></figure><p><strong>只要有这个声明</strong>, 不管是否有&quot;clean&quot;文件, 要运行&quot;clean&quot;这个目标, <strong>只有&quot;make clean&quot;这样</strong>。于是整个过程可以这样写:</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"><span class="meta-keyword">.PHONY</span>: clean</span></span><br><span class="line"><span class="section">clean:</span></span><br><span class="line">rm *.o temp</span><br></pre></td></tr></table></figure><p>伪目标一般没有依赖的文件, 但是, 我们也可以<strong>为伪目标指定所依赖的文件</strong>。<br>伪目标同样可以作为&quot;默认目标&quot;, 只要将其放在第一个。</p><h2 id="作为默认目标示例"><a class="header-anchor" href="#作为默认目标示例">¶</a>作为默认目标示例</h2><p>一个示例就是, 如果你的 Makefile 需要一口气生成若干个可执行文件, 但你只想简单地敲一个 make 完事, 并且, 所有的目标文件<br>都写在一个 Makefile 中, 那么你可以使用&quot;伪目标&quot;这个特性:</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">all : prog1 prog2 prog3</span><br><span class="line">.PHONY : all</span><br><span class="line">prog1 : prog1.o utils.o</span><br><span class="line">cc -o prog1 prog1.o utils.o</span><br><span class="line">prog2 : prog2.o</span><br><span class="line">cc -o prog2 prog2.o</span><br><span class="line">prog3 : prog3.o sort.o utils.o</span><br><span class="line">cc -o prog3 prog3.o sort.o utils.o</span><br></pre></td></tr></table></figure><p>我们知道, Makefile 中的第一个目标会被作为其<strong>默认目标</strong>。我们声明了一个<code>&quot;all&quot;</code>的伪目标, 其依赖于其它三个目标。<br>由于伪目标的特性是, <strong>总是被执行的</strong>, 所以, 其它三个目标的规则总是会被运行, 也就达到了我们一口气生成多个目标的目的。</p><p>&quot;.PHONY : all&quot;声明了&quot;all&quot;这个目标为&quot;伪目标&quot;。</p><h2 id="作为依赖-示例"><a class="header-anchor" href="#作为依赖-示例">¶</a>作为依赖 示例</h2><p>从上面的例子我们可以看出, 目标也可以成为依赖。所以, 伪目标同样也可成为依赖。看下面的例子:</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"><span class="meta-keyword">.PHONY</span>: cleanall cleanobj cleandiff</span></span><br><span class="line">cleanall : cleanobj cleandiff</span><br><span class="line">rm program</span><br><span class="line">cleanobj :</span><br><span class="line">rm *.o</span><br><span class="line">cleandiff :</span><br><span class="line">rm *.diff</span><br></pre></td></tr></table></figure><p>&quot;cleanobj&quot;和&quot;cleandiff&quot;这两个**伪目标有点像&quot;子程序&quot;**的意思。</p><p>我们可以输入<code>&quot;make cleanall&quot;</code>、<code>&quot;make cleanobj&quot;</code>、<code>&quot;make cleandiff&quot;</code>命令来达到清除不同种类文件的目的。</p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Tue Jan 15 2019 15:11:55 GMT+0800 (中国标准时间) --&gt;&lt;h1&gt;前言&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;摘录于 《跟我一起写makefile》&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;本文主要开始介绍&lt;strong&gt;makefile&lt;/strong&gt;的伪目标。&lt;/p&gt;
    
    </summary>
    
      <category term="C/C++" scheme="https://vonsdite.cn/categories/C-C/"/>
    
      <category term="Makefile" scheme="https://vonsdite.cn/categories/C-C/Makefile/"/>
    
    
      <category term="C/C++" scheme="https://vonsdite.cn/tags/C-C/"/>
    
      <category term="Makefile" scheme="https://vonsdite.cn/tags/Makefile/"/>
    
  </entry>
  
  <entry>
    <title>makefile 介绍与编写(三) make 文件遍寻</title>
    <link href="https://vonsdite.cn/posts/1faeaacd.html"/>
    <id>https://vonsdite.cn/posts/1faeaacd.html</id>
    <published>2019-01-02T13:37:12.000Z</published>
    <updated>2019-01-02T13:55:21.925Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Tue Jan 15 2019 15:11:55 GMT+0800 (中国标准时间) --><h1>前言</h1><p><strong>摘录于 《跟我一起写makefile》</strong></p><p>本文主要开始介绍<strong>makefile</strong>的文件遍寻。</p><a id="more"></a><h1>文件遍寻</h1><p>在一些大的工程中, 有大量的源文件, 我们通常的做法是把这许多的源文件分类, 并存放在不同的目录中。所以, 当 make 需要去找寻文件的依赖关系时, 你可以在文件前加上路径, 但最好的方法是把一个路径告诉 make, 让 make 在自动去找。</p><h2 id="vpath"><a class="header-anchor" href="#vpath">¶</a>VPATH</h2><p>Makefile 文件中的特殊变量&quot;VPATH&quot;可以指定源文件的目录所在。<br>如果没有指明这个变量, make 只会在<strong>当前的目录中去找寻依赖文件和目标文件</strong>。<br>如果定义了这个变量, 那么, make就会在当 当前目录找不到的情况下, 到所<strong>指定的目录中</strong>去找寻文件了。</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">VPATH = src:../headers</span><br></pre></td></tr></table></figure><p>上面的的定义指定两个目录, &quot;src&quot;和&quot;…/headers&quot;,<br>make 会按照这个顺序进行搜索。目录由&quot;冒号&quot;分隔。(当然, 当前目录永远是最高优先搜索的地方)</p><h2 id="vpath-v2"><a class="header-anchor" href="#vpath-v2">¶</a>vpath</h2><p>另一个设置文件搜索路径的方法是使用 make 的&quot;vpath&quot;<strong>关键字</strong>(注意, 它是<strong>全小写</strong>的), 这<strong>不是变量</strong>, 这是一个 make 的关键字, 这和上面提到的那个 VPATH 变量很类似, 但是它更为灵活。</p><p>它可以指定<strong>不同的文件在不同的搜索目录</strong>中。</p><h3 id="使用方法"><a class="header-anchor" href="#使用方法">¶</a>使用方法</h3><p>使用方法有三种:</p><ol><li><p><code>vpath &lt;pattern&gt; &lt;directories&gt;</code><br>为符合模式<pattern>的文件指定搜索目录<directories></directories></pattern></p></li><li><p><code>vpath &lt;pattern&gt;</code><br><strong>清除</strong>符合模式<pattern>的文件的搜索目录。</pattern></p></li><li><p><code>vpath</code><br><strong>清除所有</strong>已被设置好了的文件搜索目录。</p></li></ol><p>vapth 使用方法中的<pattern>需要包含<code>&quot;%&quot;</code>字符。<code>&quot;%&quot;</code>的意思是<strong>匹配零或若干字符</strong>。</pattern></p><p>例如, &quot;%.h&quot;表示所有以&quot;.h&quot;结尾的文件。</p><p><pattern>指定了要搜索的文件集, 而<directories>则指定了<pattern>的文件集的搜索的目录。</pattern></directories></pattern></p><p>例如:</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">vpath</span> %.h ../headers</span><br></pre></td></tr></table></figure><p>该语句表示, 要求 make 在&quot;…/headers&quot;目录下搜索所有以&quot;.h&quot;结尾的文件。(如果某文件在当前目录没有找到的话)</p><p>我们可以连续地使用 vpath 语句, 以指定不同搜索策略。<br>如果连续的 vpath 语句中出现了相同的<pattern>, 或是被重复了的<pattern>, 那么, make 会按照 vpath 语句的<strong>先后顺序</strong>来执行搜索。如:</pattern></pattern></p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">vpath</span> %.c foo</span><br><span class="line"><span class="keyword">vpath</span> % blish</span><br><span class="line"><span class="keyword">vpath</span> %.c bar</span><br></pre></td></tr></table></figure><p>其表示&quot;.c&quot;结尾的文件, 先在&quot;foo&quot;目录, 然后是&quot;blish&quot;, 最后是&quot;bar&quot;目录。</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">vpath</span> %.c foo:bar</span><br><span class="line"><span class="keyword">vpath</span> % blish</span><br></pre></td></tr></table></figure><p>而上面的语句则表示&quot;.c&quot;结尾的文件, 先在&quot;foo&quot;目录, 然后是&quot;bar&quot;目录, 最后才是&quot;blish&quot;目录</p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Tue Jan 15 2019 15:11:55 GMT+0800 (中国标准时间) --&gt;&lt;h1&gt;前言&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;摘录于 《跟我一起写makefile》&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;本文主要开始介绍&lt;strong&gt;makefile&lt;/strong&gt;的文件遍寻。&lt;/p&gt;
    
    </summary>
    
      <category term="C/C++" scheme="https://vonsdite.cn/categories/C-C/"/>
    
      <category term="Makefile" scheme="https://vonsdite.cn/categories/C-C/Makefile/"/>
    
    
      <category term="C/C++" scheme="https://vonsdite.cn/tags/C-C/"/>
    
      <category term="Makefile" scheme="https://vonsdite.cn/tags/Makefile/"/>
    
  </entry>
  
  <entry>
    <title>makefile 介绍与编写(二) 概述</title>
    <link href="https://vonsdite.cn/posts/41973083.html"/>
    <id>https://vonsdite.cn/posts/41973083.html</id>
    <published>2019-01-02T12:36:42.000Z</published>
    <updated>2019-01-12T15:55:34.067Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Tue Jan 15 2019 15:11:55 GMT+0800 (中国标准时间) --><h1>前言</h1><p><strong>摘录于 《跟我一起写makefile》</strong></p><p>本文主要开始介绍<strong>makefile</strong>的详细细节。</p><h1>Makefile组成部分</h1><h2 id="显式规则"><a class="header-anchor" href="#显式规则">¶</a>显式规则</h2><p>显式规则说明了, 如何生成一个或多的的目标文件。<br>这是由 Makefile 的书写者明显指出, 要生成的文件, 文件的依赖文件, 生成的命令</p><a id="more"></a><h2 id="隐晦规则"><a class="header-anchor" href="#隐晦规则">¶</a>隐晦规则</h2><p>由于 make 有自动推导的功能, 所以隐晦的规则可以让我们比较粗糙地简略地书写 Makefile, 这是由 make 所支持的。</p><h2 id="变量定义"><a class="header-anchor" href="#变量定义">¶</a>变量定义</h2><p>在 Makefile 中我们要定义一系列的变量, 变量一般都是字符串, 当 Makefile 被执行时, 其中的变量都会被扩展到相应的引用位置上</p><h2 id="文件指示"><a class="header-anchor" href="#文件指示">¶</a>文件指示</h2><p>其包括了三个部分,</p><ol><li>一个是在一个 Makefile 中引用另一个 Makefile, 就像 C 语言中的include 一样;</li><li>另一个是指根据某些情况指定 Makefile 中的有效部分, 就像 C 语言中的预编译#if 一样;</li><li>还有就是定义一个多行的命令</li></ol><h2 id="注释"><a class="header-anchor" href="#注释">¶</a>注释</h2><p>Makefile 中只有行注释, 和 UNIX 的 Shell 脚本一样, 其注释是用&quot;#&quot;字符。如果你要在你的 Makefile 中使用&quot;#&quot;字符, 可以用<strong>转义字符</strong><strong>\</strong>框起来</p><h1>makefile的文件名</h1><p>默认的情况下, make 命令会在当前目录下按顺序找寻文件名为&quot;GNUmakefile&quot;、&quot;makefile&quot;、&quot;Makefile&quot;的文件, 找到了解释这个文件。<br>在这三个文件名中, 最好使用&quot;Makefile&quot;这个文件名, 因为, 这个文件名第一个字符为大写, 这样有一种显目的感觉。<br>最好不要用&quot;GNUmakefile&quot;, 这个文件是 GNU 的 make 识别的。<br>有另外一些 make 只对全小写的&quot;makefile&quot;文件名敏感, 但是基本上来说, 大多数的 make 都支持&quot;makefile&quot;和&quot;Makefile&quot;这两种默认文件名。</p><p>当然, 你可以使用别的文件名来命名Makefile, 比如: &quot;Make.Linux&quot; , &quot;Make.Solaris&quot;, &quot;Make.AIX&quot;等, 如果要指定特定的 Makefile, 你可以使用 make 的<code>&quot;-f&quot;</code>或<code>&quot;--file&quot;</code>参数, 如: make -f Make.Linux 或 make --file Make.AIX。</p><h1>include其他makefile</h1><p>在 Makefile 使用 include 关键字可以把别的 Makefile 包含进来, 被包含的文件会<strong>原模原样的放在当前文件的包含位置</strong>。<br>include 的语法是:</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">include</span> &lt;filename&gt;</span><br></pre></td></tr></table></figure><p>filename 可以是当前操作系统 Shell 的文件模式(可以<strong>保含路径和通配符</strong>)</p><p>在include前面可以有一些空字符, 但是<strong>绝不能是[Tab]键开始</strong>。</p><p>include 和<filename>可以用一个或多个空格隔开。</filename></p><h2 id="举个例子"><a class="header-anchor" href="#举个例子">¶</a>举个例子</h2><p>举个例子, 你有这样几个 Makefile: <a href="http://a.mk" target="_blank" rel="noopener">a.mk</a>、<a href="http://b.mk" target="_blank" rel="noopener">b.mk</a>、<a href="http://c.mk" target="_blank" rel="noopener">c.mk</a>, 还有一个文件叫foo.make。<br>有一个变量$(bar), 其包含了 <a href="http://e.mk" target="_blank" rel="noopener">e.mk</a> 和 <a href="http://f.mk" target="_blank" rel="noopener">f.mk</a>, 那么, 下面的语句:</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">include</span> foo.make *.mk <span class="variable">$(bar)</span></span><br></pre></td></tr></table></figure><p>等价于:</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">include</span> foo.make a.mk b.mk c.mk e.mk f.mkmake</span><br></pre></td></tr></table></figure><p>命令开始时, 会找寻 include 所指出的其它 Makefile, 并把其内容安置在当前的位。</p><p>如果<strong>文件都没有指定绝对路径或是相对路径</strong>的话, make 会在<strong>当前目录下首先寻找</strong>, 如果当前目录下没有找到, 那么, make 还会在下面的几个目录下找:</p><ol><li>如果 make 执行时, 有<code>&quot;-I&quot;</code>或<code>&quot;--include-dir&quot;</code>参数, 那么 make 就会在这个参数所指定的目录下去寻找。</li><li>如果目录<prefix>/include(一般是/usr/local/include)存在的话, make 也会去找。</prefix></li></ol><p>如果有文件没有找到的话, make 会生成一条<strong>警告信息</strong>, 但不会马上出现致命错误。它会继续载入其它的文件, 一旦完成 makefile 的读取, make 会再重试这些没有找到, 或是不能读取的文件, 如果还是不行, make 才会出现一条致命信息。</p><p>如果你想让 make不理那些无法读取的文件, 而继续执行, 你可以在 include 前加一个减号<code>&quot;-&quot;</code>。<br>如</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">-include</span> &lt;filename&gt;</span><br></pre></td></tr></table></figure><p>其表示, 无论 include 过程中出现什么错误, <strong>都不要报错继续执行</strong>。</p><p>和其它版本 make 兼容的相关命令是 <code>sinclude</code>, 其作用和 include是一样的。</p><h1>不推荐使用的MAKEFILES环境变量</h1><p>如果你的当前环境中定义了环境变量 MAKEFILES, 那么, make 会把这个变量中的值做一个类似于 include 的动作。这个变量中的值是其它的 Makefile, 用空格分隔。只是, 它和 include不同的是, 从这个环境变中<strong>引入的 Makefile 的&quot;目标&quot;不会起作用</strong>, 如果环境变量中定义的文件发现错误, make 也会不理。</p><p>但是在这里还是建议<strong>不要使用这个环境变量</strong>, 因为只要这个变量一被定义, 那么当你使用 make 时, 所有的 Makefile 都会受到它的影响, 这绝不是你想看到的。</p><p>在这里提这个事, 只是为了告诉大家, 也许有时候你的 Makefile 出现了怪事, 那么你可以看看当前环境中有没有定义这个变量</p><h1><img src="/images/recommend.png" alt="">(推荐)make的工作方式</h1><p>GNU 的 make 工作时的执行步骤入下:</p><ol><li>读入所有的 Makefile。</li><li>读入被 include 的其它 Makefile。</li><li>初始化文件中的变量。</li><li>推导隐晦规则, 并分析所有规则。</li><li>为所有的目标文件创建依赖关系链。</li><li>根据依赖关系, 决定哪些目标要重新生成。</li><li>执行生成命令。</li></ol><p>1-5 步为第一个阶段, 6-7 为第二个阶段。</p><p>第一个阶段中, 如果定义的变量被使用了, 那么, make 会把其展开在使用的位置。<br>但 make 并不会完全马上展开, make 使用的是拖延战术, 如果变量出现在依赖关系的规则中, 那么仅当这条依赖被决定要使用了, 变量才会在其内部展开。</p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Tue Jan 15 2019 15:11:55 GMT+0800 (中国标准时间) --&gt;&lt;h1&gt;前言&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;摘录于 《跟我一起写makefile》&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;本文主要开始介绍&lt;strong&gt;makefile&lt;/strong&gt;的详细细节。&lt;/p&gt;&lt;h1&gt;Makefile组成部分&lt;/h1&gt;&lt;h2 id=&quot;显式规则&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#显式规则&quot;&gt;¶&lt;/a&gt;显式规则&lt;/h2&gt;&lt;p&gt;显式规则说明了, 如何生成一个或多的的目标文件。&lt;br&gt;这是由 Makefile 的书写者明显指出, 要生成的文件, 文件的依赖文件, 生成的命令&lt;/p&gt;
    
    </summary>
    
      <category term="C/C++" scheme="https://vonsdite.cn/categories/C-C/"/>
    
      <category term="Makefile" scheme="https://vonsdite.cn/categories/C-C/Makefile/"/>
    
    
      <category term="C/C++" scheme="https://vonsdite.cn/tags/C-C/"/>
    
      <category term="Makefile" scheme="https://vonsdite.cn/tags/Makefile/"/>
    
  </entry>
  
  <entry>
    <title>makefile 介绍与编写(一) 介绍及使用</title>
    <link href="https://vonsdite.cn/posts/c6ce89df.html"/>
    <id>https://vonsdite.cn/posts/c6ce89df.html</id>
    <published>2019-01-02T11:04:42.000Z</published>
    <updated>2019-01-02T13:59:47.601Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Tue Jan 15 2019 15:11:55 GMT+0800 (中国标准时间) --><h1>前言</h1><p><strong>摘录于 《跟我一起写makefile》</strong></p><p>一个工程中的源文件一般不计其数, 其按类型、功能、模块分别放在若干个目录中, <strong>makefile</strong> 定义了一系列的规则来指定, <strong>哪些文件需要先编译, 哪些文件需要后编译</strong>, 哪些文件需要重新编译, 甚至于进行更复杂的功能操作。因为makefile 就像一个 Shell 脚本一样, 其中也可以执行操作系统的命令。 makefile 带来的好处就是——&quot;自动化编译&quot;, 一旦写好, 只需要一个 make 命令, <strong>整个工程完全自动编译</strong>, 极大的提高了软件开发的效率。</p><p><strong>make 是一个命令工具</strong>, 是一个解释 makefile 中指令的命令工具, 一般来说, 大多数的 IDE 都有这个命令, 比如：Delphi 的 make, Visual C++的 nmake, Linux 下 GNU 的 make。可见, makefile 都成为了一种在工程方面的编译方法</p><a id="more"></a><h1>关于程序的编译与链接</h1><p>一般来说, 无论是 C、C++、还是 pas, 首先要把源文件编译成<strong>中间代码文件</strong>, 在 Windows 下也就是 .obj 文件, UNIX 下是 .o 文件, 即 Object File, 这个动作叫做编译(compile)。然后再把大量的 Object File 合成执行文件, 这个动作叫作链接(link)。 编译时, 编译器需要的是语法的正确, 函数与变量的声明的正确。对于函数与变量的声明, 通常是你需要告诉编译器头文件的所在位置(头文件中应该只是声明, 而定义应该放在 C/C++文件中), 只要所有的语法正确, 编译器就可以编译出中间目标文件。一般来说, 每个源文件都应该对应于一个中间目标文件(O 文件或是 OBJ 文件)。链接时, 主要是<strong>链接函数和全局变量</strong>, 所以, 我们可以使用这些中间目标文件(O 文件或是 OBJ文件)来链接我们的应用程序。链接器并不管函数所在的源文件, 只管函数的中间目标文件(Object File), .在大多数时候, 由于源文件太多, 编译生成的中间目标文件太多, 而在链接时需要明显地指出中间目标文件名, 这对于编译很不方便, 所以, 我们要给中间目标文件打个包, 在 Windows 下这种包叫&quot;库文件&quot;(Library FileMakefile), 也就是 .lib 文件, 在 UNIX下, 是 Archive File, 也就是 .a 文件。</p><p><strong>总结一下</strong>, 源文件首先会生成中间目标文件, 再由中间目标文件生成执行文件。<br>在编译时, 编译器只检测程序语法, 和函数、变量是否被声明。如果函数未被声明, 编译器会给出一个警告, 但可以生成 Object File。而在链接程序时, 链接器会在所有的 Object File 中找寻函数的实现, 如果找不到, 那到就会报链接错误码(Linker Error), 在 VC 下, 这种错误一般是：Link 2001 错误, 意思说是说, 链接器未能找到函数的实现。你需要指定函数的Object File.</p><h1>makefile的规则</h1><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">target: prerequisites</span></span><br><span class="line">    command</span><br></pre></td></tr></table></figure><p><strong>或者</strong></p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">target: prerequisites: command</span></span><br></pre></td></tr></table></figure><p>command与target、prerequisites如果不在同一行, 一定要以**[Tab]**键开头</p><blockquote><ul><li>target是一个目标文件, 可以是 Object File, 可以是 可执行文件, 也可以是一个标签(即伪目标)。</li><li>prerequisites时候target目标文件所依赖的文件, 比如说一段代码<strong>a.c、a.h</strong>, 它生成的可执行程序为<strong>a.out</strong>, 那么target就为 a.out, 它所依赖的文件prerequisites为 a.c a.h。</li><li>command 即make所需要执行的命令(任意的shell命令)</li></ul></blockquote><p>这是一个文件的依赖关系, 也就是说, target 这一个或多个的目标文件依赖于 prerequisites 中的文件, 其生成规则定义在 command 中。说白一点就是说, prerequisites中如果有一个以上的文件比 target 文件要新的话(意思就是说只要依赖文件中有一个文件的最近修改时间比target的最近修改时间更加新), command 所定义的命令就会被执行。这就是 Makefile 的规则, 也是 Makefile 中最核心的内容。</p><h1>示例</h1><p>假设我们的工程有 8 个 C 文件, 和 3 个头文件, 我们要写一个 Makefile 来告诉 make 命令如何编译和链接这几个文件。<br>我们的规则是：</p><ol><li>如果这个工程没有编译过, 那么我们的所有 C 文件都要编译并被链接。</li><li>如果这个工程的某几个 C 文件被修改, 那么我们只编译被修改的 C 文件, 并链接目标程序。</li><li>如果这个工程的头文件被改变了, 那么我们需要编译引用了这几个头文件的 C 文件, 并链接目标程序</li></ol><p>现在我们简单地makefile版本如下:</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">edit : main.o kbd.o command.o display.o \</span><br><span class="line">insert.o search.o files.o utils.o</span><br><span class="line">    cc -o edit main.o kbd.o command.o display.o \</span><br><span class="line">    insert.o search.o files.o utils.o</span><br><span class="line"></span><br><span class="line">main.o : main.c defs.h</span><br><span class="line">        cc -c main.c</span><br><span class="line">kbd.o : kbd.c defs.h command.h</span><br><span class="line">        cc -c kbd.c</span><br><span class="line">command.o : command.c defs.h command.h</span><br><span class="line">        cc -c command.c</span><br><span class="line">display.o : display.c defs.h buffer.h</span><br><span class="line">        cc -c display.c</span><br><span class="line">insert.o : insert.c defs.h buffer.h</span><br><span class="line">        cc -c insert.c</span><br><span class="line">search.o : search.c defs.h buffer.h</span><br><span class="line">        cc -c search.c</span><br><span class="line">files.o : files.c defs.h buffer.h command.h</span><br><span class="line">        cc -c files.c</span><br><span class="line">utils.o : utils.c defs.h</span><br><span class="line">        cc -c utils.c</span><br><span class="line">clean :</span><br><span class="line">        rm edit main.o kbd.o command.o display.o \</span><br><span class="line">           insert.o search.o files.o utils.o</span><br></pre></td></tr></table></figure><p><strong>反斜杠(\)是换行符的意思</strong>。这样比较便于 Makefile 的<strong>易读</strong>。</p><p>我们可以把这个内容保存在文件为&quot;Makefile&quot;或&quot;makefile&quot;的文件中,<br>然后在该目录下直接输入命令&quot;make&quot;就可以生成执行文件 edit。<br>如果要删除执行文件和所有的中间目标文件, 那么, 只要简单地执行一下&quot;make clean&quot;就可以了</p><p>在这个 makefile 中, 目标文件(target)包含：执行文件 edit 和中间目标文件(*.o); 依赖文件(prerequisites)就是冒号后面的那些 .c 文件和 .h 文件。每一个 .o 文件都有一组依赖文件, 而这些 .o 文件又是执行文件 edit 的依赖文件。</p><p>依赖关系的实质上就是说明了目标文件是由哪些文件生成的, 换言之, 目标文件是哪些文件更新的。在定义好依赖关系后, 后续的那一行定义了如何生成目标文件的操作系统命令, 一定要以一个 Tab 键作为开头。记住, make 并不管命令是怎么工作的, 它只管执行所定义的命令。make 会比较 targets 文件和 prerequisites 文件的修改日期, 如果 prerequisites 文件的日期要比 targets 文件的日期要新, 或者 target 不存在的话, 那么, make 就会执行后续定义的命令。</p><p>这里要说明一点的是, clean 不是一个文件, 它只不过是一个动作名字, 有点像 C 语言中的 lable 一样, 其冒号后什么也没有, 那么, make 就不会自动去找文件的依赖性, 也就不会自动执行其后所定义的命令。要执行其后的命令, 就要在 make 命令后明显得指出这个lable 的名字。这样的方法非常有用, 我<strong>们可以在一个 makefile 中定义不用的编译或是和编译无关的命令, 比如程序的打包, 程序的备份</strong>, 等等</p><h1><img src="/images/recommend.png" alt="">(推荐)make命令工作原理</h1><p>在默认的方式下, 也就是我们只输入 make 命令。那么,</p><ol><li>make 会在当前目录下找名字叫&quot;Makefile&quot;或&quot;makefile&quot;的文件。</li><li>如果找到, 它会找文件中的<strong>第一个目标文件(target)</strong>, 在上面的例子中, 他会找到&quot;edit&quot;这个文件, 并把这个文件<strong>作为最终的目标文件</strong>。</li><li>如果 <strong>edit 文件不存在,</strong> 或是 edit 所依赖的后面的 .o 文件的文件修改时间要比 edit这个文件<strong>新</strong>, 那么, 他就会执行后面所定义的命令<strong>来生成 edit 这个文件</strong>。</li><li>如果 edit <strong>所依赖的.o 文件不存在</strong>, 那么 make 会在当前文件中找目标为.o 文件的依赖性, 如果找到则再<strong>根据那一个规则生成.o 文件</strong>。</li><li>只要**.c文件和 .h文件是存在的**, make 就会生成 .o 文件, 然后再用 .o 文件生成 make 的终极任务, 也就是执行文件 edit 了。</li></ol><p>以上就是make的依赖性, make会<strong>一层一层</strong>去找依赖关系, 直到最终编译出第一个目标文件。<br>在找寻的过程中, 如果<strong>出现错误</strong>, 比如最后被依赖的文件找不到, 那么<strong>make就会直接退出</strong>, <strong>并报错</strong>, 而对于所定义的命令的错误, 或是编译不成功, make 根本不理, make 只管文件的依赖性, 即, 如果在我找了依赖关系之后, 冒号后面的文件还是不在, 那么对不起, 我就不工作啦。</p><p>通过上述分析, 我们知道, 像 clean 这种伪目标, 没有被第一个目标文件直接或间接关联, 那么它后面所定义的命令将不会被自动执行, 不过, 我们可以显示要 make 执行。即命令——&quot;make clean&quot;, 以此来清除所有的目标文件, 以便重编译。</p><h2 id="举个例子"><a class="header-anchor" href="#举个例子">¶</a>举个例子</h2><p>于是在我们编程中, 如果这个工程<strong>已被编译过</strong>了,</p><ol><li><p>当我们<strong>修改了其中一个源文件</strong>, 比如file.c, 那么根据我们的依赖性, 我们的目标 file.o 会被重编译(也就是在这个依性关系后面所定义的命令), 于是 file.o 的文件也是最新的啦, 于是 file.o 的文件修改时间要比edit要新, 所以 edit 也会被重新链接了。</p></li><li><p>如果我们<strong>改变了&quot;command.h&quot;</strong>, 那么, kdb.o、command.o 和 files.o 都会被重编译, 并且, edit 会被重链接。</p></li></ol><h1><img src="/images/recommend.png" alt="">(推荐)makefile使用变量</h1><p>我们来看看 edit的生成规则</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">edit : main.o kbd.o command.o display.o \</span><br><span class="line">insert.o search.o files.o utils.o</span><br><span class="line">    cc -o edit main.o kbd.o command.o display.o \</span><br><span class="line">    insert.o search.o files.o utils.o</span><br></pre></td></tr></table></figure><p>可以看到<code>.o</code>文件的字符串被重复写了两次, 当我们后续修改<strong>依赖文件</strong>的时候, 就要修改2次(加上clean, 就3次了); 虽说只要修改2次, 但多个地方要修改时, 就十分不方便, 不够灵活, 容易出错。</p><p>所以, 为了 makefile 的易维护, 在 makefile 中我们可以使用变量。</p><p>比如, 我们声明一个变量, 叫 objects, OBJECTS, objs, OBJS, obj, 或是 OBJ, 只要能够表示 obj 文件就行了。<br>我们在 makefile 一开始就这样定义:</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">objects = main.o kbd.o command.o display.o \</span><br><span class="line">            insert.o search.o files.o utils.o</span><br></pre></td></tr></table></figure><p>于是, 我们就可以很方便地在我们的 makefile 中以&quot;$(objects)&quot;的方式来使用这个变量了, 于是我们的改良版 makefile 就变成下面这个样子:</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">objects = main.o kbd.o command.o display.o \</span><br><span class="line">            insert.o search.o files.o utils.o</span><br><span class="line"></span><br><span class="line">edit : <span class="variable">$(objects)</span></span><br><span class="line">    cc -o edit <span class="variable">$(objects)</span></span><br><span class="line">main.o : main.c defs.h</span><br><span class="line">    cc -c main.c</span><br><span class="line">kbd.o : kbd.c defs.h command.h</span><br><span class="line">    cc -c kbd.c</span><br><span class="line">command.o : command.c defs.h command.h</span><br><span class="line">    cc -c command.c</span><br><span class="line">display.o : display.c defs.h buffer.h</span><br><span class="line">    cc -c display.c</span><br><span class="line">insert.o : insert.c defs.h buffer.h</span><br><span class="line">    cc -c insert.c</span><br><span class="line">search.o : search.c defs.h buffer.h</span><br><span class="line">    cc -c search.c</span><br><span class="line">files.o : files.c defs.h buffer.h command.h</span><br><span class="line">    cc -c files.c</span><br><span class="line">utils.o : utils.c defs.h</span><br><span class="line">    cc -c utils.c</span><br><span class="line">clean :</span><br><span class="line">    rm edit <span class="variable">$(objects)</span></span><br></pre></td></tr></table></figure><p>之后只要有新的<code>.o</code>文件, 或者修改、删除某个<code>.o</code>文件, 就只需要修改<code>objects</code>这个变量就行了。</p><h1><img src="/images/recommend.png" alt="">(推荐)make 自动推导</h1><p>对于<code>.o</code>文件, make可以把它对应的.c文件放到依赖文件prerequisites中, 并自动推导出<code>cc -c example.c</code>这条命令。<br>于是, 更简单的makefile版本如下:</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">objects = main.o kbd.o command.o display.o \</span><br><span class="line">            insert.o search.o files.o utils.o</span><br><span class="line"></span><br><span class="line">edit : <span class="variable">$(objects)</span></span><br><span class="line">    cc -o edit <span class="variable">$(objects)</span></span><br><span class="line">main.o : defs.h</span><br><span class="line">kbd.o : defs.h command.h</span><br><span class="line">command.o : defs.h command.h</span><br><span class="line">display.o : defs.h buffer.h</span><br><span class="line">insert.o : defs.h buffer.h</span><br><span class="line">search.o : defs.h buffer.h</span><br><span class="line">files.o : defs.h buffer.h command.h</span><br><span class="line">utils.o : defs.h</span><br><span class="line"></span><br><span class="line">.PHONY : clean</span><br><span class="line">clean :</span><br><span class="line">    rm edit <span class="variable">$(objects)</span></span><br></pre></td></tr></table></figure><p>这种方法, 也就是 make 的<strong>隐晦规则</strong>。<br>上面文件内容中, <strong>&quot;.PHONY&quot;表示, clean是个伪目标文件</strong>。</p><h1>关于命令出错</h1><p>每当命令运行完后, make会<strong>检测每个命令的返回码</strong>,</p><ul><li>如果命令返回成功, 那么make会执行下一条命令, 当前规则中所有的命令成功返回后, 这个规则就算是成功完成了</li><li>如果一个规则中的某个命令出错了(命令退出码非零), 那么make就会<strong>终止执行当前规则</strong>, 这将有可能<strong>终止所有规则</strong>的执行。</li></ul><p><strong>但是</strong><br>有些时候, 命令的出错并不表示就是错误的。<br>例如mkdir命令, 我们一定需要建立一个目录, 如果目录不存在, 那么mkdir就成功执行, 万事大吉;<br>如果目录存在, 那么就出错了。<br>我们之所以使用mkdir的意思就是一定要有这样的一个目录, 于是我们就不希望mkdir出错而终止规则的运行。</p><h2 id="忽略命令的错误"><a class="header-anchor" href="#忽略命令的错误">¶</a>忽略命令的错误</h2><h3 id="局部方法"><a class="header-anchor" href="#局部方法">¶</a>局部方法</h3><p>为了做到这一点, 忽略命令的出错, 我们可以在Makefile的命令行前加一个<strong>减号&quot;-&quot;(在Tab键之后)</strong>, 标记为不管命令出不出错都认为是成功的。如：</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">clean:</span></span><br><span class="line">    -rm -f *.o</span><br></pre></td></tr></table></figure><h3 id="全局方法"><a class="header-anchor" href="#全局方法">¶</a>全局方法</h3><p>一个全局的办法是, 给<code>make</code>加上**<code>-i</code>或是<code>--ignore-errors</code>参数**, 那么, Makefile中所有命令都会忽略错误。</p><p>而如果一个规则是以<code>&quot;.IGNORE&quot;</code><strong>作为目标</strong>的, 那么这个规则中的所有命令将会忽略错误。这些是不同级别的防止命令出错的方法, 你可以根据你的不同喜欢设置。</p><p>还有一个要提一下的make的参数的是<code>&quot;-k&quot;</code>或是<code>&quot;--keep-going&quot;</code>, 参数的意思是, 如果某规则中的命令出错了, 那么就终止该规则的执行, <strong>但继续执行其它规则</strong>。</p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Tue Jan 15 2019 15:11:55 GMT+0800 (中国标准时间) --&gt;&lt;h1&gt;前言&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;摘录于 《跟我一起写makefile》&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;一个工程中的源文件一般不计其数, 其按类型、功能、模块分别放在若干个目录中, &lt;strong&gt;makefile&lt;/strong&gt; 定义了一系列的规则来指定, &lt;strong&gt;哪些文件需要先编译, 哪些文件需要后编译&lt;/strong&gt;, 哪些文件需要重新编译, 甚至于进行更复杂的功能操作。因为makefile 就像一个 Shell 脚本一样, 其中也可以执行操作系统的命令。 makefile 带来的好处就是——&amp;quot;自动化编译&amp;quot;, 一旦写好, 只需要一个 make 命令, &lt;strong&gt;整个工程完全自动编译&lt;/strong&gt;, 极大的提高了软件开发的效率。&lt;/p&gt;&lt;p&gt;&lt;strong&gt;make 是一个命令工具&lt;/strong&gt;, 是一个解释 makefile 中指令的命令工具, 一般来说, 大多数的 IDE 都有这个命令, 比如：Delphi 的 make, Visual C++的 nmake, Linux 下 GNU 的 make。可见, makefile 都成为了一种在工程方面的编译方法&lt;/p&gt;
    
    </summary>
    
      <category term="C/C++" scheme="https://vonsdite.cn/categories/C-C/"/>
    
      <category term="Makefile" scheme="https://vonsdite.cn/categories/C-C/Makefile/"/>
    
    
      <category term="C/C++" scheme="https://vonsdite.cn/tags/C-C/"/>
    
      <category term="Makefile" scheme="https://vonsdite.cn/tags/Makefile/"/>
    
  </entry>
  
  <entry>
    <title>使用gdb调试C/C++程序</title>
    <link href="https://vonsdite.cn/posts/898073bb.html"/>
    <id>https://vonsdite.cn/posts/898073bb.html</id>
    <published>2018-12-31T14:10:00.000Z</published>
    <updated>2019-01-02T13:27:28.984Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Tue Jan 15 2019 15:11:55 GMT+0800 (中国标准时间) --><h1>前言</h1><p>调试, 是编写程序过程中确保程序正确性的重要环节, 现在使用的IDE大多都集成了调试器, 但linux最著名的调试器是命令行形式的<strong>C/C++调试器GDB</strong>。以下将介绍<strong>GDB</strong>的基本使用方法。<br><img src="/images/2018-12-31-22-21-52.png" alt=""></p><a id="more"></a><h1>安装GDB</h1><p>大多数的发行版Linux系统中都有GDB</p><h2 id="debian-或-ubuntu"><a class="header-anchor" href="#debian-或-ubuntu">¶</a>Debian 或 Ubuntu</h2><p><code>$ sudo apt-get install gdb</code></p><h2 id="arch-linux"><a class="header-anchor" href="#arch-linux">¶</a>Arch Linux</h2><p><code>$ sudo pacman -S gdb</code></p><h2 id="fedora-centos-或-rhel"><a class="header-anchor" href="#fedora-centos-或-rhel">¶</a>Fedora, CentOS 或 RHEL</h2><p><code>$ sudo yum install gdb</code></p><p>也可以从<a href="https://www.gnu.org/software/gdb/" target="_blank" rel="noopener">官网中下载</a>。</p><h1>示例代码</h1><p>学习任何一项技能, 动手试验才是关键。以下是本文演示GDB的代码, 多文件调试, 它可以很好的体现GDB的特性。将它拷贝下来并且进行实验——这是最好的方法。</p><details><summary>**a.c**</summary><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"b.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"c.h"</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc,<span class="keyword">char</span>**argv)</span></span>&#123;</span><br><span class="line"><span class="keyword">long</span> d,result=<span class="number">1</span>,i=<span class="number">0</span>,dresult,sum;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"please input your student number:\n"</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%ld"</span>,&amp;d);dresult=d%<span class="number">100</span>;</span><br><span class="line"><span class="keyword">while</span>(d&gt;<span class="number">0</span>) &#123; result+=(d%<span class="number">100</span>)&amp;<span class="number">1</span>; d=d/<span class="number">100</span>; &#125;</span><br><span class="line"><span class="keyword">while</span>(i++&lt;<span class="number">150</span>)&#123;</span><br><span class="line">sum=<span class="built_in">sqrt</span>(dresult);</span><br><span class="line">dresult=sum+<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">mytool1_print(<span class="string">":"</span>);</span><br><span class="line">mytool2_print(<span class="string">":"</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"your numbers are %ld,%ld\n"</span>,cresult,sum);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></details><details><summary>**b.h**</summary><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> _MYTOOL_1_H</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _MYTOOL_1_H</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">mytool1_print</span><span class="params">(<span class="keyword">char</span>*print_str)</span></span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br></pre></td></tr></table></figure></details><details><summary>**b.c**</summary><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"b.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"c.h"</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">mytool1_print</span><span class="params">(<span class="keyword">char</span>*print_str)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"1 %s\n"</span>,print_str);</span><br><span class="line">mytool2_print(<span class="string">"2"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></details><details><summary>**c.h**</summary><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> _MYTOOL_2_H</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _MYTOOL_2_H</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">mytool2_print</span><span class="params">(<span class="keyword">char</span>* print_str)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">long</span> <span class="title">sqrt</span><span class="params">(<span class="keyword">long</span> d)</span></span>;</span><br><span class="line"><span class="keyword">extern</span> <span class="keyword">long</span> cresult;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br></pre></td></tr></table></figure></details><details><summary>**c.c**</summary><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"c.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="keyword">long</span> cresult=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">long</span> d1result=<span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="keyword">long</span> <span class="title">sqrt</span><span class="params">(<span class="keyword">long</span> re)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(cresult==<span class="number">0</span>)cresult=re%<span class="number">100</span>/<span class="number">10</span>+(re%<span class="number">10</span>)*(re%<span class="number">10</span>);</span><br><span class="line"><span class="keyword">if</span>(d1result&gt;=<span class="number">140</span>)<span class="keyword">return</span> cresult*cresult+<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(++d1result&gt;=<span class="number">128</span>)<span class="keyword">return</span> cresult+<span class="number">10</span>;</span><br><span class="line"><span class="keyword">return</span> re*re*re%<span class="number">1000</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">mytool2_print</span><span class="params">(<span class="keyword">char</span>* print_str)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"2: %s\n"</span>,print_str);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></details><h1>GDB的使用</h1><h2 id="编译debug程序"><a class="header-anchor" href="#编译debug程序">¶</a>编译Debug程序</h2><p>首先最重要的, 你需要使用编译器的<code>&quot;-g&quot;</code>选项来编译程序, 这样可执行程序才能通过GDB来运行。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> gcc a.c b.c c.c -g -o mydebug</span></span><br></pre></td></tr></table></figure><h1>开始调试</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> gdb -tui [可执行程序名]</span></span><br></pre></td></tr></table></figure><p>使用<code>'-tui'</code>选项可以将代码显示在一个漂亮的交互式窗口内(所以被称为<strong>文本用户界面TUI</strong>), 在这个窗口内可以滚动鼠标滑轮, 同时在下面的<strong>GDB shell中输入命令</strong>。<br><img src="/images/2018-12-31-22-42-07.png" alt=""></p><h2 id="查看代码-list"><a class="header-anchor" href="#查看代码-list">¶</a>查看代码 list</h2><p>我们可以使用<code>list</code>命令来显示代码, 使用方法有</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">list [file:]start[,end]</span><br><span class="line">list [file:]function</span><br></pre></td></tr></table></figure><h3 id="1-查看c-c的第1行"><a class="header-anchor" href="#1-查看c-c的第1行">¶</a>1. 查看c.c的第1行</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">list c.c:1</span><br></pre></td></tr></table></figure><p><strong>or 简写</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">l c.c:1</span><br></pre></td></tr></table></figure><p><img src="/images/2019-01-01-10-12-32.png" alt=""></p><h3 id="2-查看b-c的3到8行"><a class="header-anchor" href="#2-查看b-c的3到8行">¶</a>2. 查看b.c的3到8行</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">list b.c:3,8</span><br></pre></td></tr></table></figure><p><strong>or 简写</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">l b.c:3,8</span><br></pre></td></tr></table></figure><p><img src="/images/2019-01-01-10-14-48.png" alt=""></p><h3 id="3-查看c-c的mytool2-print函数"><a class="header-anchor" href="#3-查看c-c的mytool2-print函数">¶</a>3. 查看c.c的mytool2_print函数</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">list c.c:mytool2_print</span><br></pre></td></tr></table></figure><p><strong>or 简写</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">l c.c:mytool2_print</span><br></pre></td></tr></table></figure><p><img src="/images/2019-01-01-10-16-32.png" alt=""></p><h2 id="运行程序-run"><a class="header-anchor" href="#运行程序-run">¶</a>运行程序 run</h2><p>gdb 输入run即可运行程序</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">run</span><br></pre></td></tr></table></figure><p><img src="/images/2019-01-01-10-51-42.png" alt=""></p><h2 id="设置断点-break"><a class="header-anchor" href="#设置断点-break">¶</a>设置断点 break</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">break</span>  [file:]行号        </span><br><span class="line"><span class="keyword">break</span>  [file:]行号  <span class="keyword">if</span>  条件  </span><br><span class="line"><span class="keyword">break</span>  [file:]函数        </span><br><span class="line"><span class="keyword">break</span>  *address</span><br></pre></td></tr></table></figure><h3 id="1-在a-c第10行设置断点"><a class="header-anchor" href="#1-在a-c第10行设置断点">¶</a>1. 在a.c第10行设置断点</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">list a.c:1</span><br><span class="line">break 10</span><br></pre></td></tr></table></figure><p><strong>or</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">break a.c:10</span><br></pre></td></tr></table></figure><p>从图可见, 文本用户界面TUI下, 设置<strong>断点会标志在文本的左侧</strong><br><img src="/images/2019-01-01-10-26-57.png" alt=""></p><h3 id="2-在a-c-main函数开始处设置断点"><a class="header-anchor" href="#2-在a-c-main函数开始处设置断点">¶</a>2. 在a.c main函数开始处设置断点</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">list a.c:1</span><br><span class="line">break main</span><br></pre></td></tr></table></figure><p><strong>or</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">break a.c:main</span><br></pre></td></tr></table></figure><p><img src="/images/2019-01-01-10-30-20.png" alt=""></p><h3 id="3-在a-c的第10行设置条件断点"><a class="header-anchor" href="#3-在a-c的第10行设置条件断点">¶</a>3. 在a.c的第10行设置条件断点</h3><p>条件断点的意思是, 当条件满足时, 断点会被执行; 条件不满足, 断点不会被执行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">break a.c:10 if i == 150</span><br></pre></td></tr></table></figure><p>设置了当i等于150时, 执行断点, 方便在调试循环的时候, 想调试第几次循环的结果<br><img src="/images/2019-01-01-10-35-18.png" alt=""></p><h2 id="设置观察点-watch"><a class="header-anchor" href="#设置观察点-watch">¶</a>设置观察点 watch</h2><p>设置一个'观察断点', 当这个被观察的变量发生变化时, 程序会被停止。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">watch 变量  (发生变化时暂停运行)            </span><br><span class="line">rwatch 变量 (被访问时暂停运行)       </span><br><span class="line">awatch 变量 (发生被访问或改变时暂停运行)</span><br></pre></td></tr></table></figure><h3 id="1-给a-c中的sum变量设置观察点"><a class="header-anchor" href="#1-给a-c中的sum变量设置观察点">¶</a>1. 给a.c中的sum变量设置观察点</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">list a.c:1</span><br><span class="line">break main</span><br><span class="line">run</span><br><span class="line">watch sum</span><br></pre></td></tr></table></figure><p>观察点要在程序运行的时候才能设置<br><img src="/images/2019-01-01-10-48-37.png" alt=""></p><h2 id="继续运行continue"><a class="header-anchor" href="#继续运行continue">¶</a>继续运行continue</h2><p>遇到断点时, 要继续向下运行到下一个断点或者运行到结束程序, 使用continue命令<br><img src="/images/2019-01-01-10-54-32.png" alt=""></p><h2 id="跳出循环until"><a class="header-anchor" href="#跳出循环until">¶</a>跳出循环until</h2><p>在执行完循环体内的最后一条语句之后执行 until, 就会执行完循环体到后面的一个语句停下。<br><strong>PS:</strong> 就是循环体要执行一遍, 回到循环判断条件, 再执行until命令就会跳出循环</p><h2 id="查看变量值-print"><a class="header-anchor" href="#查看变量值-print">¶</a>查看变量值 print</h2><p><strong>print</strong>用来查看变量的值</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">print 变量</span><br><span class="line">p 变量</span><br></pre></td></tr></table></figure><p><strong>ptype</strong>用来查看变量的类型</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ptype 变量</span><br></pre></td></tr></table></figure><h2 id="修改变量的值-set"><a class="header-anchor" href="#修改变量的值-set">¶</a>修改变量的值 set</h2><p>这样会覆盖变量的值。不过需要注意, 你不能创建一个新的变量或改变变量的类型。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">set var [变量] = [新的值]</span><br></pre></td></tr></table></figure><h2 id="单步调试"><a class="header-anchor" href="#单步调试">¶</a>单步调试</h2><p><strong>step</strong> 运行到下一条语句, 有可能进入到一个函数里面</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">step</span><br></pre></td></tr></table></figure><p><strong>next</strong> 直接运行下一条语句, 而不进入子函数内部</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">next</span><br></pre></td></tr></table></figure><h2 id="删除断点"><a class="header-anchor" href="#删除断点">¶</a>删除断点</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">delete 断点号</span><br><span class="line">clear 断点所在行</span><br></pre></td></tr></table></figure><h2 id="退出程序-quit"><a class="header-anchor" href="#退出程序-quit">¶</a>退出程序 quit</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">quit</span><br></pre></td></tr></table></figure><h2 id="查看gdb内部命令-help"><a class="header-anchor" href="#查看gdb内部命令-help">¶</a>查看gdb内部命令 help</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">help 命令名</span><br></pre></td></tr></table></figure><p><img src="/images/2019-01-01-11-29-13.png" alt=""><br><img src="/images/2019-01-01-11-29-27.png" alt=""></p><h2 id="complete-列出命令"><a class="header-anchor" href="#complete-列出命令">¶</a>complete 列出命令</h2><p>列出所有以字符串str开头的命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">complete str</span><br></pre></td></tr></table></figure><p><img src="/images/2019-01-01-11-30-53.png" alt=""></p><h2 id="其他命令"><a class="header-anchor" href="#其他命令">¶</a>其他命令</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line">info breakpoints        (显示断点信息)</span><br><span class="line">info watchpoints    (显示观察点信息)</span><br><span class="line"></span><br><span class="line">// 捕捉点</span><br><span class="line">catch event    (event发生时, 程序暂停运行)</span><br><span class="line">tcatch event            (设置只停一次的catchpoint, 第一次生效后, 该捕捉点被自动删除)</span><br><span class="line">event可以如下:</span><br><span class="line">    exec: exec被调用</span><br><span class="line">    fork: fork被调用</span><br><span class="line">    load: 加载动态库</span><br><span class="line">    load libname: 加载名为libname的动态库</span><br><span class="line">    unload: 卸载动态库</span><br><span class="line">    unload libname: 卸载名为libname的动态库</span><br><span class="line">    syscall [args]: 调用系统调用, args可以指定系统调用号, 或者系统名称</span><br><span class="line"></span><br><span class="line">// 关于断点的</span><br><span class="line">disable(dis &lt;-命令简写) n   使断点n暂时失效</span><br><span class="line">enable(en &lt;-命令简写)  n     恢复断点n功能</span><br><span class="line"></span><br><span class="line">// 函数调用</span><br><span class="line">call  func</span><br><span class="line">return  [expr] 函数后续语句不再执行直接返回, expr可设置返回值</span><br><span class="line">finish 函数后续语句执行完返回</span><br><span class="line"></span><br><span class="line">// 搜索当前文件, 模式搜索</span><br><span class="line">forward-search  regexp    (行首开始)   </span><br><span class="line">search  regexp          (当前行开始)</span><br><span class="line">reverse-search  regexp    (行尾开始)</span><br><span class="line"></span><br><span class="line">// 查看运行数据</span><br><span class="line">print命令   </span><br><span class="line">    print  [/fmt]  exp</span><br><span class="line">当被调试的程序停止时, 可以用print命令（简写为p）或同义命令inspect来查看当前程序中运行的数据。 </span><br><span class="line"></span><br><span class="line">gdb所支持的表达式中的运算符</span><br><span class="line">    用&amp;运算符取出变量在内存中的地址。print  &amp;array[i] </span><br><span class="line">    &#123; type &#125;adrexp 表示一个数据类型为type、存放地址为adrexp的数据。&#123;&#125;</span><br><span class="line">    @  它是一个与数组有关的双目运算符 print a[2]@3 </span><br><span class="line">    file::var  或者  function::var  表示文件file（或函数function）中变量var的值。</span><br><span class="line">    如&apos;f1.c&apos;::p</span><br><span class="line"></span><br><span class="line">whatis命令显示出变量的数据类型 </span><br><span class="line"></span><br><span class="line">x命令可以查看内存地址中数据的值。其使用格式是: </span><br><span class="line">    x  [/nfu]  address</span><br><span class="line"></span><br><span class="line">display命令可以预先设置一些要显示的表达式, 当程序停住时, 或是在你单步跟踪时, 变量会自动显示, 其一般格式为: </span><br><span class="line">    display  [/fmt]  exp </span><br><span class="line">取消对先前设置的某些表达式的自动显示功能, 可使用以下命令: </span><br><span class="line">    undisplay  [disnum]</span><br><span class="line">    delete display [disnum]</span><br><span class="line"></span><br><span class="line">// 堆栈跟踪</span><br><span class="line">backtrace (bt)</span><br><span class="line">    打印当前的函数调用栈的所有信息</span><br><span class="line"></span><br><span class="line">frame(f) n</span><br><span class="line">    切换当前堆栈, n是一个从0开始的整数, 是栈中的层编号。比如：frame 0, 表示栈顶, frame 1, 表示栈的第二层。</span><br><span class="line"></span><br><span class="line">info  frame(f)</span><br><span class="line">    显示出当前栈帧的所有信息, 如函数地址, 调用函数的地址, 被调用函数的地址, 目前函数的程序语言、函数参数地址及值、局部变量的地址等。</span><br></pre></td></tr></table></figure><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Tue Jan 15 2019 15:11:55 GMT+0800 (中国标准时间) --&gt;&lt;h1&gt;前言&lt;/h1&gt;&lt;p&gt;调试, 是编写程序过程中确保程序正确性的重要环节, 现在使用的IDE大多都集成了调试器, 但linux最著名的调试器是命令行形式的&lt;strong&gt;C/C++调试器GDB&lt;/strong&gt;。以下将介绍&lt;strong&gt;GDB&lt;/strong&gt;的基本使用方法。&lt;br&gt;&lt;img src=&quot;/images/2018-12-31-22-21-52.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="C/C++" scheme="https://vonsdite.cn/categories/C-C/"/>
    
      <category term="gdb" scheme="https://vonsdite.cn/categories/C-C/gdb/"/>
    
    
      <category term="C/C++" scheme="https://vonsdite.cn/tags/C-C/"/>
    
      <category term="gdb" scheme="https://vonsdite.cn/tags/gdb/"/>
    
  </entry>
  
  <entry>
    <title>Linux grep命令与正则表达式</title>
    <link href="https://vonsdite.cn/posts/790da0f0.html"/>
    <id>https://vonsdite.cn/posts/790da0f0.html</id>
    <published>2018-12-31T09:35:09.000Z</published>
    <updated>2018-12-31T14:18:06.516Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Tue Jan 15 2019 15:11:55 GMT+0800 (中国标准时间) --><h1>前言</h1><p><strong>grep</strong>是一种强大的<strong>文本搜索工具</strong>, 它能使用正则表达式搜索文本, 并把匹配的行打印出来。通常grep有三种版本grep、egrep(egrep等同于grep -E)和fgrep。egrep为扩展的grep, fgrep则为快速grep(<strong>固定的字符串</strong>来对文本进行搜索, 不支持正则表达式的引用但是查询极为快速)。grep是Linux文本处理三剑客之一。</p><a id="more"></a><h1>grep的使用</h1><p>使用方式:<br><code>grep [OPTIONS] PATTERN [FILE...]</code><br><strong>or</strong><br><code>grep [OPTIONS] [-e PATTERN | -f FILE] [FILE...]</code></p><p><strong>常用选项</strong>:</p><blockquote><ul><li>–color=auto: 对匹配到的文本着色后进行高亮显示;</li><li>-i: 忽略字符的大小写</li><li>-o: 仅显示匹配到的字符串</li><li>-v: 显示不能被模式匹配到的行</li><li>-E: 支持使用扩展的正则表达式</li><li>-q: 静默模式, 即不输出任何信息</li><li>-A #: 显示被模式匹配的行及其后#行</li><li>-B #: 显示被模式匹配的行及其前#行</li><li>-C #: 显示被模式匹配的行及其前后各#行</li></ul></blockquote><p>注: 使用grep匹配时<strong>需使用双引号引起来(单引号为强引用)</strong>, 防止被系统误认为参数或者特殊命令而报错。</p><h1>扩展grep使用方式</h1><p>使用方式:<br><code>egrep [OPTIONS] PATTERN [FILE...]</code><br><strong>or</strong><br><code>grep -E [OPTIONS] PATTERN [FILE...]</code></p><p><strong>常用选项</strong>:</p><blockquote><ul><li>-i: 忽略字符的大小写</li><li>-o: 仅显示匹配到的字符串本身</li><li>-v: 显示不被模式匹配到的行</li><li>-q: 静默模式, 即不输出任何信息</li><li>-A #: 显示被模式匹配的行及其后#行</li><li>-B #: 显示被模式匹配的行及其前#行</li><li>-C #: 显示被模式匹配的行及其前后各#行</li><li>-G: 支持基本正则表达式</li></ul></blockquote><h1>grep正则表达式元字符</h1><blockquote><ul><li>'^': 锚定行首</li><li>'$': 锚定行尾</li><li>'.': 匹配任一一个字符</li><li>'<em>': 匹配零个或多个</em><em>先前字符</em>*</li><li>'?': 匹配其前面的字符0次或者1次;</li><li>'+': 匹配其前面的字符1次或者多次;</li><li>'{m}': 匹配其前面的字符m次(\为转义字符)</li><li>'{m,n}': 匹配其前面的字符至少m次, 至多n次</li><li>'[]': 匹配一个指定范围内的字符 <strong>或者</strong> '[^]'匹配指定范围外的任意单个字符</li><li>'&lt;'或'\b': 锚定词首</li><li>'&gt;'或'\b': 锚定词尾(可用&lt;PATTERN&gt;: 匹配完整单词)</li><li>'()': 将多个字符当做一个整体进行处理</li></ul></blockquote><h2 id="关于后向引用"><a class="header-anchor" href="#关于后向引用">¶</a>关于后向引用</h2><p>后向引用: 引用前面的<strong>分组括号</strong>中的<strong>模式所匹配到的字符</strong><br>分组括号中的模式匹配到的内容或被正则表达式引擎自动记录于内部的变量中:</p><blockquote><ul><li>\1: 模式从左侧起, 第一个左括号及与之匹配的右括号之间模式匹配到的内容</li><li>\2: 模式从左侧起, 第二个左括号及与之匹配的右括号之间模式匹配到的内容</li></ul></blockquote><h1>扩展正则表达式与正则表达式略有不同</h1><h2 id="关于-的不同"><a class="header-anchor" href="#关于-的不同">¶</a>关于'[]'的不同</h2><p><code>'[]'</code>: 依旧匹配指定范围内的任意单个字符;<br>但是有很多特殊匹配方式:</p><blockquote><ul><li>[:digit:] 匹配任意单个数字</li><li>[:lower:] 匹配任意单个小写字母</li><li>[:upper:] 匹配任意单个大写字母</li><li>[:alpha:] 匹配任意单个字母</li><li>[:alnum:] 匹配任意单个字母或数字</li><li>[:punct:] 匹配任意单个符号</li><li>[:space:] 匹配单个空格</li></ul></blockquote><h2 id="扩展正则不需要转义字符的地方"><a class="header-anchor" href="#扩展正则不需要转义字符的地方">¶</a>扩展正则不需要转义字符的地方</h2><p>一些地方取消了转义字符的使用:</p><blockquote><ul><li>'?': 匹配其前面的字符0次或者1次;</li><li>'+d': 匹配其前面的字符1次或者多次;</li><li>'{m}': 匹配其前面的字符m次(\为转义字符)</li><li>'{m,n}': 匹配其前面的字符至少m次, 至多n次</li><li>(): 将一个或多个字符捆绑在一起, 当做一个整体进行处理, 反向引用照常使用。</li><li>'|': 或 (注: 'C|cat'为C与cat, '(C|c)at才是Cat与cat')</li></ul></blockquote><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Tue Jan 15 2019 15:11:55 GMT+0800 (中国标准时间) --&gt;&lt;h1&gt;前言&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;grep&lt;/strong&gt;是一种强大的&lt;strong&gt;文本搜索工具&lt;/strong&gt;, 它能使用正则表达式搜索文本, 并把匹配的行打印出来。通常grep有三种版本grep、egrep(egrep等同于grep -E)和fgrep。egrep为扩展的grep, fgrep则为快速grep(&lt;strong&gt;固定的字符串&lt;/strong&gt;来对文本进行搜索, 不支持正则表达式的引用但是查询极为快速)。grep是Linux文本处理三剑客之一。&lt;/p&gt;
    
    </summary>
    
      <category term="Linux" scheme="https://vonsdite.cn/categories/Linux/"/>
    
      <category term="Command" scheme="https://vonsdite.cn/categories/Linux/Command/"/>
    
    
      <category term="Linux" scheme="https://vonsdite.cn/tags/Linux/"/>
    
      <category term="Command" scheme="https://vonsdite.cn/tags/Command/"/>
    
      <category term="grep" scheme="https://vonsdite.cn/tags/grep/"/>
    
  </entry>
  
  <entry>
    <title>解决python wordcloud中文乱码, 中文词频问题</title>
    <link href="https://vonsdite.cn/posts/b82d5d51.html"/>
    <id>https://vonsdite.cn/posts/b82d5d51.html</id>
    <published>2018-12-31T03:48:12.000Z</published>
    <updated>2018-12-31T14:17:43.370Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Tue Jan 15 2019 15:11:55 GMT+0800 (中国标准时间) --><h1>前言</h1><p>python的<code>wordcloud</code>可以很方便的生成词云图, 然而美中不足的是, 该库对中文支持并不是那么友好, 存在以下两个问题</p><ol><li>中文字符会<strong>乱码</strong></li><li>中文<strong>分词有问题</strong></li></ol><p>以下介绍如何解决</p><a id="more"></a><h1>解决中文乱码</h1><p><code>wordcloud</code> 不支持显示中文, 可以通过如下修改来支持中文:</p><ol><li>进入<code>python</code>根目录, 然后进入<code>Lib\site-packages\wordcloud</code></li><li>进入<code>C:\Windows\Fonts</code>目录下, 拷贝一个中文字库, 如<strong>华文新魏</strong>, 将其复制粘贴到<code>Lib\site-packages\wordcloud</code>目录下<br><img src="/images/2018-12-31-10-29-48.png" alt=""><br><img src="/images/2018-12-31-10-49-51.png" alt=""></li><li>打开<code>Lib\site-packages\wordcloud</code>目录下<code>wordcloud.py</code>, 找到如下这行代码<br><img src="/images/2018-12-31-10-28-31.png" alt=""><br>将代码改为对应拷入进来的字库名字, 如<strong>华文新魏</strong>的字库名字为<strong>STXINWEI.TTF</strong><br><img src="/images/2018-12-31-10-32-07.png" alt=""></li><li>至此解决中文乱码问题</li></ol><h1>解决中文分词问题</h1><p><code>wordcloud</code>的<code>WordCloud</code>类中的<code>generate</code>方法是先对传进去的文字进行分词, 但是对<strong>中文的分词效果</strong>不太好, 建议先自己计算词频, 存放到字典中, 然后使用<code>generate_from_frequencies</code>来生成词云</p><figure class="highlight python"><figcaption><span>&#123;cmd</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> wordcloud <span class="keyword">import</span> WordCloud</span><br><span class="line"><span class="keyword">import</span> matplotlib <span class="keyword">as</span> mpl</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line">mpl.rcParams[<span class="string">'font.sans-serif'</span>] = [<span class="string">'SimHei'</span>]    <span class="comment"># 指定默认字体 SimHei为黑体</span></span><br><span class="line">mpl.rcParams[<span class="string">'axes.unicode_minus'</span>] = <span class="keyword">False</span>      <span class="comment"># 用来正常显示负号</span></span><br><span class="line"></span><br><span class="line">text = <span class="string">'清华大学清华大学北京大学北京大学暨南大学'</span></span><br><span class="line">textDic = &#123;</span><br><span class="line">    <span class="string">'清华大学'</span>: <span class="number">2</span>,</span><br><span class="line">    <span class="string">'北京大学'</span>: <span class="number">2</span>,</span><br><span class="line">    <span class="string">'暨南大学'</span>: <span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line">wc1 = WordCloud().generate(text)                        <span class="comment"># generate对中文分词效果不好</span></span><br><span class="line">wc2 = WordCloud().generate_from_frequencies(textDic)    <span class="comment"># 自己来计算词频, 改善效果</span></span><br><span class="line"></span><br><span class="line">plt.title(<span class="string">'generate生成的词云'</span>)</span><br><span class="line">plt.imshow(wc1, interpolation=<span class="string">"bilinear"</span>)</span><br><span class="line">plt.axis(<span class="string">"off"</span>)</span><br><span class="line"></span><br><span class="line">plt.figure()</span><br><span class="line">plt.title(<span class="string">'自己计算词频'</span>)</span><br><span class="line">plt.imshow(wc2, interpolation=<span class="string">"bilinear"</span>)</span><br><span class="line">plt.axis(<span class="string">"off"</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="/images/2018-12-31-10-48-00.png" alt=""></p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Tue Jan 15 2019 15:11:55 GMT+0800 (中国标准时间) --&gt;&lt;h1&gt;前言&lt;/h1&gt;&lt;p&gt;python的&lt;code&gt;wordcloud&lt;/code&gt;可以很方便的生成词云图, 然而美中不足的是, 该库对中文支持并不是那么友好, 存在以下两个问题&lt;/p&gt;&lt;ol&gt;&lt;li&gt;中文字符会&lt;strong&gt;乱码&lt;/strong&gt;&lt;/li&gt;&lt;li&gt;中文&lt;strong&gt;分词有问题&lt;/strong&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;以下介绍如何解决&lt;/p&gt;
    
    </summary>
    
      <category term="Python" scheme="https://vonsdite.cn/categories/Python/"/>
    
      <category term="Wordcloud" scheme="https://vonsdite.cn/categories/Python/Wordcloud/"/>
    
    
      <category term="Python" scheme="https://vonsdite.cn/tags/Python/"/>
    
      <category term="Wordcloud" scheme="https://vonsdite.cn/tags/Wordcloud/"/>
    
  </entry>
  
  <entry>
    <title>国内各高校专业评比数据分析, python 词云、爬虫、数据分析</title>
    <link href="https://vonsdite.cn/posts/92d0ece7.html"/>
    <id>https://vonsdite.cn/posts/92d0ece7.html</id>
    <published>2018-12-31T03:33:38.000Z</published>
    <updated>2018-12-31T14:17:47.257Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Tue Jan 15 2019 15:11:55 GMT+0800 (中国标准时间) --><p><img src="/images/2018-12-31-11-37-55.jpg" alt=""></p><p><a href="https://github.com/VonSdite/SchoolRank" target="_blank" rel="noopener"><strong>源代码 github: https://github.com/VonSdite/SchoolRank</strong></a></p><a id="more"></a><h1>数据来源</h1><ol><li><p>中国学位与研究生教育信息网 =&gt; <a href="http://www.cdgdc.edu.cn/xwyyjsjyxx/xkpgjg/" target="_blank" rel="noopener">http://www.cdgdc.edu.cn/xwyyjsjyxx/xkpgjg/</a></p></li><li><p>数据是全国<strong>第四轮</strong>学科评估结果，该数据于<strong>2017年12月28日</strong>发布</p></li></ol><h1>目的</h1><p>做这个脚本的缘由,</p><ol><li>因为身边总有同学要讨论哪个高校哪个高校<strong>比较优秀</strong>, 讲道理, 要看哪个高校优秀, 还是要具体到高校的<strong>具体专业</strong>, 口说无凭, 数据说话</li><li>可以方便大家知道某个高校的强势在哪里</li></ol><h1>脚本介绍</h1><h2 id="需要的第三方库"><a class="header-anchor" href="#需要的第三方库">¶</a>需要的第三方库</h2><blockquote><ul><li><strong>wordcloud</strong>: <code>pip install wordcloud</code></li><li><strong>pandas</strong>: <code>pip install pandas</code></li><li><strong>numpy</strong>: <code>pip install numpy</code></li><li><strong>matplotlib</strong>: <code>pip install matplotlib</code></li><li><strong>pillow</strong>: <code>pip install pillow</code></li><li><strong>requests</strong>: <code>pip install requests</code></li><li><strong>BeautifulSoup</strong>: <code>pip install beautifulsoup4</code></li></ul></blockquote><h2 id="show-py"><a class="header-anchor" href="#show-py">¶</a><code>show.py</code></h2><p><em>展示学校的评估结果</em></p><h3 id="使用"><a class="header-anchor" href="#使用">¶</a>使用</h3><ol><li>在该<strong>项目目录下</strong>打开终端</li><li>键入 <code>show.py [学校名]</code> 即可</li></ol><p>比如,<br><code>show.py 暨南大学</code><br><img src="/images/2018-12-31-11-19-46.png" alt=""></p><p>如果想比较<strong>多个学校</strong>之间的评估结果, 可以这样操作<br><code>show.py 西安交通大学 中山大学</code><br><img src="/images/2018-12-31-11-22-42.png" alt=""></p><h2 id="getsomedata-getschoolrank-py"><a class="header-anchor" href="#getsomedata-getschoolrank-py">¶</a><code>GetSomeData/GetSchoolRank.py</code></h2><p><em>用于获取高校评估的脚本</em></p><p>使用爬虫来获取 <strong>全国第四轮学科评估结果</strong>, 将数据保存为了 <code>schoolRank.xlsx</code>, 保存为<code>.xlsx</code>文件是为了方便使用<code>excel</code>进行操作(也可以自己保存为<code>.csv</code>文件来进行数据处理, 代码中已注释)</p><h3 id="schoolrank-xlsx数据展示"><a class="header-anchor" href="#schoolrank-xlsx数据展示">¶</a>schoolRank.xlsx数据展示</h3><p><img src="/images/2018-12-31-00-05-18.png" alt=""></p><p>可以通过<code>excel</code>来筛选查看数据(比自己造轮子来的方便多了)</p><p><strong>比如,</strong> 查看 <strong>暨南大学</strong>的评估结果<br><img src="/images/2018-12-31-00-07-46.png" alt=""></p><h2 id="getsomedata-assessmentanalysis-py"><a class="header-anchor" href="#getsomedata-assessmentanalysis-py">¶</a><code>GetSomeData/AssessmentAnalysis.py</code></h2><p><em>用于统计每个学校得到各个评估的次数</em></p><p>通过<code>pandas</code>简易处理下数据, 将数据保存为了 <code>schoolRank.xlsx</code>, 保存为<code>.xlsx</code>文件是为了方便使用<code>excel</code>进行操作(也可以自己保存为<code>.csv</code>文件来进行数据处理, 代码中已注释)</p><h3 id="schoolassementcount-xlsx数据展示"><a class="header-anchor" href="#schoolassementcount-xlsx数据展示">¶</a>schoolAssementCount.xlsx数据展示</h3><p><img src="/images/2018-12-31-10-52-25.png" alt=""></p><p>同样可以通过<code>excel</code>来筛选查看数据</p><h2 id="getsomedata-getwordcloud-py"><a class="header-anchor" href="#getsomedata-getwordcloud-py">¶</a><code>GetSomeData/GetWordCloud.py</code></h2><p><em>以<code>schoolRank.xlsx</code>中的学校名来作词云, 实际就是按学校参加评估的总次数来画词云</em></p><p>该项目生成的词云如下:<br><img src="/images/2018-12-31-11-37-55.jpg" alt=""></p><h4 id="注意"><a class="header-anchor" href="#注意">¶</a>注意</h4><p><strong>注意1</strong><br><code>wordcloud</code> 不支持显示中文, 可以通过如下修改来支持中文:</p><ol><li>进入<code>python</code>根目录, 然后进入<code>Lib\site-packages\wordcloud</code></li><li>进入<code>C:\Windows\Fonts</code>目录下, 拷贝一个中文字库, 如<strong>华文新魏</strong>, 将其复制粘贴到<code>Lib\site-packages\wordcloud</code>目录下<br><img src="/images/2018-12-31-10-29-48.png" alt=""><br><img src="/images/2018-12-31-10-49-51.png" alt=""></li><li>打开<code>Lib\site-packages\wordcloud</code>目录下<code>wordcloud.py</code>, 找到如下这行代码<br><img src="/images/2018-12-31-10-28-31.png" alt=""><br>将代码改为对应拷入进来的字库名字, 如<strong>华文新魏</strong>的字库名字为<strong>STXINWEI.TTF</strong><br><img src="/images/2018-12-31-10-32-07.png" alt=""></li><li>至此解决中文乱码问题</li></ol><p><strong>注意2</strong><br><code>wordcloud</code>的<code>WordCloud</code>类中的<code>generate</code>方法是先对传进去的文字进行分词, 但是对<strong>中文的分词效果</strong>不太好, 建议先自己计算词频, 存放到字典中, 然后使用<code>generate_from_frequencies</code>来生成词云</p><figure class="highlight python"><figcaption><span>&#123;cmd</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> wordcloud <span class="keyword">import</span> WordCloud</span><br><span class="line"><span class="keyword">import</span> matplotlib <span class="keyword">as</span> mpl</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line">mpl.rcParams[<span class="string">'font.sans-serif'</span>] = [<span class="string">'SimHei'</span>]    <span class="comment"># 指定默认字体 SimHei为黑体</span></span><br><span class="line">mpl.rcParams[<span class="string">'axes.unicode_minus'</span>] = <span class="keyword">False</span>      <span class="comment"># 用来正常显示负号</span></span><br><span class="line"></span><br><span class="line">text = <span class="string">'清华大学清华大学北京大学北京大学暨南大学'</span></span><br><span class="line">textDic = &#123;</span><br><span class="line">    <span class="string">'清华大学'</span>: <span class="number">2</span>,</span><br><span class="line">    <span class="string">'北京大学'</span>: <span class="number">2</span>,</span><br><span class="line">    <span class="string">'暨南大学'</span>: <span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line">wc1 = WordCloud().generate(text)                        <span class="comment"># generate对中文分词效果不好</span></span><br><span class="line">wc2 = WordCloud().generate_from_frequencies(textDic)    <span class="comment"># 自己来计算词频, 改善效果</span></span><br><span class="line"></span><br><span class="line">plt.title(<span class="string">'generate生成的词云'</span>)</span><br><span class="line">plt.imshow(wc1, interpolation=<span class="string">"bilinear"</span>)</span><br><span class="line">plt.axis(<span class="string">"off"</span>)</span><br><span class="line"></span><br><span class="line">plt.figure()</span><br><span class="line">plt.title(<span class="string">'自己计算词频'</span>)</span><br><span class="line">plt.imshow(wc2, interpolation=<span class="string">"bilinear"</span>)</span><br><span class="line">plt.axis(<span class="string">"off"</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="/images/2018-12-31-10-48-00.png" alt=""></p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Tue Jan 15 2019 15:11:55 GMT+0800 (中国标准时间) --&gt;&lt;p&gt;&lt;img src=&quot;/images/2018-12-31-11-37-55.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/VonSdite/SchoolRank&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;&lt;strong&gt;源代码 github: https://github.com/VonSdite/SchoolRank&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Python" scheme="https://vonsdite.cn/categories/Python/"/>
    
      <category term="数据分析" scheme="https://vonsdite.cn/categories/Python/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/"/>
    
    
      <category term="Python" scheme="https://vonsdite.cn/tags/Python/"/>
    
      <category term="数据分析" scheme="https://vonsdite.cn/tags/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/"/>
    
      <category term="Wordcloud" scheme="https://vonsdite.cn/tags/Wordcloud/"/>
    
  </entry>
  
  <entry>
    <title>给CSDN每篇文章开头加入新博客地址</title>
    <link href="https://vonsdite.cn/posts/50946eb.html"/>
    <id>https://vonsdite.cn/posts/50946eb.html</id>
    <published>2018-12-28T10:50:58.000Z</published>
    <updated>2018-12-31T14:16:31.555Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Tue Jan 15 2019 15:11:55 GMT+0800 (中国标准时间) --><h1>前言</h1><p>众所周知, <strong>CSDN</strong>有点越来越恶心, 广告也越来越多, 但是之前在<strong>CSDN</strong>发布的文章的作用不能这样就丢了呀。所以写了个脚本, 给<strong>CSDN</strong>中的每篇文章开头加入<strong>新博客网站的地址</strong>, 以此来引流。</p><p><strong>Github 仓库 =&gt; <a href="https://github.com/VonSdite/CSDN_AddSomethingToYourBlog" target="_blank" rel="noopener">https://github.com/VonSdite/CSDN_AddSomethingToYourBlog</a></strong></p><a id="more"></a><h1>环境</h1><h2 id="需要有chrome"><a class="header-anchor" href="#需要有chrome">¶</a>需要有Chrome</h2><blockquote><ul><li>有Chrome浏览器</li><li>下载Chrome对应的<a href="http://npm.taobao.org/mirrors/chromedriver/" target="_blank" rel="noopener">ChromeDriver(点击找到对应版本下载)</a>, 并配置到环境变量中</li></ul></blockquote><h2 id="python第三方库"><a class="header-anchor" href="#python第三方库">¶</a>Python第三方库</h2><h3 id="1-selenium"><a class="header-anchor" href="#1-selenium">¶</a>1. <code>selenium</code></h3><p>通过<code>pip install selenium</code> 安装</p><h3 id="2-configobj"><a class="header-anchor" href="#2-configobj">¶</a>2. <code>configobj</code></h3><p>通过<code>pip install configobj</code> 安装</p><h1>使用</h1><ol><li>只需要在config.ini文件中配置好</li></ol><blockquote><ul><li>你的CSDN账号</li><li>你的CSDN密码</li><li>将要在文章开头添加的</li></ul></blockquote><ol start="2"><li>然后 运行<code>AddSomethingToYourBlog.py</code>即可</li></ol><h1><a href="http://AddSomethingToYourBlog.py" target="_blank" rel="noopener">AddSomethingToYourBlog.py</a></h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">from</span> configobj <span class="keyword">import</span> ConfigObj</span><br><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"></span><br><span class="line">conf = ConfigObj(<span class="string">'config.ini'</span>, encoding=<span class="string">'utf-8'</span>)</span><br><span class="line">text = conf[<span class="string">'CSDN'</span>][<span class="string">'text'</span>]</span><br><span class="line">username = conf[<span class="string">'CSDN'</span>][<span class="string">'username'</span>]</span><br><span class="line">password = conf[<span class="string">'CSDN'</span>][<span class="string">'password'</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 用来判断加载完没有</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">Wait</span><span class="params">(driver, text)</span>:</span></span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">not</span> text <span class="keyword">in</span> driver.execute_script(<span class="string">"return document.documentElement.outerHTML"</span>):</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">AddSomethingToYourBlog</span><span class="params">(text, username, password)</span>:</span></span><br><span class="line">    driver = webdriver.Chrome()</span><br><span class="line">    driver.get(<span class="string">'https://mp.csdn.net/postlist/'</span>)</span><br><span class="line">    driver.find_element_by_css_selector(<span class="string">'#app &gt; div &gt; div &gt; div &gt; div.main-login &gt; div.main-select &gt; ul &gt; li:nth-child(1) &gt; a'</span>).click()</span><br><span class="line">    Wait(driver, <span class="string">'手机号/邮箱/用户名'</span>)</span><br><span class="line">    driver.find_element_by_css_selector(<span class="string">'#all'</span>).send_keys(username)</span><br><span class="line">    driver.find_element_by_css_selector(<span class="string">'#password-number'</span>).send_keys(password)</span><br><span class="line">    driver.find_element_by_css_selector(<span class="string">'#app &gt; div &gt; div &gt; div &gt; div.main-login &gt; div.main-process-login &gt; form &gt; div &gt; div:nth-child(6) &gt; div &gt; button'</span>).click()</span><br><span class="line">    Wait(driver, <span class="string">'开始创作'</span>)</span><br><span class="line">    driver.find_element_by_css_selector(<span class="string">'#btnStart'</span>).click()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">        div = driver.find_elements_by_css_selector(<span class="string">'.article-list-item'</span>)</span><br><span class="line">        <span class="keyword">for</span> nth <span class="keyword">in</span> range(len(div)):</span><br><span class="line">            div[nth].find_element_by_css_selector(<span class="string">'div.list-item-title &gt; p &gt; a'</span>).click()</span><br><span class="line">            driver.switch_to.window(driver.window_handles[<span class="number">-1</span>])</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> <span class="string">'富文本编辑器'</span> <span class="keyword">in</span> driver.execute_script(<span class="string">"return document.documentElement.outerHTML"</span>):</span><br><span class="line">                driver.switch_to.frame(<span class="number">0</span>)</span><br><span class="line">                driver.execute_script(<span class="string">"document.getElementsByClassName('htmledit_views cke_editable cke_editable_themed cke_contents_ltr cke_show_borders')[0].innerHTML='&lt;h3&gt;&lt;span style=\"color:#f33b45;\"&gt;&lt;strong&gt;%s&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt;' + document.getElementsByClassName('htmledit_views cke_editable cke_editable_themed cke_contents_ltr cke_show_borders')[0].innerHTML"</span> % text)</span><br><span class="line">                driver.switch_to.default_content()</span><br><span class="line">                driver.find_element_by_css_selector(<span class="string">'#radChl &gt; option:nth-child(13)'</span>).click()</span><br><span class="line">                driver.find_element_by_css_selector(<span class="string">'#btnPublish'</span>).click()</span><br><span class="line">                Wait(driver, <span class="string">'&lt;div class="alert-container finished-box" id="alertSuccess" style="display: block;"&gt;'</span>)</span><br><span class="line">                driver.close()</span><br><span class="line">                driver.switch_to.window(driver.window_handles[<span class="number">-1</span>])</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                pre = driver.find_element_by_css_selector(<span class="string">'body &gt; div.app.app--light &gt; div.layout &gt; div.layout__panel.flex.flex--row &gt; div.layout__panel.flex.flex--column &gt; div.layout__panel.flex.flex--row &gt; div.layout__panel.layout__panel--editor &gt; div.editor &gt; pre'</span>)</span><br><span class="line">                driver.execute_script(<span class="string">"var div=document.createElement('div');div.className='cledit-section';div.innerHTML='&lt;span class=\"token url\"&gt;# %s \\n&lt;/span&gt;&lt;span class=\"lf\"&gt;&lt;br&gt;&lt;span class=\"hd-lf\" style=\"display: none\"&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=\"lf\"&gt;&lt;br&gt;&lt;span class=\"hd-lf\" style=\"display: none\"&gt;&lt;/span&gt;&lt;/span&gt;';arguments[0].insertBefore(div, document.getElementsByClassName('cledit-section')[0]);"</span> % text, pre)</span><br><span class="line"></span><br><span class="line">                driver.find_element_by_css_selector(<span class="string">'body &gt; div.app.app--light &gt; div.layout &gt; div.layout__panel.layout__panel--articletitle-bar &gt; div &gt; div.article-bar__user-box.flex.flex--row &gt; button'</span>).click()</span><br><span class="line">                Wait(driver, <span class="string">'保存为草稿'</span>)</span><br><span class="line">                driver.find_element_by_css_selector(<span class="string">'body &gt; div.app.app--light &gt; div.modal &gt; div &gt; div &gt; div.modal__button-bar &gt; button.button.btn-c-blue'</span>).click()</span><br><span class="line">                Wait(driver, <span class="string">'&lt;div id="alertSuccess" class="finished-box" style=""&gt;'</span>)</span><br><span class="line">                driver.close()</span><br><span class="line">                driver.switch_to.window(driver.window_handles[<span class="number">-1</span>])</span><br><span class="line">        next_page = driver.find_element_by_css_selector(<span class="string">'#pills-tabContent &gt; div.pagination-wrapper &gt; nav &gt; ul &gt; li:last-child &gt; a'</span>)</span><br><span class="line">        <span class="keyword">if</span> next_page.text == <span class="string">''</span>:</span><br><span class="line">            next_page.click()</span><br><span class="line">            time.sleep(<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            print(<span class="string">'全部文章已添加完成'</span>)</span><br><span class="line">            input(<span class="string">'按任意键退出...'</span>)</span><br><span class="line">            driver.quit()</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    AddSomethingToYourBlog(text, username, password)</span><br></pre></td></tr></table></figure><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Tue Jan 15 2019 15:11:55 GMT+0800 (中国标准时间) --&gt;&lt;h1&gt;前言&lt;/h1&gt;&lt;p&gt;众所周知, &lt;strong&gt;CSDN&lt;/strong&gt;有点越来越恶心, 广告也越来越多, 但是之前在&lt;strong&gt;CSDN&lt;/strong&gt;发布的文章的作用不能这样就丢了呀。所以写了个脚本, 给&lt;strong&gt;CSDN&lt;/strong&gt;中的每篇文章开头加入&lt;strong&gt;新博客网站的地址&lt;/strong&gt;, 以此来引流。&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Github 仓库 =&amp;gt; &lt;a href=&quot;https://github.com/VonSdite/CSDN_AddSomethingToYourBlog&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://github.com/VonSdite/CSDN_AddSomethingToYourBlog&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Python" scheme="https://vonsdite.cn/categories/Python/"/>
    
      <category term="Selenium" scheme="https://vonsdite.cn/categories/Python/Selenium/"/>
    
    
      <category term="Python" scheme="https://vonsdite.cn/tags/Python/"/>
    
      <category term="Selenium" scheme="https://vonsdite.cn/tags/Selenium/"/>
    
  </entry>
  
  <entry>
    <title>(转) Copyleft和GFDL许可证</title>
    <link href="https://vonsdite.cn/posts/5ab63499.html"/>
    <id>https://vonsdite.cn/posts/5ab63499.html</id>
    <published>2018-12-27T12:21:49.000Z</published>
    <updated>2018-12-27T12:28:57.653Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Tue Jan 15 2019 15:11:55 GMT+0800 (中国标准时间) --><p>文章转自: 阮一峰 <a href="http://www.ruanyifeng.com/blog/2008/04/copyleft_and_gfdl.html" target="_blank" rel="noopener">Copyleft和GFDL许可证</a></p><h1>一、什么是copyleft</h1><p>要讲<strong>copyleft</strong>, 必须先讲<strong>copyright</strong>。&quot;版权&quot;这个词copyright, 按照字面解释, 就是&quot;复制的权利&quot;(copy+right)。这就是说, 只要是有版权的作品, 都是不等随便复制的。</p><a id="more"></a><p>程序员<code>Richard Stallman</code>对此很不满, 认为这阻碍了创新, 不利于人们分享成果。因此, 他在上个世纪70年代创建了自由软件基金会FSF, 致力于智力成果的自由分享。</p><p>如果你希望自己的作品自由传播, 最简单的方法就是声明放弃版权, 使作品进入公共领域(public domain)。但是, 这样做有一个缺点, 就是你无法防止某些人对你的作品进行加工, 然后把加工的作品变为他们的私有财产, 进行出售。所以, 只有一个人放弃版权是不够的, 必须保证后面的所有使用者都不会将其据为己有。</p><p>因为这个原因, <code>Richard Stallman</code>设计出了copyleft的做法。所谓copyleft, 就是为作品附上一个许可证, 这个许可证基本上允许你对作品做任何事, 除了不能限制他人的自由, 即如果你对原作品修改后再发布, 那么你也必须使用同样的许可证。所以, 只要一个作品被copyleft了, 那么此后基于它的所有作品都会被copyleft。</p><p>copyleft这个词, 是对copyright的戏谑, 故意与copyright对立, 比如我们经常看到copyrighted materials, 现在就有了copylefted materials。这个词好像很难找到合适的中文译名。copyright的标志是正写的圈c<img src="/images/bg2008042302.gif.png" alt="">, copyleft的标志是反写的圈c<img src="/images/bg2008042303.gif.png" alt="">。</p><p>不过, 有一点需要注意, 虽然copyleft与copyright对立, 但是它是符合版权制度的, <strong>copyleft的作品也是有版权的</strong>。</p><h1>二、GPL和GFDL许可证</h1><p>copyleft只是一个规范(paradigm), 只要符合这个规范, 就属于copyleft许可证。</p><p>Richard Stallman建立FSF以后, 主要提出了两个copyleft许可证: <code>GPL许可证</code>(GNU General Public License)和<code>GFDL许可证</code>(GNU Free Documentation License)。<strong>前者主要用于软件作品, 后者主要用于文字作品</strong>。</p><p>一旦一个文字作品采用了GFDL许可证, 那么他人就可以自由使用这个作品, 包括用于商业用途, 唯一的条件是所有衍生作品也必须采用GFDL许可证。</p><p>目前, 世界上最著名、最成功的使用GFDL的项目, 是维基百科wikipedia。这意味着, 如果你利用wikipedia的材料写成一本书, 那么你的这本书, 他人也可以自由使用。</p><h1>三、GFDL和CC的关系</h1><p>CC许可证中, 只有<strong>保留&quot;相同方式共享&quot;(share alike)权利的许可证</strong>, 才属于copyleft规范。也就是说, 只有&quot;署名-相同方式共享&quot;(cc-by-sa)<img src="/images/Creative%20Commons%20License.png" alt="">和&quot;署名-非商业用途-相同方式共享&quot;(cc-by-nc-sa)<img src="/images/2018-12-27-20-28-06.png" alt="">这两种许可证, 达到了这个标准。</p><p>当然, 这并不意味着其他cc许可证就不自由, 相反的, 单独的&quot;署名&quot;(cc-by)许可证<img src="/images/2018-12-27-20-28-19.png" alt="">提供的自由, 其实比前两种许可证都大, 因为它允许你将原作品变为私有财产。</p><p>一个有趣的问题是, GFDL和CC是不兼容的。虽然这两个许可证都允许自由使用作品, 但是你不能将它们混合在同一个作品里使用。</p><p>在基本精神上, GFDL其实等同于cc-by-sa(署名-相同方式共享)<img src="/images/Creative%20Commons%20License.png" alt="">, 但是两者都要求衍生作品必须使用与原作品相同的许可证, 这使得它们没有办法互换。唯一可以单向互换的是GFDL和cc-by(署名)许可证<img src="/images/2018-12-27-20-28-19.png" alt="">: 使用cc-by的文字, 可以加入使用GFDL的文章, 但是反过来就不行。</p><p>在现实中, Flickr采用的是CC许可证, 那么上面那些采用cc-by的照片, 是可以加入wikipedia的, 而那些采用cc-by-sa的照片勉强也可以加入, 因为wikipedia会对单张图片注明该照片采用cc-by-sa的许可证。但是, 使用cc-by-sa的文字就不能加入, 因为wikipedia对文字统一采用GFDL许可证。</p><p>2007年12月, 创作共用基金会决定修改cc-by-sa许可证, 允许将其并入GFDL。从此以后, wikipedia也就可以加入采用cc-by-sa的文字了。</p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Tue Jan 15 2019 15:11:55 GMT+0800 (中国标准时间) --&gt;&lt;p&gt;文章转自: 阮一峰 &lt;a href=&quot;http://www.ruanyifeng.com/blog/2008/04/copyleft_and_gfdl.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Copyleft和GFDL许可证&lt;/a&gt;&lt;/p&gt;&lt;h1&gt;一、什么是copyleft&lt;/h1&gt;&lt;p&gt;要讲&lt;strong&gt;copyleft&lt;/strong&gt;, 必须先讲&lt;strong&gt;copyright&lt;/strong&gt;。&amp;quot;版权&amp;quot;这个词copyright, 按照字面解释, 就是&amp;quot;复制的权利&amp;quot;(copy+right)。这就是说, 只要是有版权的作品, 都是不等随便复制的。&lt;/p&gt;
    
    </summary>
    
      <category term="License" scheme="https://vonsdite.cn/categories/License/"/>
    
    
      <category term="License" scheme="https://vonsdite.cn/tags/License/"/>
    
  </entry>
  
  <entry>
    <title>(转)创作公用许可证CC (Creative Commons licenses)</title>
    <link href="https://vonsdite.cn/posts/b16e73a9.html"/>
    <id>https://vonsdite.cn/posts/b16e73a9.html</id>
    <published>2018-12-27T11:32:50.000Z</published>
    <updated>2018-12-27T12:33:45.228Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Tue Jan 15 2019 15:11:55 GMT+0800 (中国标准时间) --><p>文章转自: 阮一峰 <a href="http://www.ruanyifeng.com/blog/2008/04/creative_commons_licenses.html" target="_blank" rel="noopener">谈谈创作共用许可证(Creative Commons licenses)</a></p><p><img src="/images/2018-12-27-19-37-59.png" alt=""></p><a id="more"></a><h1>一、创作共用许可证的起源</h1><p>自从**版权制度(copyright)**确立以后, 很多人感到, 虽然它保护了作者的利益, 但是却剥夺了使用者的自由。</p><p>除了费用以外, 一个主要的问题是, 通行的版权协议是一种限制性的协议, 就是说, 只有它明文许可你可以做的事, 你才能做, 否则就是侵权行为。这样不仅很不方便, 而且阻碍了作品的传播, 违背社会公共利益, 尤其是在新传播方式层出不穷的网络时代。</p><p>因此, 一些有识之士决定找到一种新的方法, 在版权制度的合法框架下, 使得人们可以自由使用他人的作品。这种新方法就是**&quot;开放内容许可证&quot;(open content licenses)**。简单说, 就是作者为自己的作品选择一种许可证一起发布, 然后这些许可证本身都是开放式协议, 就是说, 它只明文禁止使用者不能做的事, 除此以外, 可以随意使用这些作品。</p><p><strong>创作共用许可证(Creative Commons licenses, 简称cc)</strong>, 就是这样一种许可证。它是由成立于2001年的美国Creative Commons基金会, 在2002年12月16日提出的。</p><h1>二、为自己的作品选择许可证为什么是重要的</h1><p>我们经常可以在书籍、电影、或者其他地方, 看到**&quot;保留所有权利&quot;(all rights reserved)**这句话, 这是一般的版权协议(full copyright)的基本内容, 就是说, 所有与作品有关的权利都归版权持有人所有。</p><p>另一方面, 我们知道, **公共领域(public domain)**的作品是没有版权的, 所有权利都归使用者。因此, 普通的版权协议和公共领域, 正好是两个极端, 一个是保留所有权利, 另一个则是放弃所有权利。</p><p>创作共用许可证, 则是在两个极端之间。它<strong>只保留几种了权利</strong>(some rights reserved), 除此以外的权利全部放弃。</p><p>当你在网上(或者其他地方)发布自己的作品时, 如果允许他人自由使用, 那么最好选择一种许可证一起发布。因为, 如果你不同时发布许可证的话, 根据版权法, 你的作品就拥有完全的版权, 默认保留所有权利, 即便这不是你的意愿。<br>**比如说, ** 你在github发布代码, 但你没发布许可证, 则默认保留所有权利。</p><p>从小处说, 这阻碍了作品的传播。从大处说, 这限制了他人的自由, 最终也会限制你自己的自由。所以, 尽可能为作品选择一种许可证一起发布, 这是很重要的。</p><h1>三、创作共用许可证的基本权利</h1><p>如果你希望在满足某些条件的前提下, 使用者可以实施如下行为, 那么你就可以考虑使用创作共用许可证。换言之, 下面这些权利是你自动让渡给使用者的:</p><blockquote><ul><li>复制作品;</li><li>散发作品;</li><li>公开展示或表演作品;</li><li>将作品完全一致地转化成另一种格式。</li></ul></blockquote><p>对于使用者来说, 虽然他免费拥有了这些权利, 但是必须遵守一些许可证设置的前提条件:</p><blockquote><ul><li>没有得到许可, 不得实施许可证中禁止的行为;</li><li>所有的复制件上, 都必须保留原始的版权说明和许可证的链接;</li><li>不得更改许可证的内容;</li><li>不得用技术手段限制其他人合法使用作品。</li></ul></blockquote><p>以上的权利和义务, 被称为<strong>创作共用许可证的基本权利(Baseline Rights)</strong>。</p><p>此外, 作品发布人还必须知道的是, 一旦选择了一种许可证, 并且公开发布以后, 就不能够收回了。这个许可证在整个版权保护期内, 对全世界的使用者都是有效的。(一个变通的方法是, 你可以在另一种许可证下, 发布作品的另一个版本。)</p><h1>四、创作共用许可证保留的权利</h1><p>使用创作共用许可证, 作者可以选择保留四种权利。</p><blockquote><ol><li><img src="/images/bg2008042202.gif.png" alt="">署名(Attribution, 简写为by) ：必须提到原作者。</li><li><img src="/images/2018-12-27-19-50-48.png" alt="">非商业用途(Noncommercial, 简写为nc) ：不得用于盈利性目的。</li><li><img src="/images/bg2008042204.gif.png" alt="">禁止演绎(No Derivative Works, 简写为nd) ：不得修改原作品。</li><li><img src="/images/bg2008042205.gif.png" alt="">相同方式共享(Share Alike, 简写为sa) ：如果允许修改原作品, 那么必须使用相同的许可证发布。</li></ol></blockquote><h1>五、创作共用许可证的种类</h1><p>上面4种权利, 你可以全部保留, 也可以全部放弃。运用排列组合知识, 我们知道一共有16种不同的组合, 每一种组合就对应一种不同的许可证。</p><p>这16种组合中, <strong>有5种是无效的：1种是4种权利都放弃</strong>, 这就等于是公共领域作品；另外4种是不能同时选择禁止演绎和相同方式共享, 这两种权利。</p><p>在剩下的11种组合中, 由于<strong>绝大多数人都要求保留署名权</strong>, 因此又可以排除5种。</p><p>最终只留下了6种组合, 绝大多数创作共用许可证都属于这6种组合之一：</p><blockquote><ol><li><img src="/images/bg2008042202.gif.png" alt="">署名(by license)</li><li><img src="/images/bg2008042202.gif.png" alt=""><img src="/images/2018-12-27-19-50-48.png" alt="">署名-非商业用途(by-nc license)</li><li><img src="/images/bg2008042202.gif.png" alt=""><img src="/images/bg2008042204.gif.png" alt="">署名-禁止演绎(by-nd license)</li><li><img src="/images/bg2008042202.gif.png" alt=""><img src="/images/2018-12-27-19-50-48.png" alt=""><img src="/images/bg2008042204.gif.png" alt="">署名-非商业用途-禁止演绎(by-nc-nd license)</li><li><img src="/images/bg2008042202.gif.png" alt=""><img src="/images/2018-12-27-19-50-48.png" alt=""><img src="/images/bg2008042205.gif.png" alt="">署名-非商业用途-相同方式共享(by-nc-sa license)</li><li><img src="/images/bg2008042202.gif.png" alt=""><img src="/images/bg2008042205.gif.png" alt="">署名-相同方式共享(by-sa license)</li></ol></blockquote><p>这6种组合中, 最宽松的是第一种署名许可证, 限制性最强的是第四种署名-非商业用途-禁止演绎许可证。</p><p>所以, 准确的说, 创作共用许可证不是一种许可证, 而是一系列许可证的总称。</p><h1>六、如何使用创作共用许可证</h1><p>对于网上的作品, 你可以到这个网址http://creativecommons.org/license/, 去进行选择, 根据网页上的提示, 一步步操作, 最后将系统给出的代码放置在网页上即可。</p><p>对于网下的作品, 你在选择好许可证后, 可以在作品上写下一段话：</p><blockquote><p>&quot;本作品采用创作共用[插入许可证的描叙]许可证授权。如要查看许可证全文, 请访问如下网址[插入网址url]。&quot;(This work is licensed under the Creative Commons [insert description] License. To view a copy of this license, visit [insert url].)</p></blockquote><p>需要注意的是, 对应不同的司法管辖区, 创作共用许可证有不同的地区版本。另外, 创作共用许可证一直在修订, 最新的是3.0版, 但是一部分地区还在使用2.5版。</p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Tue Jan 15 2019 15:11:55 GMT+0800 (中国标准时间) --&gt;&lt;p&gt;文章转自: 阮一峰 &lt;a href=&quot;http://www.ruanyifeng.com/blog/2008/04/creative_commons_licenses.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;谈谈创作共用许可证(Creative Commons licenses)&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;/images/2018-12-27-19-37-59.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="License" scheme="https://vonsdite.cn/categories/License/"/>
    
    
      <category term="License" scheme="https://vonsdite.cn/tags/License/"/>
    
  </entry>
  
</feed>
