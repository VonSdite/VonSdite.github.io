<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Von Sdite</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://vonsdite.cn/"/>
  <updated>2019-01-01T03:42:39.141Z</updated>
  <id>https://vonsdite.cn/</id>
  
  <author>
    <name>Von Sdite</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>使用gdb调试C/C++程序</title>
    <link href="https://vonsdite.cn/posts/898073bb.html"/>
    <id>https://vonsdite.cn/posts/898073bb.html</id>
    <published>2018-12-31T14:10:00.000Z</published>
    <updated>2019-01-01T03:42:39.141Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Tue Jan 01 2019 11:43:07 GMT+0800 (中国标准时间) --><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>调试, 是编写程序过程中确保程序正确性的重要环节, 现在使用的IDE大多都集成了调试器, 但linux最著名的调试器是命令行形式的<strong>C/C++调试器GDB</strong>。以下将介绍<strong>GDB</strong>的基本使用方法。<br><img src="/images/2018-12-31-22-21-52.png" alt=""></p><a id="more"></a><h1 id="安装GDB"><a href="#安装GDB" class="headerlink" title="安装GDB"></a>安装GDB</h1><p>大多数的发行版Linux系统中都有GDB</p><h2 id="Debian-或-Ubuntu"><a href="#Debian-或-Ubuntu" class="headerlink" title="Debian 或 Ubuntu"></a>Debian 或 Ubuntu</h2><p><code>$ sudo apt-get install gdb</code></p><h2 id="Arch-Linux"><a href="#Arch-Linux" class="headerlink" title="Arch Linux"></a>Arch Linux</h2><p><code>$ sudo pacman -S gdb</code></p><h2 id="Fedora-CentOS-或-RHEL"><a href="#Fedora-CentOS-或-RHEL" class="headerlink" title="Fedora, CentOS 或 RHEL"></a>Fedora, CentOS 或 RHEL</h2><p><code>$ sudo yum install gdb</code></p><p>也可以从<a href="https://www.gnu.org/software/gdb/" target="_blank" rel="noopener">官网中下载</a>。</p><h1 id="示例代码"><a href="#示例代码" class="headerlink" title="示例代码"></a>示例代码</h1><p>学习任何一项技能, 动手试验才是关键。以下是本文演示GDB的代码, 多文件调试, 它可以很好的体现GDB的特性。将它拷贝下来并且进行实验——这是最好的方法。</p><details><summary><strong>a.c</strong></summary><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"b.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"c.h"</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc,<span class="keyword">char</span>**argv)</span></span>&#123;</span><br><span class="line"><span class="keyword">long</span> d,result=<span class="number">1</span>,i=<span class="number">0</span>,dresult,sum;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"please input your student number:\n"</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%ld"</span>,&amp;d);dresult=d%<span class="number">100</span>;</span><br><span class="line"><span class="keyword">while</span>(d&gt;<span class="number">0</span>) &#123; result+=(d%<span class="number">100</span>)&amp;<span class="number">1</span>; d=d/<span class="number">100</span>; &#125;</span><br><span class="line"><span class="keyword">while</span>(i++&lt;<span class="number">150</span>)&#123;</span><br><span class="line">sum=<span class="built_in">sqrt</span>(dresult);</span><br><span class="line">dresult=sum+<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">mytool1_print(<span class="string">":"</span>);</span><br><span class="line">mytool2_print(<span class="string">":"</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"your numbers are %ld,%ld\n"</span>,cresult,sum);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><br></details><details><summary><strong>b.h</strong></summary><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> _MYTOOL_1_H</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _MYTOOL_1_H</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">mytool1_print</span><span class="params">(<span class="keyword">char</span>*print_str)</span></span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br></pre></td></tr></table></figure><br><br></details><details><summary><strong>b.c</strong></summary><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"b.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"c.h"</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">mytool1_print</span><span class="params">(<span class="keyword">char</span>*print_str)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"1 %s\n"</span>,print_str);</span><br><span class="line">mytool2_print(<span class="string">"2"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><br></details><details><summary><strong>c.h</strong></summary><br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> _MYTOOL_2_H</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _MYTOOL_2_H</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">mytool2_print</span><span class="params">(<span class="keyword">char</span>* print_str)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">long</span> <span class="title">sqrt</span><span class="params">(<span class="keyword">long</span> d)</span></span>;</span><br><span class="line"><span class="keyword">extern</span> <span class="keyword">long</span> cresult;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br></pre></td></tr></table></figure><br><br></details><details><summary><strong>c.c</strong></summary><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"c.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="keyword">long</span> cresult=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">long</span> d1result=<span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="keyword">long</span> <span class="title">sqrt</span><span class="params">(<span class="keyword">long</span> re)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(cresult==<span class="number">0</span>)cresult=re%<span class="number">100</span>/<span class="number">10</span>+(re%<span class="number">10</span>)*(re%<span class="number">10</span>);</span><br><span class="line"><span class="keyword">if</span>(d1result&gt;=<span class="number">140</span>)<span class="keyword">return</span> cresult*cresult+<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(++d1result&gt;=<span class="number">128</span>)<span class="keyword">return</span> cresult+<span class="number">10</span>;</span><br><span class="line"><span class="keyword">return</span> re*re*re%<span class="number">1000</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">mytool2_print</span><span class="params">(<span class="keyword">char</span>* print_str)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"2: %s\n"</span>,print_str);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><br></details><h1 id="GDB的使用"><a href="#GDB的使用" class="headerlink" title="GDB的使用"></a>GDB的使用</h1><h2 id="编译Debug程序"><a href="#编译Debug程序" class="headerlink" title="编译Debug程序"></a>编译Debug程序</h2><p>首先最重要的, 你需要使用编译器的<code>&quot;-g&quot;</code>选项来编译程序, 这样可执行程序才能通过GDB来运行。<br></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> gcc a.c b.c c.c -g -o mydebug</span></span><br></pre></td></tr></table></figure><p></p><h1 id="开始调试"><a href="#开始调试" class="headerlink" title="开始调试"></a>开始调试</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> gdb -tui [可执行程序名]</span></span><br></pre></td></tr></table></figure><p>使用<code>&#39;-tui&#39;</code>选项可以将代码显示在一个漂亮的交互式窗口内(所以被称为<strong>文本用户界面TUI</strong>), 在这个窗口内可以滚动鼠标滑轮, 同时在下面的<strong>GDB shell中输入命令</strong>。<br><img src="/images/2018-12-31-22-42-07.png" alt=""></p><h2 id="查看代码-list"><a href="#查看代码-list" class="headerlink" title="查看代码 list"></a>查看代码 list</h2><p>我们可以使用<code>list</code>命令来显示代码, 使用方法有<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">list [file:]start[,end]</span><br><span class="line">list [file:]function</span><br></pre></td></tr></table></figure><p></p><h3 id="1-查看c-c的第1行"><a href="#1-查看c-c的第1行" class="headerlink" title="1. 查看c.c的第1行"></a>1. 查看c.c的第1行</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">list c.c:1</span><br><span class="line">```  </span><br><span class="line">**or 简写**</span><br></pre></td></tr></table></figure><p>l c.c:1<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">![](/images/2019-01-01-10-12-32.png)</span><br><span class="line"></span><br><span class="line">### 2. 查看b.c的3到8行</span><br></pre></td></tr></table></figure><p></p><p>list b.c:3,8<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">**or 简写**</span><br></pre></td></tr></table></figure><p></p><p>l b.c:3,8<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">![](/images/2019-01-01-10-14-48.png)</span><br><span class="line"></span><br><span class="line">### 3. 查看c.c的mytool2_print函数</span><br></pre></td></tr></table></figure><p></p><p>list c.c:mytool2_print<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">**or 简写**</span><br></pre></td></tr></table></figure><p></p><p>l c.c:mytool2_print<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">![](/images/2019-01-01-10-16-32.png)</span><br><span class="line"></span><br><span class="line">## 运行程序 run </span><br><span class="line">gdb 输入run即可运行程序</span><br></pre></td></tr></table></figure><p></p><p>run<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">![](/images/2019-01-01-10-51-42.png)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">## 设置断点 break</span><br><span class="line">```c</span><br><span class="line">break  [file:]行号        </span><br><span class="line">break  [file:]行号  if  条件  </span><br><span class="line">break  [file:]函数        </span><br><span class="line">break  *address</span><br></pre></td></tr></table></figure><p></p><h3 id="1-在a-c第10行设置断点"><a href="#1-在a-c第10行设置断点" class="headerlink" title="1. 在a.c第10行设置断点"></a>1. 在a.c第10行设置断点</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">list a.c:1</span><br><span class="line">break 10</span><br></pre></td></tr></table></figure><p><strong>or</strong><br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">break a.c:10</span><br></pre></td></tr></table></figure><p></p><p>从图可见, 文本用户界面TUI下, 设置<strong>断点会标志在文本的左侧</strong><br><img src="/images/2019-01-01-10-26-57.png" alt=""></p><h3 id="2-在a-c-main函数开始处设置断点"><a href="#2-在a-c-main函数开始处设置断点" class="headerlink" title="2. 在a.c main函数开始处设置断点"></a>2. 在a.c main函数开始处设置断点</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">list a.c:1</span><br><span class="line">break main</span><br></pre></td></tr></table></figure><p><strong>or</strong><br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">break a.c:main</span><br></pre></td></tr></table></figure><p></p><p><img src="/images/2019-01-01-10-30-20.png" alt=""></p><h3 id="3-在a-c的第10行设置条件断点"><a href="#3-在a-c的第10行设置条件断点" class="headerlink" title="3. 在a.c的第10行设置条件断点"></a>3. 在a.c的第10行设置条件断点</h3><p>条件断点的意思是, 当条件满足时, 断点会被执行; 条件不满足, 断点不会被执行<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">break a.c:10 if i == 150</span><br></pre></td></tr></table></figure><p></p><p>设置了当i等于150时, 执行断点, 方便在调试循环的时候, 想调试第几次循环的结果<br><img src="/images/2019-01-01-10-35-18.png" alt=""></p><h2 id="设置观察点-watch"><a href="#设置观察点-watch" class="headerlink" title="设置观察点 watch"></a>设置观察点 watch</h2><p>设置一个’观察断点’, 当这个被观察的变量发生变化时, 程序会被停止。<br></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">watch 变量  (发生变化时暂停运行)            </span><br><span class="line">rwatch 变量 (被访问时暂停运行)       </span><br><span class="line">awatch 变量 (发生被访问或改变时暂停运行)</span><br></pre></td></tr></table></figure><p></p><h3 id="1-给a-c中的sum变量设置观察点"><a href="#1-给a-c中的sum变量设置观察点" class="headerlink" title="1. 给a.c中的sum变量设置观察点"></a>1. 给a.c中的sum变量设置观察点</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">list a.c:1</span><br><span class="line">break main</span><br><span class="line">run</span><br><span class="line">watch sum</span><br></pre></td></tr></table></figure><p>观察点要在程序运行的时候才能设置<br><img src="/images/2019-01-01-10-48-37.png" alt=""></p><h2 id="继续运行continue"><a href="#继续运行continue" class="headerlink" title="继续运行continue"></a>继续运行continue</h2><p>遇到断点时, 要继续向下运行到下一个断点或者运行到结束程序, 使用continue命令<br><img src="/images/2019-01-01-10-54-32.png" alt=""></p><h2 id="跳出循环until"><a href="#跳出循环until" class="headerlink" title="跳出循环until"></a>跳出循环until</h2><p>在执行完循环体内的最后一条语句之后执行 until, 就会执行完循环体到后面的一个语句停下。<br><strong>PS:</strong> 就是循环体要执行一遍, 回到循环判断条件, 再执行until命令就会跳出循环</p><h2 id="查看变量值-print"><a href="#查看变量值-print" class="headerlink" title="查看变量值 print"></a>查看变量值 print</h2><p><strong>print</strong>用来查看变量的值<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">print 变量</span><br><span class="line">p 变量</span><br></pre></td></tr></table></figure><p></p><p><strong>ptype</strong>用来查看变量的类型<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ptype 变量</span><br></pre></td></tr></table></figure><p></p><h2 id="修改变量的值-ste"><a href="#修改变量的值-ste" class="headerlink" title="修改变量的值 ste"></a>修改变量的值 ste</h2><p>这样会覆盖变量的值。不过需要注意, 你不能创建一个新的变量或改变变量的类型。<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">set var [变量] = [新的值]</span><br></pre></td></tr></table></figure><p></p><h2 id="单步调试"><a href="#单步调试" class="headerlink" title="单步调试"></a>单步调试</h2><p><strong>step</strong> 运行到下一条语句, 有可能进入到一个函数里面<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">step</span><br></pre></td></tr></table></figure><p></p><p><strong>next</strong> 直接运行下一条语句, 而不进入子函数内部<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">next</span><br></pre></td></tr></table></figure><p></p><h2 id="删除断点"><a href="#删除断点" class="headerlink" title="删除断点"></a>删除断点</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">delete 断点号</span><br><span class="line">clear 断点所在行</span><br></pre></td></tr></table></figure><h2 id="退出程序-quit"><a href="#退出程序-quit" class="headerlink" title="退出程序 quit"></a>退出程序 quit</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">quit</span><br></pre></td></tr></table></figure><h2 id="查看gdb内部命令-help"><a href="#查看gdb内部命令-help" class="headerlink" title="查看gdb内部命令 help"></a>查看gdb内部命令 help</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">help 命令名</span><br></pre></td></tr></table></figure><p><img src="/images/2019-01-01-11-29-13.png" alt=""><br><img src="/images/2019-01-01-11-29-27.png" alt=""></p><h2 id="complete-列出命令"><a href="#complete-列出命令" class="headerlink" title="complete 列出命令"></a>complete 列出命令</h2><p>列出所有以字符串str开头的命令<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">complete str</span><br></pre></td></tr></table></figure><p></p><p><img src="/images/2019-01-01-11-30-53.png" alt=""></p><h2 id="其他命令"><a href="#其他命令" class="headerlink" title="其他命令"></a>其他命令</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line">info breakpoints        (显示断点信息)</span><br><span class="line">info watchpoints    (显示观察点信息)</span><br><span class="line"></span><br><span class="line">// 捕捉点</span><br><span class="line">catch event    (event发生时, 程序暂停运行)</span><br><span class="line">tcatch event            (设置只停一次的catchpoint, 第一次生效后, 该捕捉点被自动删除)</span><br><span class="line">event可以如下:</span><br><span class="line">    exec: exec被调用</span><br><span class="line">    fork: fork被调用</span><br><span class="line">    load: 加载动态库</span><br><span class="line">    load libname: 加载名为libname的动态库</span><br><span class="line">    unload: 卸载动态库</span><br><span class="line">    unload libname: 卸载名为libname的动态库</span><br><span class="line">    syscall [args]: 调用系统调用, args可以指定系统调用号, 或者系统名称</span><br><span class="line"></span><br><span class="line">// 关于断点的</span><br><span class="line">disable(dis &lt;-命令简写) n   使断点n暂时失效</span><br><span class="line">enable(en &lt;-命令简写)  n     恢复断点n功能</span><br><span class="line"></span><br><span class="line">// 函数调用</span><br><span class="line">call  func</span><br><span class="line">return  [expr] 函数后续语句不再执行直接返回, expr可设置返回值</span><br><span class="line">finish 函数后续语句执行完返回</span><br><span class="line"></span><br><span class="line">// 搜索当前文件, 模式搜索</span><br><span class="line">forward-search  regexp    (行首开始)   </span><br><span class="line">search  regexp          (当前行开始)</span><br><span class="line">reverse-search  regexp    (行尾开始)</span><br><span class="line"></span><br><span class="line">// 查看运行数据</span><br><span class="line">print命令   </span><br><span class="line">    print  [/fmt]  exp</span><br><span class="line">当被调试的程序停止时, 可以用print命令（简写为p）或同义命令inspect来查看当前程序中运行的数据。 </span><br><span class="line"></span><br><span class="line">gdb所支持的表达式中的运算符</span><br><span class="line">    用&amp;运算符取出变量在内存中的地址。print  &amp;array[i] </span><br><span class="line">    &#123; type &#125;adrexp 表示一个数据类型为type、存放地址为adrexp的数据。&#123;&#125;</span><br><span class="line">    @  它是一个与数组有关的双目运算符 print a[2]@3 </span><br><span class="line">    file::var  或者  function::var  表示文件file（或函数function）中变量var的值。</span><br><span class="line">    如&apos;f1.c&apos;::p</span><br><span class="line"></span><br><span class="line">whatis命令显示出变量的数据类型 </span><br><span class="line"></span><br><span class="line">x命令可以查看内存地址中数据的值。其使用格式是: </span><br><span class="line">    x  [/nfu]  address</span><br><span class="line"></span><br><span class="line">display命令可以预先设置一些要显示的表达式, 当程序停住时, 或是在你单步跟踪时, 变量会自动显示, 其一般格式为: </span><br><span class="line">    display  [/fmt]  exp </span><br><span class="line">取消对先前设置的某些表达式的自动显示功能, 可使用以下命令: </span><br><span class="line">    undisplay  [disnum]</span><br><span class="line">    delete display [disnum]</span><br><span class="line"></span><br><span class="line">// 堆栈跟踪</span><br><span class="line">backtrace (bt)</span><br><span class="line">    打印当前的函数调用栈的所有信息</span><br><span class="line"></span><br><span class="line">frame(f) n</span><br><span class="line">    切换当前堆栈, n是一个从0开始的整数, 是栈中的层编号。比如：frame 0, 表示栈顶, frame 1, 表示栈的第二层。</span><br><span class="line"></span><br><span class="line">info  frame(f)</span><br><span class="line">    显示出当前栈帧的所有信息, 如函数地址, 调用函数的地址, 被调用函数的地址, 目前函数的程序语言、函数参数地址及值、局部变量的地址等。</span><br></pre></td></tr></table></figure><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Tue Jan 01 2019 11:43:07 GMT+0800 (中国标准时间) --&gt;&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;调试, 是编写程序过程中确保程序正确性的重要环节, 现在使用的IDE大多都集成了调试器, 但linux最著名的调试器是命令行形式的&lt;strong&gt;C/C++调试器GDB&lt;/strong&gt;。以下将介绍&lt;strong&gt;GDB&lt;/strong&gt;的基本使用方法。&lt;br&gt;&lt;img src=&quot;/images/2018-12-31-22-21-52.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="C/C++" scheme="https://vonsdite.cn/categories/C-C/"/>
    
      <category term="gdb" scheme="https://vonsdite.cn/categories/C-C/gdb/"/>
    
    
      <category term="C/C++" scheme="https://vonsdite.cn/tags/C-C/"/>
    
      <category term="gdb" scheme="https://vonsdite.cn/tags/gdb/"/>
    
  </entry>
  
  <entry>
    <title>Linux grep命令与正则表达式</title>
    <link href="https://vonsdite.cn/posts/790da0f0.html"/>
    <id>https://vonsdite.cn/posts/790da0f0.html</id>
    <published>2018-12-31T09:35:09.000Z</published>
    <updated>2018-12-31T14:18:06.516Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Tue Jan 01 2019 11:43:07 GMT+0800 (中国标准时间) --><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p><strong>grep</strong>是一种强大的<strong>文本搜索工具</strong>, 它能使用正则表达式搜索文本, 并把匹配的行打印出来。通常grep有三种版本grep、egrep(egrep等同于grep -E)和fgrep。egrep为扩展的grep, fgrep则为快速grep(<strong>固定的字符串</strong>来对文本进行搜索, 不支持正则表达式的引用但是查询极为快速)。grep是Linux文本处理三剑客之一。</p><a id="more"></a><h1 id="grep的使用"><a href="#grep的使用" class="headerlink" title="grep的使用"></a>grep的使用</h1><p>使用方式:<br><code>grep [OPTIONS] PATTERN [FILE...]</code><br><strong>or</strong><br><code>grep [OPTIONS] [-e PATTERN | -f FILE] [FILE...]</code></p><p><strong>常用选项</strong>:</p><blockquote><ul><li>–color=auto: 对匹配到的文本着色后进行高亮显示;</li><li>-i: 忽略字符的大小写</li><li>-o: 仅显示匹配到的字符串</li><li>-v: 显示不能被模式匹配到的行</li><li>-E: 支持使用扩展的正则表达式</li><li>-q: 静默模式, 即不输出任何信息</li><li>-A #: 显示被模式匹配的行及其后#行</li><li>-B #: 显示被模式匹配的行及其前#行</li><li>-C #: 显示被模式匹配的行及其前后各#行</li></ul></blockquote><p>注: 使用grep匹配时<strong>需使用双引号引起来(单引号为强引用)</strong>, 防止被系统误认为参数或者特殊命令而报错。</p><h1 id="扩展grep使用方式"><a href="#扩展grep使用方式" class="headerlink" title="扩展grep使用方式"></a>扩展grep使用方式</h1><p>使用方式:<br><code>egrep [OPTIONS] PATTERN [FILE...]</code><br><strong>or</strong><br><code>grep -E [OPTIONS] PATTERN [FILE...]</code></p><p><strong>常用选项</strong>:</p><blockquote><ul><li>-i: 忽略字符的大小写</li><li>-o: 仅显示匹配到的字符串本身</li><li>-v: 显示不被模式匹配到的行</li><li>-q: 静默模式, 即不输出任何信息</li><li>-A #: 显示被模式匹配的行及其后#行</li><li>-B #: 显示被模式匹配的行及其前#行</li><li>-C #: 显示被模式匹配的行及其前后各#行</li><li>-G: 支持基本正则表达式</li></ul></blockquote><h1 id="grep正则表达式元字符"><a href="#grep正则表达式元字符" class="headerlink" title="grep正则表达式元字符"></a>grep正则表达式元字符</h1><blockquote><ul><li>‘^’: 锚定行首</li><li>‘$’: 锚定行尾</li><li>‘.’: 匹配任一一个字符</li><li>‘*’: 匹配零个或多个<strong>先前字符</strong></li><li>‘\?’: 匹配其前面的字符0次或者1次;</li><li>‘+‘: 匹配其前面的字符1次或者多次;</li><li>‘{m}‘: 匹配其前面的字符m次(\为转义字符)</li><li>‘{m,n}‘: 匹配其前面的字符至少m次, 至多n次</li><li>‘[]’: 匹配一个指定范围内的字符 <strong>或者</strong> ‘[^]’匹配指定范围外的任意单个字符</li><li>‘\&lt;’或’\b’: 锚定词首</li><li>‘>‘或’\b’: 锚定词尾(可用\&lt;PATTERN>: 匹配完整单词)</li><li>‘()‘: 将多个字符当做一个整体进行处理</li></ul></blockquote><h2 id="关于后向引用"><a href="#关于后向引用" class="headerlink" title="关于后向引用"></a>关于后向引用</h2><p>后向引用: 引用前面的<strong>分组括号</strong>中的<strong>模式所匹配到的字符</strong><br>分组括号中的模式匹配到的内容或被正则表达式引擎自动记录于内部的变量中:</p><blockquote><ul><li>\1: 模式从左侧起, 第一个左括号及与之匹配的右括号之间模式匹配到的内容</li><li>\2: 模式从左侧起, 第二个左括号及与之匹配的右括号之间模式匹配到的内容</li></ul></blockquote><h1 id="扩展正则表达式与正则表达式略有不同"><a href="#扩展正则表达式与正则表达式略有不同" class="headerlink" title="扩展正则表达式与正则表达式略有不同"></a>扩展正则表达式与正则表达式略有不同</h1><h2 id="关于’-’的不同"><a href="#关于’-’的不同" class="headerlink" title="关于’[]’的不同"></a>关于’[]’的不同</h2><p><code>&#39;[]&#39;</code>: 依旧匹配指定范围内的任意单个字符;<br>但是有很多特殊匹配方式:</p><blockquote><ul><li>[:digit:] 匹配任意单个数字</li><li>[:lower:] 匹配任意单个小写字母</li><li>[:upper:] 匹配任意单个大写字母</li><li>[:alpha:] 匹配任意单个字母</li><li>[:alnum:] 匹配任意单个字母或数字</li><li>[:punct:] 匹配任意单个符号</li><li>[:space:] 匹配单个空格</li></ul></blockquote><h2 id="扩展正则不需要转义字符的地方"><a href="#扩展正则不需要转义字符的地方" class="headerlink" title="扩展正则不需要转义字符的地方"></a>扩展正则不需要转义字符的地方</h2><p>一些地方取消了转义字符的使用:</p><blockquote><ul><li>‘?’: 匹配其前面的字符0次或者1次;</li><li>‘+d’: 匹配其前面的字符1次或者多次;</li><li>‘{m}’: 匹配其前面的字符m次(\为转义字符)</li><li>‘{m,n}’: 匹配其前面的字符至少m次, 至多n次</li><li>(): 将一个或多个字符捆绑在一起, 当做一个整体进行处理, 反向引用照常使用。</li><li>‘|’: 或 (注: ‘C|cat’为C与cat, ‘(C|c)at才是Cat与cat’)</li></ul></blockquote><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Tue Jan 01 2019 11:43:07 GMT+0800 (中国标准时间) --&gt;&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;grep&lt;/strong&gt;是一种强大的&lt;strong&gt;文本搜索工具&lt;/strong&gt;, 它能使用正则表达式搜索文本, 并把匹配的行打印出来。通常grep有三种版本grep、egrep(egrep等同于grep -E)和fgrep。egrep为扩展的grep, fgrep则为快速grep(&lt;strong&gt;固定的字符串&lt;/strong&gt;来对文本进行搜索, 不支持正则表达式的引用但是查询极为快速)。grep是Linux文本处理三剑客之一。&lt;/p&gt;
    
    </summary>
    
      <category term="Linux" scheme="https://vonsdite.cn/categories/Linux/"/>
    
      <category term="Command" scheme="https://vonsdite.cn/categories/Linux/Command/"/>
    
    
      <category term="Linux" scheme="https://vonsdite.cn/tags/Linux/"/>
    
      <category term="Command" scheme="https://vonsdite.cn/tags/Command/"/>
    
      <category term="grep" scheme="https://vonsdite.cn/tags/grep/"/>
    
  </entry>
  
  <entry>
    <title>解决python wordcloud中文乱码, 中文词频问题</title>
    <link href="https://vonsdite.cn/posts/b82d5d51.html"/>
    <id>https://vonsdite.cn/posts/b82d5d51.html</id>
    <published>2018-12-31T03:48:12.000Z</published>
    <updated>2018-12-31T14:17:43.370Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Tue Jan 01 2019 11:43:08 GMT+0800 (中国标准时间) --><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>python的<code>wordcloud</code>可以很方便的生成词云图, 然而美中不足的是, 该库对中文支持并不是那么友好, 存在以下两个问题</p><ol><li>中文字符会<strong>乱码</strong></li><li>中文<strong>分词有问题</strong></li></ol><p>以下介绍如何解决<br><a id="more"></a></p><h1 id="解决中文乱码"><a href="#解决中文乱码" class="headerlink" title="解决中文乱码"></a>解决中文乱码</h1><p><code>wordcloud</code> 不支持显示中文, 可以通过如下修改来支持中文:</p><ol><li>进入<code>python</code>根目录, 然后进入<code>Lib\site-packages\wordcloud</code></li><li>进入<code>C:\Windows\Fonts</code>目录下, 拷贝一个中文字库, 如<strong>华文新魏</strong>, 将其复制粘贴到<code>Lib\site-packages\wordcloud</code>目录下<br><img src="/images/2018-12-31-10-29-48.png" alt=""><br><img src="/images/2018-12-31-10-49-51.png" alt=""></li><li>打开<code>Lib\site-packages\wordcloud</code>目录下<code>wordcloud.py</code>, 找到如下这行代码<br><img src="/images/2018-12-31-10-28-31.png" alt=""><br>将代码改为对应拷入进来的字库名字, 如<strong>华文新魏</strong>的字库名字为<strong>STXINWEI.TTF</strong><br><img src="/images/2018-12-31-10-32-07.png" alt=""></li><li>至此解决中文乱码问题</li></ol><h1 id="解决中文分词问题"><a href="#解决中文分词问题" class="headerlink" title="解决中文分词问题"></a>解决中文分词问题</h1><p><code>wordcloud</code>的<code>WordCloud</code>类中的<code>generate</code>方法是先对传进去的文字进行分词, 但是对<strong>中文的分词效果</strong>不太好, 建议先自己计算词频, 存放到字典中, 然后使用<code>generate_from_frequencies</code>来生成词云<br></p><figure class="highlight python"><figcaption><span>&#123;cmd</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> wordcloud <span class="keyword">import</span> WordCloud</span><br><span class="line"><span class="keyword">import</span> matplotlib <span class="keyword">as</span> mpl</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line">mpl.rcParams[<span class="string">'font.sans-serif'</span>] = [<span class="string">'SimHei'</span>]    <span class="comment"># 指定默认字体 SimHei为黑体</span></span><br><span class="line">mpl.rcParams[<span class="string">'axes.unicode_minus'</span>] = <span class="keyword">False</span>      <span class="comment"># 用来正常显示负号</span></span><br><span class="line"></span><br><span class="line">text = <span class="string">'清华大学清华大学北京大学北京大学暨南大学'</span></span><br><span class="line">textDic = &#123;</span><br><span class="line">    <span class="string">'清华大学'</span>: <span class="number">2</span>,</span><br><span class="line">    <span class="string">'北京大学'</span>: <span class="number">2</span>,</span><br><span class="line">    <span class="string">'暨南大学'</span>: <span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line">wc1 = WordCloud().generate(text)                        <span class="comment"># generate对中文分词效果不好</span></span><br><span class="line">wc2 = WordCloud().generate_from_frequencies(textDic)    <span class="comment"># 自己来计算词频, 改善效果</span></span><br><span class="line"></span><br><span class="line">plt.title(<span class="string">'generate生成的词云'</span>)</span><br><span class="line">plt.imshow(wc1, interpolation=<span class="string">"bilinear"</span>)</span><br><span class="line">plt.axis(<span class="string">"off"</span>)</span><br><span class="line"></span><br><span class="line">plt.figure()</span><br><span class="line">plt.title(<span class="string">'自己计算词频'</span>)</span><br><span class="line">plt.imshow(wc2, interpolation=<span class="string">"bilinear"</span>)</span><br><span class="line">plt.axis(<span class="string">"off"</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p></p><p><img src="/images/2018-12-31-10-48-00.png" alt=""></p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Tue Jan 01 2019 11:43:08 GMT+0800 (中国标准时间) --&gt;&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;python的&lt;code&gt;wordcloud&lt;/code&gt;可以很方便的生成词云图, 然而美中不足的是, 该库对中文支持并不是那么友好, 存在以下两个问题&lt;/p&gt;&lt;ol&gt;&lt;li&gt;中文字符会&lt;strong&gt;乱码&lt;/strong&gt;&lt;/li&gt;&lt;li&gt;中文&lt;strong&gt;分词有问题&lt;/strong&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;以下介绍如何解决&lt;br&gt;
    
    </summary>
    
      <category term="Python" scheme="https://vonsdite.cn/categories/Python/"/>
    
      <category term="Wordcloud" scheme="https://vonsdite.cn/categories/Python/Wordcloud/"/>
    
    
      <category term="Python" scheme="https://vonsdite.cn/tags/Python/"/>
    
      <category term="Wordcloud" scheme="https://vonsdite.cn/tags/Wordcloud/"/>
    
  </entry>
  
  <entry>
    <title>国内各高校专业评比数据分析, python 词云、爬虫、数据分析</title>
    <link href="https://vonsdite.cn/posts/92d0ece7.html"/>
    <id>https://vonsdite.cn/posts/92d0ece7.html</id>
    <published>2018-12-31T03:33:38.000Z</published>
    <updated>2018-12-31T14:17:47.257Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Tue Jan 01 2019 11:43:07 GMT+0800 (中国标准时间) --><p><img src="/images/2018-12-31-11-37-55.jpg" alt=""></p><p><a href="https://github.com/VonSdite/SchoolRank" target="_blank" rel="noopener"><strong>源代码 github: https://github.com/VonSdite/SchoolRank</strong></a></p><a id="more"></a><h1 id="数据来源"><a href="#数据来源" class="headerlink" title="数据来源"></a>数据来源</h1><ol><li><p>中国学位与研究生教育信息网 =&gt; <a href="http://www.cdgdc.edu.cn/xwyyjsjyxx/xkpgjg/" target="_blank" rel="noopener">http://www.cdgdc.edu.cn/xwyyjsjyxx/xkpgjg/</a></p></li><li><p>数据是全国<strong>第四轮</strong>学科评估结果，该数据于<strong>2017年12月28日</strong>发布</p></li></ol><h1 id="目的"><a href="#目的" class="headerlink" title="目的"></a>目的</h1><p>做这个脚本的缘由,</p><ol><li>因为身边总有同学要讨论哪个高校哪个高校<strong>比较优秀</strong>, 讲道理, 要看哪个高校优秀, 还是要具体到高校的<strong>具体专业</strong>, 口说无凭, 数据说话</li><li>可以方便大家知道某个高校的强势在哪里</li></ol><h1 id="脚本介绍"><a href="#脚本介绍" class="headerlink" title="脚本介绍"></a>脚本介绍</h1><h2 id="需要的第三方库"><a href="#需要的第三方库" class="headerlink" title="需要的第三方库"></a>需要的第三方库</h2><blockquote><ul><li><strong>wordcloud</strong>: <code>pip install wordcloud</code></li><li><strong>pandas</strong>: <code>pip install pandas</code></li><li><strong>numpy</strong>: <code>pip install numpy</code></li><li><strong>matplotlib</strong>: <code>pip install matplotlib</code></li><li><strong>pillow</strong>: <code>pip install pillow</code></li><li><strong>requests</strong>: <code>pip install requests</code></li><li><strong>BeautifulSoup</strong>: <code>pip install beautifulsoup4</code></li></ul></blockquote><h2 id="show-py"><a href="#show-py" class="headerlink" title="show.py"></a><code>show.py</code></h2><p><em>展示学校的评估结果</em></p><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><ol><li>在该<strong>项目目录下</strong>打开终端</li><li>键入 <code>show.py [学校名]</code> 即可</li></ol><p>比如,<br><code>show.py 暨南大学</code><br><img src="/images/2018-12-31-11-19-46.png" alt=""></p><p>如果想比较<strong>多个学校</strong>之间的评估结果, 可以这样操作<br><code>show.py 西安交通大学 中山大学</code><br><img src="/images/2018-12-31-11-22-42.png" alt=""></p><h2 id="GetSomeData-GetSchoolRank-py"><a href="#GetSomeData-GetSchoolRank-py" class="headerlink" title="GetSomeData/GetSchoolRank.py"></a><code>GetSomeData/GetSchoolRank.py</code></h2><p><em>用于获取高校评估的脚本</em></p><p>使用爬虫来获取 <strong>全国第四轮学科评估结果</strong>, 将数据保存为了 <code>schoolRank.xlsx</code>, 保存为<code>.xlsx</code>文件是为了方便使用<code>excel</code>进行操作(也可以自己保存为<code>.csv</code>文件来进行数据处理, 代码中已注释)</p><h3 id="schoolRank-xlsx数据展示"><a href="#schoolRank-xlsx数据展示" class="headerlink" title="schoolRank.xlsx数据展示"></a>schoolRank.xlsx数据展示</h3><p><img src="/images/2018-12-31-00-05-18.png" alt=""></p><p>可以通过<code>excel</code>来筛选查看数据(比自己造轮子来的方便多了)</p><p><strong>比如,</strong> 查看 <strong>暨南大学</strong>的评估结果<br><img src="/images/2018-12-31-00-07-46.png" alt=""></p><h2 id="GetSomeData-AssessmentAnalysis-py"><a href="#GetSomeData-AssessmentAnalysis-py" class="headerlink" title="GetSomeData/AssessmentAnalysis.py"></a><code>GetSomeData/AssessmentAnalysis.py</code></h2><p><em>用于统计每个学校得到各个评估的次数</em></p><p>通过<code>pandas</code>简易处理下数据, 将数据保存为了 <code>schoolRank.xlsx</code>, 保存为<code>.xlsx</code>文件是为了方便使用<code>excel</code>进行操作(也可以自己保存为<code>.csv</code>文件来进行数据处理, 代码中已注释)</p><h3 id="schoolAssementCount-xlsx数据展示"><a href="#schoolAssementCount-xlsx数据展示" class="headerlink" title="schoolAssementCount.xlsx数据展示"></a>schoolAssementCount.xlsx数据展示</h3><p><img src="/images/2018-12-31-10-52-25.png" alt=""></p><p>同样可以通过<code>excel</code>来筛选查看数据</p><h2 id="GetSomeData-GetWordCloud-py"><a href="#GetSomeData-GetWordCloud-py" class="headerlink" title="GetSomeData/GetWordCloud.py"></a><code>GetSomeData/GetWordCloud.py</code></h2><p><em>以<code>schoolRank.xlsx</code>中的学校名来作词云, 实际就是按学校参加评估的总次数来画词云</em></p><p>该项目生成的词云如下:<br><img src="/images/2018-12-31-11-37-55.jpg" alt=""></p><h4 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h4><p><strong>注意1</strong><br><code>wordcloud</code> 不支持显示中文, 可以通过如下修改来支持中文:</p><ol><li>进入<code>python</code>根目录, 然后进入<code>Lib\site-packages\wordcloud</code></li><li>进入<code>C:\Windows\Fonts</code>目录下, 拷贝一个中文字库, 如<strong>华文新魏</strong>, 将其复制粘贴到<code>Lib\site-packages\wordcloud</code>目录下<br><img src="/images/2018-12-31-10-29-48.png" alt=""><br><img src="/images/2018-12-31-10-49-51.png" alt=""></li><li>打开<code>Lib\site-packages\wordcloud</code>目录下<code>wordcloud.py</code>, 找到如下这行代码<br><img src="/images/2018-12-31-10-28-31.png" alt=""><br>将代码改为对应拷入进来的字库名字, 如<strong>华文新魏</strong>的字库名字为<strong>STXINWEI.TTF</strong><br><img src="/images/2018-12-31-10-32-07.png" alt=""></li><li>至此解决中文乱码问题</li></ol><p><strong>注意2</strong><br><code>wordcloud</code>的<code>WordCloud</code>类中的<code>generate</code>方法是先对传进去的文字进行分词, 但是对<strong>中文的分词效果</strong>不太好, 建议先自己计算词频, 存放到字典中, 然后使用<code>generate_from_frequencies</code>来生成词云<br></p><figure class="highlight python"><figcaption><span>&#123;cmd</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> wordcloud <span class="keyword">import</span> WordCloud</span><br><span class="line"><span class="keyword">import</span> matplotlib <span class="keyword">as</span> mpl</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line">mpl.rcParams[<span class="string">'font.sans-serif'</span>] = [<span class="string">'SimHei'</span>]    <span class="comment"># 指定默认字体 SimHei为黑体</span></span><br><span class="line">mpl.rcParams[<span class="string">'axes.unicode_minus'</span>] = <span class="keyword">False</span>      <span class="comment"># 用来正常显示负号</span></span><br><span class="line"></span><br><span class="line">text = <span class="string">'清华大学清华大学北京大学北京大学暨南大学'</span></span><br><span class="line">textDic = &#123;</span><br><span class="line">    <span class="string">'清华大学'</span>: <span class="number">2</span>,</span><br><span class="line">    <span class="string">'北京大学'</span>: <span class="number">2</span>,</span><br><span class="line">    <span class="string">'暨南大学'</span>: <span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line">wc1 = WordCloud().generate(text)                        <span class="comment"># generate对中文分词效果不好</span></span><br><span class="line">wc2 = WordCloud().generate_from_frequencies(textDic)    <span class="comment"># 自己来计算词频, 改善效果</span></span><br><span class="line"></span><br><span class="line">plt.title(<span class="string">'generate生成的词云'</span>)</span><br><span class="line">plt.imshow(wc1, interpolation=<span class="string">"bilinear"</span>)</span><br><span class="line">plt.axis(<span class="string">"off"</span>)</span><br><span class="line"></span><br><span class="line">plt.figure()</span><br><span class="line">plt.title(<span class="string">'自己计算词频'</span>)</span><br><span class="line">plt.imshow(wc2, interpolation=<span class="string">"bilinear"</span>)</span><br><span class="line">plt.axis(<span class="string">"off"</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p></p><p><img src="/images/2018-12-31-10-48-00.png" alt=""></p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Tue Jan 01 2019 11:43:07 GMT+0800 (中国标准时间) --&gt;&lt;p&gt;&lt;img src=&quot;/images/2018-12-31-11-37-55.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/VonSdite/SchoolRank&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;&lt;strong&gt;源代码 github: https://github.com/VonSdite/SchoolRank&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Python" scheme="https://vonsdite.cn/categories/Python/"/>
    
      <category term="数据分析" scheme="https://vonsdite.cn/categories/Python/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/"/>
    
    
      <category term="Python" scheme="https://vonsdite.cn/tags/Python/"/>
    
      <category term="数据分析" scheme="https://vonsdite.cn/tags/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/"/>
    
      <category term="Wordcloud" scheme="https://vonsdite.cn/tags/Wordcloud/"/>
    
  </entry>
  
  <entry>
    <title>给CSDN每篇文章开头加入新博客地址</title>
    <link href="https://vonsdite.cn/posts/50946eb.html"/>
    <id>https://vonsdite.cn/posts/50946eb.html</id>
    <published>2018-12-28T10:50:58.000Z</published>
    <updated>2018-12-31T14:16:31.555Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Tue Jan 01 2019 11:43:07 GMT+0800 (中国标准时间) --><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>众所周知, <strong>CSDN</strong>有点越来越恶心, 广告也越来越多, 但是之前在<strong>CSDN</strong>发布的文章的作用不能这样就丢了呀。所以写了个脚本, 给<strong>CSDN</strong>中的每篇文章开头加入<strong>新博客网站的地址</strong>, 以此来引流。</p><p><strong>Github 仓库 =&gt; <a href="https://github.com/VonSdite/CSDN_AddSomethingToYourBlog" target="_blank" rel="noopener">https://github.com/VonSdite/CSDN_AddSomethingToYourBlog</a></strong></p><a id="more"></a><h1 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h1><h2 id="需要有Chrome"><a href="#需要有Chrome" class="headerlink" title="需要有Chrome"></a>需要有Chrome</h2><blockquote><ul><li>有Chrome浏览器</li><li>下载Chrome对应的<a href="http://npm.taobao.org/mirrors/chromedriver/" target="_blank" rel="noopener">ChromeDriver(点击找到对应版本下载)</a>, 并配置到环境变量中</li></ul></blockquote><h2 id="Python第三方库"><a href="#Python第三方库" class="headerlink" title="Python第三方库"></a>Python第三方库</h2><h3 id="1-selenium"><a href="#1-selenium" class="headerlink" title="1. selenium"></a>1. <code>selenium</code></h3><p>通过<code>pip install selenium</code> 安装</p><h3 id="2-configobj"><a href="#2-configobj" class="headerlink" title="2. configobj"></a>2. <code>configobj</code></h3><p>通过<code>pip install configobj</code> 安装</p><h1 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h1><ol><li><p>只需要在config.ini文件中配置好</p><blockquote><ul><li>你的CSDN账号</li><li>你的CSDN密码</li><li>将要在文章开头添加的</li></ul></blockquote></li><li><p>然后 运行<code>AddSomethingToYourBlog.py</code>即可</p></li></ol><h1 id="AddSomethingToYourBlog-py"><a href="#AddSomethingToYourBlog-py" class="headerlink" title="AddSomethingToYourBlog.py"></a>AddSomethingToYourBlog.py</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">from</span> configobj <span class="keyword">import</span> ConfigObj</span><br><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"></span><br><span class="line">conf = ConfigObj(<span class="string">'config.ini'</span>, encoding=<span class="string">'utf-8'</span>)</span><br><span class="line">text = conf[<span class="string">'CSDN'</span>][<span class="string">'text'</span>]</span><br><span class="line">username = conf[<span class="string">'CSDN'</span>][<span class="string">'username'</span>]</span><br><span class="line">password = conf[<span class="string">'CSDN'</span>][<span class="string">'password'</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 用来判断加载完没有</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">Wait</span><span class="params">(driver, text)</span>:</span></span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">not</span> text <span class="keyword">in</span> driver.execute_script(<span class="string">"return document.documentElement.outerHTML"</span>):</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">AddSomethingToYourBlog</span><span class="params">(text, username, password)</span>:</span></span><br><span class="line">    driver = webdriver.Chrome()</span><br><span class="line">    driver.get(<span class="string">'https://mp.csdn.net/postlist/'</span>)</span><br><span class="line">    driver.find_element_by_css_selector(<span class="string">'#app &gt; div &gt; div &gt; div &gt; div.main-login &gt; div.main-select &gt; ul &gt; li:nth-child(1) &gt; a'</span>).click()</span><br><span class="line">    Wait(driver, <span class="string">'手机号/邮箱/用户名'</span>)</span><br><span class="line">    driver.find_element_by_css_selector(<span class="string">'#all'</span>).send_keys(username)</span><br><span class="line">    driver.find_element_by_css_selector(<span class="string">'#password-number'</span>).send_keys(password)</span><br><span class="line">    driver.find_element_by_css_selector(<span class="string">'#app &gt; div &gt; div &gt; div &gt; div.main-login &gt; div.main-process-login &gt; form &gt; div &gt; div:nth-child(6) &gt; div &gt; button'</span>).click()</span><br><span class="line">    Wait(driver, <span class="string">'开始创作'</span>)</span><br><span class="line">    driver.find_element_by_css_selector(<span class="string">'#btnStart'</span>).click()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">        div = driver.find_elements_by_css_selector(<span class="string">'.article-list-item'</span>)</span><br><span class="line">        <span class="keyword">for</span> nth <span class="keyword">in</span> range(len(div)):</span><br><span class="line">            div[nth].find_element_by_css_selector(<span class="string">'div.list-item-title &gt; p &gt; a'</span>).click()</span><br><span class="line">            driver.switch_to.window(driver.window_handles[<span class="number">-1</span>])</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> <span class="string">'富文本编辑器'</span> <span class="keyword">in</span> driver.execute_script(<span class="string">"return document.documentElement.outerHTML"</span>):</span><br><span class="line">                driver.switch_to.frame(<span class="number">0</span>)</span><br><span class="line">                driver.execute_script(<span class="string">"document.getElementsByClassName('htmledit_views cke_editable cke_editable_themed cke_contents_ltr cke_show_borders')[0].innerHTML='&lt;h3&gt;&lt;span style=\"color:#f33b45;\"&gt;&lt;strong&gt;%s&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt;' + document.getElementsByClassName('htmledit_views cke_editable cke_editable_themed cke_contents_ltr cke_show_borders')[0].innerHTML"</span> % text)</span><br><span class="line">                driver.switch_to.default_content()</span><br><span class="line">                driver.find_element_by_css_selector(<span class="string">'#radChl &gt; option:nth-child(13)'</span>).click()</span><br><span class="line">                driver.find_element_by_css_selector(<span class="string">'#btnPublish'</span>).click()</span><br><span class="line">                Wait(driver, <span class="string">'&lt;div class="alert-container finished-box" id="alertSuccess" style="display: block;"&gt;'</span>)</span><br><span class="line">                driver.close()</span><br><span class="line">                driver.switch_to.window(driver.window_handles[<span class="number">-1</span>])</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                pre = driver.find_element_by_css_selector(<span class="string">'body &gt; div.app.app--light &gt; div.layout &gt; div.layout__panel.flex.flex--row &gt; div.layout__panel.flex.flex--column &gt; div.layout__panel.flex.flex--row &gt; div.layout__panel.layout__panel--editor &gt; div.editor &gt; pre'</span>)</span><br><span class="line">                driver.execute_script(<span class="string">"var div=document.createElement('div');div.className='cledit-section';div.innerHTML='&lt;span class=\"token url\"&gt;# %s \\n&lt;/span&gt;&lt;span class=\"lf\"&gt;&lt;br&gt;&lt;span class=\"hd-lf\" style=\"display: none\"&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=\"lf\"&gt;&lt;br&gt;&lt;span class=\"hd-lf\" style=\"display: none\"&gt;&lt;/span&gt;&lt;/span&gt;';arguments[0].insertBefore(div, document.getElementsByClassName('cledit-section')[0]);"</span> % text, pre)</span><br><span class="line"></span><br><span class="line">                driver.find_element_by_css_selector(<span class="string">'body &gt; div.app.app--light &gt; div.layout &gt; div.layout__panel.layout__panel--articletitle-bar &gt; div &gt; div.article-bar__user-box.flex.flex--row &gt; button'</span>).click()</span><br><span class="line">                Wait(driver, <span class="string">'保存为草稿'</span>)</span><br><span class="line">                driver.find_element_by_css_selector(<span class="string">'body &gt; div.app.app--light &gt; div.modal &gt; div &gt; div &gt; div.modal__button-bar &gt; button.button.btn-c-blue'</span>).click()</span><br><span class="line">                Wait(driver, <span class="string">'&lt;div id="alertSuccess" class="finished-box" style=""&gt;'</span>)</span><br><span class="line">                driver.close()</span><br><span class="line">                driver.switch_to.window(driver.window_handles[<span class="number">-1</span>])</span><br><span class="line">        next_page = driver.find_element_by_css_selector(<span class="string">'#pills-tabContent &gt; div.pagination-wrapper &gt; nav &gt; ul &gt; li:last-child &gt; a'</span>)</span><br><span class="line">        <span class="keyword">if</span> next_page.text == <span class="string">''</span>:</span><br><span class="line">            next_page.click()</span><br><span class="line">            time.sleep(<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            print(<span class="string">'全部文章已添加完成'</span>)</span><br><span class="line">            input(<span class="string">'按任意键退出...'</span>)</span><br><span class="line">            driver.quit()</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    AddSomethingToYourBlog(text, username, password)</span><br></pre></td></tr></table></figure><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Tue Jan 01 2019 11:43:07 GMT+0800 (中国标准时间) --&gt;&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;众所周知, &lt;strong&gt;CSDN&lt;/strong&gt;有点越来越恶心, 广告也越来越多, 但是之前在&lt;strong&gt;CSDN&lt;/strong&gt;发布的文章的作用不能这样就丢了呀。所以写了个脚本, 给&lt;strong&gt;CSDN&lt;/strong&gt;中的每篇文章开头加入&lt;strong&gt;新博客网站的地址&lt;/strong&gt;, 以此来引流。&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Github 仓库 =&amp;gt; &lt;a href=&quot;https://github.com/VonSdite/CSDN_AddSomethingToYourBlog&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://github.com/VonSdite/CSDN_AddSomethingToYourBlog&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Python" scheme="https://vonsdite.cn/categories/Python/"/>
    
      <category term="Selenium" scheme="https://vonsdite.cn/categories/Python/Selenium/"/>
    
    
      <category term="Python" scheme="https://vonsdite.cn/tags/Python/"/>
    
      <category term="Selenium" scheme="https://vonsdite.cn/tags/Selenium/"/>
    
  </entry>
  
  <entry>
    <title>(转) Copyleft和GFDL许可证</title>
    <link href="https://vonsdite.cn/posts/5ab63499.html"/>
    <id>https://vonsdite.cn/posts/5ab63499.html</id>
    <published>2018-12-27T12:21:49.000Z</published>
    <updated>2018-12-27T12:28:57.653Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Tue Jan 01 2019 11:43:08 GMT+0800 (中国标准时间) --><p>文章转自: 阮一峰 <a href="http://www.ruanyifeng.com/blog/2008/04/copyleft_and_gfdl.html" target="_blank" rel="noopener">Copyleft和GFDL许可证</a></p><h1 id="一、什么是copyleft"><a href="#一、什么是copyleft" class="headerlink" title="一、什么是copyleft"></a>一、什么是copyleft</h1><p>要讲<strong>copyleft</strong>, 必须先讲<strong>copyright</strong>。”版权”这个词copyright, 按照字面解释, 就是”复制的权利”(copy+right)。这就是说, 只要是有版权的作品, 都是不等随便复制的。</p><a id="more"></a><p>程序员<code>Richard Stallman</code>对此很不满, 认为这阻碍了创新, 不利于人们分享成果。因此, 他在上个世纪70年代创建了自由软件基金会FSF, 致力于智力成果的自由分享。</p><p>如果你希望自己的作品自由传播, 最简单的方法就是声明放弃版权, 使作品进入公共领域(public domain)。但是, 这样做有一个缺点, 就是你无法防止某些人对你的作品进行加工, 然后把加工的作品变为他们的私有财产, 进行出售。所以, 只有一个人放弃版权是不够的, 必须保证后面的所有使用者都不会将其据为己有。</p><p>因为这个原因, <code>Richard Stallman</code>设计出了copyleft的做法。所谓copyleft, 就是为作品附上一个许可证, 这个许可证基本上允许你对作品做任何事, 除了不能限制他人的自由, 即如果你对原作品修改后再发布, 那么你也必须使用同样的许可证。所以, 只要一个作品被copyleft了, 那么此后基于它的所有作品都会被copyleft。</p><p>copyleft这个词, 是对copyright的戏谑, 故意与copyright对立, 比如我们经常看到copyrighted materials, 现在就有了copylefted materials。这个词好像很难找到合适的中文译名。copyright的标志是正写的圈c<img src="/images/bg2008042302.gif.png" alt="">, copyleft的标志是反写的圈c<img src="/images/bg2008042303.gif.png" alt="">。</p><p>不过, 有一点需要注意, 虽然copyleft与copyright对立, 但是它是符合版权制度的, <strong>copyleft的作品也是有版权的</strong>。</p><h1 id="二、GPL和GFDL许可证"><a href="#二、GPL和GFDL许可证" class="headerlink" title="二、GPL和GFDL许可证"></a>二、GPL和GFDL许可证</h1><p>copyleft只是一个规范(paradigm), 只要符合这个规范, 就属于copyleft许可证。</p><p>Richard Stallman建立FSF以后, 主要提出了两个copyleft许可证: <code>GPL许可证</code>(GNU General Public License)和<code>GFDL许可证</code>(GNU Free Documentation License)。<strong>前者主要用于软件作品, 后者主要用于文字作品</strong>。</p><p>一旦一个文字作品采用了GFDL许可证, 那么他人就可以自由使用这个作品, 包括用于商业用途, 唯一的条件是所有衍生作品也必须采用GFDL许可证。</p><p>目前, 世界上最著名、最成功的使用GFDL的项目, 是维基百科wikipedia。这意味着, 如果你利用wikipedia的材料写成一本书, 那么你的这本书, 他人也可以自由使用。</p><h1 id="三、GFDL和CC的关系"><a href="#三、GFDL和CC的关系" class="headerlink" title="三、GFDL和CC的关系"></a>三、GFDL和CC的关系</h1><p>CC许可证中, 只有<strong>保留”相同方式共享”(share alike)权利的许可证</strong>, 才属于copyleft规范。也就是说, 只有”署名-相同方式共享”(cc-by-sa)<img src="/images/Creative%20Commons%20License.png" alt="">和”署名-非商业用途-相同方式共享”(cc-by-nc-sa)<img src="/images/2018-12-27-20-28-06.png" alt="">这两种许可证, 达到了这个标准。</p><p>当然, 这并不意味着其他cc许可证就不自由, 相反的, 单独的”署名”(cc-by)许可证<img src="/images/2018-12-27-20-28-19.png" alt="">提供的自由, 其实比前两种许可证都大, 因为它允许你将原作品变为私有财产。</p><p>一个有趣的问题是, GFDL和CC是不兼容的。虽然这两个许可证都允许自由使用作品, 但是你不能将它们混合在同一个作品里使用。</p><p>在基本精神上, GFDL其实等同于cc-by-sa(署名-相同方式共享)<img src="/images/Creative%20Commons%20License.png" alt="">, 但是两者都要求衍生作品必须使用与原作品相同的许可证, 这使得它们没有办法互换。唯一可以单向互换的是GFDL和cc-by(署名)许可证<img src="/images/2018-12-27-20-28-19.png" alt="">: 使用cc-by的文字, 可以加入使用GFDL的文章, 但是反过来就不行。</p><p>在现实中, Flickr采用的是CC许可证, 那么上面那些采用cc-by的照片, 是可以加入wikipedia的, 而那些采用cc-by-sa的照片勉强也可以加入, 因为wikipedia会对单张图片注明该照片采用cc-by-sa的许可证。但是, 使用cc-by-sa的文字就不能加入, 因为wikipedia对文字统一采用GFDL许可证。</p><p>2007年12月, 创作共用基金会决定修改cc-by-sa许可证, 允许将其并入GFDL。从此以后, wikipedia也就可以加入采用cc-by-sa的文字了。</p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Tue Jan 01 2019 11:43:08 GMT+0800 (中国标准时间) --&gt;&lt;p&gt;文章转自: 阮一峰 &lt;a href=&quot;http://www.ruanyifeng.com/blog/2008/04/copyleft_and_gfdl.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Copyleft和GFDL许可证&lt;/a&gt;&lt;/p&gt;&lt;h1 id=&quot;一、什么是copyleft&quot;&gt;&lt;a href=&quot;#一、什么是copyleft&quot; class=&quot;headerlink&quot; title=&quot;一、什么是copyleft&quot;&gt;&lt;/a&gt;一、什么是copyleft&lt;/h1&gt;&lt;p&gt;要讲&lt;strong&gt;copyleft&lt;/strong&gt;, 必须先讲&lt;strong&gt;copyright&lt;/strong&gt;。”版权”这个词copyright, 按照字面解释, 就是”复制的权利”(copy+right)。这就是说, 只要是有版权的作品, 都是不等随便复制的。&lt;/p&gt;
    
    </summary>
    
      <category term="License" scheme="https://vonsdite.cn/categories/License/"/>
    
    
      <category term="License" scheme="https://vonsdite.cn/tags/License/"/>
    
  </entry>
  
  <entry>
    <title>(转)创作公用许可证CC (Creative Commons licenses)</title>
    <link href="https://vonsdite.cn/posts/b16e73a9.html"/>
    <id>https://vonsdite.cn/posts/b16e73a9.html</id>
    <published>2018-12-27T11:32:50.000Z</published>
    <updated>2018-12-27T12:33:45.228Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Tue Jan 01 2019 11:43:08 GMT+0800 (中国标准时间) --><p>文章转自: 阮一峰 <a href="http://www.ruanyifeng.com/blog/2008/04/creative_commons_licenses.html" target="_blank" rel="noopener">谈谈创作共用许可证(Creative Commons licenses)</a></p><p><img src="/images/2018-12-27-19-37-59.png" alt=""></p><a id="more"></a><h1 id="一、创作共用许可证的起源"><a href="#一、创作共用许可证的起源" class="headerlink" title="一、创作共用许可证的起源"></a>一、创作共用许可证的起源</h1><p>自从<strong>版权制度(copyright)</strong>确立以后, 很多人感到, 虽然它保护了作者的利益, 但是却剥夺了使用者的自由。</p><p>除了费用以外, 一个主要的问题是, 通行的版权协议是一种限制性的协议, 就是说, 只有它明文许可你可以做的事, 你才能做, 否则就是侵权行为。这样不仅很不方便, 而且阻碍了作品的传播, 违背社会公共利益, 尤其是在新传播方式层出不穷的网络时代。</p><p>因此, 一些有识之士决定找到一种新的方法, 在版权制度的合法框架下, 使得人们可以自由使用他人的作品。这种新方法就是<strong>“开放内容许可证”(open content licenses)</strong>。简单说, 就是作者为自己的作品选择一种许可证一起发布, 然后这些许可证本身都是开放式协议, 就是说, 它只明文禁止使用者不能做的事, 除此以外, 可以随意使用这些作品。</p><p><strong>创作共用许可证(Creative Commons licenses, 简称cc)</strong>, 就是这样一种许可证。它是由成立于2001年的美国Creative Commons基金会, 在2002年12月16日提出的。</p><h1 id="二、为自己的作品选择许可证为什么是重要的"><a href="#二、为自己的作品选择许可证为什么是重要的" class="headerlink" title="二、为自己的作品选择许可证为什么是重要的"></a>二、为自己的作品选择许可证为什么是重要的</h1><p>我们经常可以在书籍、电影、或者其他地方, 看到<strong>“保留所有权利”(all rights reserved)</strong>这句话, 这是一般的版权协议(full copyright)的基本内容, 就是说, 所有与作品有关的权利都归版权持有人所有。</p><p>另一方面, 我们知道, <strong>公共领域(public domain)</strong>的作品是没有版权的, 所有权利都归使用者。因此, 普通的版权协议和公共领域, 正好是两个极端, 一个是保留所有权利, 另一个则是放弃所有权利。</p><p>创作共用许可证, 则是在两个极端之间。它<strong>只保留几种了权利</strong>(some rights reserved), 除此以外的权利全部放弃。</p><p>当你在网上(或者其他地方)发布自己的作品时, 如果允许他人自由使用, 那么最好选择一种许可证一起发布。因为, 如果你不同时发布许可证的话, 根据版权法, 你的作品就拥有完全的版权, 默认保留所有权利, 即便这不是你的意愿。<br><strong>比如说, </strong>你在github发布代码, 但你没发布许可证, 则默认保留所有权利。</p><p>从小处说, 这阻碍了作品的传播。从大处说, 这限制了他人的自由, 最终也会限制你自己的自由。所以, 尽可能为作品选择一种许可证一起发布, 这是很重要的。</p><h1 id="三、创作共用许可证的基本权利"><a href="#三、创作共用许可证的基本权利" class="headerlink" title="三、创作共用许可证的基本权利"></a>三、创作共用许可证的基本权利</h1><p>如果你希望在满足某些条件的前提下, 使用者可以实施如下行为, 那么你就可以考虑使用创作共用许可证。换言之, 下面这些权利是你自动让渡给使用者的:</p><blockquote><ul><li>复制作品;</li><li>散发作品;</li><li>公开展示或表演作品;</li><li>将作品完全一致地转化成另一种格式。</li></ul></blockquote><p>对于使用者来说, 虽然他免费拥有了这些权利, 但是必须遵守一些许可证设置的前提条件:</p><blockquote><ul><li>没有得到许可, 不得实施许可证中禁止的行为;</li><li>所有的复制件上, 都必须保留原始的版权说明和许可证的链接;</li><li>不得更改许可证的内容;</li><li>不得用技术手段限制其他人合法使用作品。</li></ul></blockquote><p>以上的权利和义务, 被称为<strong>创作共用许可证的基本权利(Baseline Rights)</strong>。</p><p>此外, 作品发布人还必须知道的是, 一旦选择了一种许可证, 并且公开发布以后, 就不能够收回了。这个许可证在整个版权保护期内, 对全世界的使用者都是有效的。(一个变通的方法是, 你可以在另一种许可证下, 发布作品的另一个版本。)</p><h1 id="四、创作共用许可证保留的权利"><a href="#四、创作共用许可证保留的权利" class="headerlink" title="四、创作共用许可证保留的权利"></a>四、创作共用许可证保留的权利</h1><p>使用创作共用许可证, 作者可以选择保留四种权利。</p><blockquote><p>1) <img src="/images/bg2008042202.gif.png" alt="">署名(Attribution, 简写为by) ：必须提到原作者。<br>2) <img src="/images/2018-12-27-19-50-48.png" alt="">非商业用途(Noncommercial, 简写为nc) ：不得用于盈利性目的。<br>3) <img src="/images/bg2008042204.gif.png" alt="">禁止演绎(No Derivative Works, 简写为nd) ：不得修改原作品。<br>4) <img src="/images/bg2008042205.gif.png" alt="">相同方式共享(Share Alike, 简写为sa) ：如果允许修改原作品, 那么必须使用相同的许可证发布。</p></blockquote><h1 id="五、创作共用许可证的种类"><a href="#五、创作共用许可证的种类" class="headerlink" title="五、创作共用许可证的种类"></a>五、创作共用许可证的种类</h1><p>上面4种权利, 你可以全部保留, 也可以全部放弃。运用排列组合知识, 我们知道一共有16种不同的组合, 每一种组合就对应一种不同的许可证。</p><p>这16种组合中, <strong>有5种是无效的：1种是4种权利都放弃</strong>, 这就等于是公共领域作品；另外4种是不能同时选择禁止演绎和相同方式共享, 这两种权利。</p><p>在剩下的11种组合中, 由于<strong>绝大多数人都要求保留署名权</strong>, 因此又可以排除5种。</p><p>最终只留下了6种组合, 绝大多数创作共用许可证都属于这6种组合之一：</p><blockquote><ol><li><img src="/images/bg2008042202.gif.png" alt="">署名(by license)</li><li><img src="/images/bg2008042202.gif.png" alt=""><img src="/images/2018-12-27-19-50-48.png" alt="">署名-非商业用途(by-nc license)</li><li><img src="/images/bg2008042202.gif.png" alt=""><img src="/images/bg2008042204.gif.png" alt="">署名-禁止演绎(by-nd license)</li><li><img src="/images/bg2008042202.gif.png" alt=""><img src="/images/2018-12-27-19-50-48.png" alt=""><img src="/images/bg2008042204.gif.png" alt="">署名-非商业用途-禁止演绎(by-nc-nd license)</li><li><img src="/images/bg2008042202.gif.png" alt=""><img src="/images/2018-12-27-19-50-48.png" alt=""><img src="/images/bg2008042205.gif.png" alt="">署名-非商业用途-相同方式共享(by-nc-sa license)</li><li><img src="/images/bg2008042202.gif.png" alt=""><img src="/images/bg2008042205.gif.png" alt="">署名-相同方式共享(by-sa license)</li></ol></blockquote><p>这6种组合中, 最宽松的是第一种署名许可证, 限制性最强的是第四种署名-非商业用途-禁止演绎许可证。</p><p>所以, 准确的说, 创作共用许可证不是一种许可证, 而是一系列许可证的总称。</p><h1 id="六、如何使用创作共用许可证"><a href="#六、如何使用创作共用许可证" class="headerlink" title="六、如何使用创作共用许可证"></a>六、如何使用创作共用许可证</h1><p>对于网上的作品, 你可以到这个网址<a href="http://creativecommons.org/license/" target="_blank" rel="noopener">http://creativecommons.org/license/</a>, 去进行选择, 根据网页上的提示, 一步步操作, 最后将系统给出的代码放置在网页上即可。</p><p>对于网下的作品, 你在选择好许可证后, 可以在作品上写下一段话：</p><blockquote><p>“本作品采用创作共用[插入许可证的描叙]许可证授权。如要查看许可证全文, 请访问如下网址[插入网址url]。”(This work is licensed under the Creative Commons [insert description] License. To view a copy of this license, visit [insert url].)</p></blockquote><p>需要注意的是, 对应不同的司法管辖区, 创作共用许可证有不同的地区版本。另外, 创作共用许可证一直在修订, 最新的是3.0版, 但是一部分地区还在使用2.5版。</p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Tue Jan 01 2019 11:43:08 GMT+0800 (中国标准时间) --&gt;&lt;p&gt;文章转自: 阮一峰 &lt;a href=&quot;http://www.ruanyifeng.com/blog/2008/04/creative_commons_licenses.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;谈谈创作共用许可证(Creative Commons licenses)&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;/images/2018-12-27-19-37-59.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="License" scheme="https://vonsdite.cn/categories/License/"/>
    
    
      <category term="License" scheme="https://vonsdite.cn/tags/License/"/>
    
  </entry>
  
  <entry>
    <title>GNU的三个协议条款GPL LGPL GFDL的介绍</title>
    <link href="https://vonsdite.cn/posts/a094f759.html"/>
    <id>https://vonsdite.cn/posts/a094f759.html</id>
    <published>2018-12-27T08:16:44.000Z</published>
    <updated>2018-12-27T12:19:38.498Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Tue Jan 01 2019 11:43:07 GMT+0800 (中国标准时间) --><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>GNU 包含3个协议条款:</p><blockquote><ul><li>GPL ：GNU通用公共许可证(GNU General Public License)</li><li>LGPL：GNU较宽松公共许可证 (GNU Lesser General Public License )</li><li>GFDL：GNU自由文档许可证(GNU Free Documentation License )。</li></ul></blockquote><a id="more"></a><h1 id="GPL"><a href="#GPL" class="headerlink" title="GPL"></a>GPL</h1><p>GNU通用公共许可证(GNU General Public License),<strong>允许软件商业化销售, 但不允许封闭源代码</strong>。</p><p>意思就是使用了<strong>GPL License</strong>就必须开源, 而且对遵循GPL的软件进行<strong>任何改动和/或再次开发并予以发布</strong>, 则必须也继承<code>GPL协议</code>, <strong>不允许封闭源代码</strong>。</p><h2 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h2><p><strong>比如</strong>, 只要软件A 引用/修改/衍生了 使用GPL协议的产品B, 软件A也必须使用GPL协议。 比如代码中引用了GPL协议的产品B代码中的一个类库, 这个软件A也必须使用GPL协议</p><h2 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h2><blockquote><ul><li>不适合商业软件</li><li>对代码有保密要求的部门</li></ul></blockquote><h1 id="LGPL"><a href="#LGPL" class="headerlink" title="LGPL"></a>LGPL</h1><p>GNU较宽松公共许可证(GNU Lesser General Public License), <strong>允许软件商业化销售, 但不允许封闭源代码</strong>。</p><p>意思就是使用了<strong>LGPL License</strong>就必须开源, 而且对遵循<code>LGPL</code>的软件进行<strong>任何改动和/或再次开发并予以发布</strong>, 则您的产品必须继承<code>LGPL协议</code>, <strong>不允许封闭源代码</strong>。但是如果您的程序对遵循<code>LGPL</code>的软件进行任何连接、调用而不是包含, 则允许封闭源代码。</p><h2 id="例子-1"><a href="#例子-1" class="headerlink" title="例子"></a>例子</h2><p>允许商业软件通过<strong>类库引用方式</strong>来使用<code>LGPL类库</code>的产品, 且不需要开源商业软件的代码(引用<code>LGPL类库</code>, 商业软件不需要使用<code>LGPL协议</code>, 所以可以封闭源代码)。</p><p>但是如果修改<code>LGPL协议</code>的代码或者衍生, 则所有修改的代码、涉及修改部分的额外代码和二次开发的代码都必须采用<code>LGPL协议</code>, 意思就是要开源。</p><h2 id="应用场景-1"><a href="#应用场景-1" class="headerlink" title="应用场景"></a>应用场景</h2><blockquote><ul><li><code>LGPL类库</code>适合作为第三方类库被商业软件引用</li><li>不适合希望以<code>LGPL协议</code>代码为基础, 通过修改和衍生的方式做二次开发的软件采用。</li></ul></blockquote><h1 id="GFDL"><a href="#GFDL" class="headerlink" title="GFDL"></a>GFDL</h1><p>GNU自由文档许可证(GNU Free Documentation License ), <strong>自由软件的通用版权认证协议</strong>。</p><p><code>GFDL</code>主要用于<strong>文字作品</strong>。</p><p>一旦一个文字作品采用了GFDL许可证, 那么他人就可以自由使用这个作品, 包括用于商业用途, 唯一的条件是<strong>所有衍生作品也必须采用GFDL许可证</strong>。</p><h2 id="应用场景-2"><a href="#应用场景-2" class="headerlink" title="应用场景"></a>应用场景</h2><p>目前, 世界上最著名、最成功的使用GFDL的项目, 是<strong>维基百科wikipedia</strong>。<br>这意味着, 如果你利用wikipedia的材料写成一本书, 那么你的这本书, 他人也可以自由使用。</p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Tue Jan 01 2019 11:43:07 GMT+0800 (中国标准时间) --&gt;&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;GNU 包含3个协议条款:&lt;/p&gt;&lt;blockquote&gt;&lt;ul&gt;&lt;li&gt;GPL ：GNU通用公共许可证(GNU General Public License)&lt;/li&gt;&lt;li&gt;LGPL：GNU较宽松公共许可证 (GNU Lesser General Public License )&lt;/li&gt;&lt;li&gt;GFDL：GNU自由文档许可证(GNU Free Documentation License )。&lt;/li&gt;&lt;/ul&gt;&lt;/blockquote&gt;
    
    </summary>
    
      <category term="License" scheme="https://vonsdite.cn/categories/License/"/>
    
    
      <category term="License" scheme="https://vonsdite.cn/tags/License/"/>
    
  </entry>
  
  <entry>
    <title>Ps 设置照片为一寸照片26mm*32mm/307*377像素</title>
    <link href="https://vonsdite.cn/posts/bd39d7be.html"/>
    <id>https://vonsdite.cn/posts/bd39d7be.html</id>
    <published>2018-12-21T05:30:16.000Z</published>
    <updated>2018-12-21T06:00:51.483Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Tue Jan 01 2019 11:43:07 GMT+0800 (中国标准时间) --><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>有时候手上有了证件照的原件, 但有时候比如需要照片为<strong>一寸照片</strong>, 即<code>26mm * 32mm</code>/ <code>307 * 377像素</code>, 此时可能就需要修改一下图片的尺寸。<br>下文介绍如何修改。<br><strong>吐槽一下：</strong> 打印店帮你改个尺寸还要收个10块钱, 还是自力更生吧。</p><a id="more"></a><h1 id="前提"><a href="#前提" class="headerlink" title="前提"></a>前提</h1><ul><li>有<strong>Photoshop</strong></li><li>有<strong>证件照</strong></li></ul><h1 id="修改操作"><a href="#修改操作" class="headerlink" title="修改操作"></a>修改操作</h1><p>如下是要修改的证件照, 当前的图像大小信息如图, 显然还不是<code>26mm * 32mm</code>/ <code>307 * 377像素</code><br><img src="/images/2018-12-21-13-46-00.png" alt=""><br><img src="/images/2018-12-21-13-36-37.jpg" alt=""></p><h2 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h2><ol><li>点击<strong>裁剪工具</strong></li><li>点击<strong>大小和分辨率</strong></li><li>设置宽度为 <strong>2.6厘米</strong>, 高度为 <strong>3.2厘米</strong>, 分辨率不填, 然后点击<strong>确定</strong></li><li><p>通过<strong>方向键</strong>来移动裁剪框, 移动至合适位置裁剪即可(<strong>PS</strong><em>本文例子图基本不需要移动了, 尺寸已基本是2.6*3.2</em>)<br><img src="/images/2018-12-21-13-41-07.png" alt=""><br><img src="/images/2018-12-21-13-41-58.png" alt=""></p></li><li><p>裁剪后, 通过快捷键<code>ctrl+alt+I</code>查看图像大小, 如图。还未达到我们的要求, 此时只需要<strong>将分辨率设置为300</strong>就可以完成我们的需求了<br><img src="/images/2018-12-21-13-47-40.png" alt=""><br><img src="/images/2018-12-21-13-50-22.png" alt=""></p></li></ol><h2 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h2><ol><li>通过快捷键<code>ctrl+alt+I</code>查看图像大小, 然后设置<strong>分辨率为300</strong><br><img src="/images/2018-12-21-13-51-41.png" alt=""></li><li>接着设置<strong>宽度像素</strong>为<strong>307</strong>, 此时<strong>一般高度像素还没达到我们的要求</strong>, 只是例子图片比较特殊, 接下来只要<strong>裁剪下高度</strong>即可完成要求<br><img src="/images/2018-12-21-13-52-35.png" alt=""></li><li>点击<strong>裁剪工具</strong></li><li>点击<strong>大小和分辨率</strong><br><img src="/images/2018-12-21-13-41-07.png" alt=""><br><img src="/images/2018-12-21-13-41-58.png" alt=""></li><li>设置宽度为 <strong>2.6厘米</strong>, 高度为 <strong>3.2厘米</strong>, 分辨率不填, 然后点击<strong>确定</strong></li><li>通过<strong>方向键</strong>来移动裁剪框, 移动至合适位置裁剪即可最终完成我们的要求</li></ol><h1 id="关于分辨率-300"><a href="#关于分辨率-300" class="headerlink" title="关于分辨率 300"></a>关于分辨率 300</h1><p>照片的冲洗的话, <strong>分辨率DPI</strong>就要设置为<strong>300或更高</strong>, 网络上传照片72DPI已经可以看得清了</p><blockquote><p><strong>DPI（Dots Per Inchd, 每英寸点数）</strong>是一个量度单位d, 用于点阵数码影像d, 指每一英寸长度中d, 取样、可显示或输出点的数目。<br>DPI是打印机、鼠标等设备分辨率的度量单位。是衡量打印机打印精度的主要参数之一d, 一般来说d, DPI值越高d, 表明打印机的打印精度越高。<br>DPI是指每英寸的像素d, 也就是扫描精度。DPI越低d, 扫描的清晰度越低d, 由于受网络传输速度的影响d, web上使用的图片都是72dpid, 但是冲洗照片不能使用这个参数d, 必须是300dpi或者更高350dpi。例如要冲洗4<em>6英寸的照片d, 扫描精度必须是300dpid, 那么文件尺寸应该是(4</em>300)<em>(6</em>300)=1200像素*1800像素。</p></blockquote><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Tue Jan 01 2019 11:43:07 GMT+0800 (中国标准时间) --&gt;&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;有时候手上有了证件照的原件, 但有时候比如需要照片为&lt;strong&gt;一寸照片&lt;/strong&gt;, 即&lt;code&gt;26mm * 32mm&lt;/code&gt;/ &lt;code&gt;307 * 377像素&lt;/code&gt;, 此时可能就需要修改一下图片的尺寸。&lt;br&gt;下文介绍如何修改。&lt;br&gt;&lt;strong&gt;吐槽一下：&lt;/strong&gt; 打印店帮你改个尺寸还要收个10块钱, 还是自力更生吧。&lt;/p&gt;
    
    </summary>
    
      <category term="Photoshop" scheme="https://vonsdite.cn/categories/Photoshop/"/>
    
    
      <category term="Photoshop" scheme="https://vonsdite.cn/tags/Photoshop/"/>
    
  </entry>
  
  <entry>
    <title>Linux umask的使用</title>
    <link href="https://vonsdite.cn/posts/11eb8483.html"/>
    <id>https://vonsdite.cn/posts/11eb8483.html</id>
    <published>2018-12-10T01:46:42.000Z</published>
    <updated>2018-12-31T14:18:00.202Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Tue Jan 01 2019 11:43:07 GMT+0800 (中国标准时间) --><h1 id="umask"><a href="#umask" class="headerlink" title="umask"></a>umask</h1><p>在Linux系统下, 创建一个文件/目录时, 系统都会给它赋予一个默认的权限, 这个默认权限就是<code>umask</code>设置的。<br><code>umask</code>设置了用户创建文件的默认权限, 它与<code>chmod</code>的效果刚好相反, <code>umask</code>设置的是权限的<strong>反码</strong>, 也叫作<strong>预设权限(权限掩码)</strong></p><a id="more"></a><p><br><br>你的系统管理员必须要为你设置一个合理的 <code>umask</code>值, 以确保你创建的文件具有所希望的缺省权限, 防止其他非同组用户对你的文件具有写权限。在已经登录之后, 可以按照个人的偏好使用<code>umask</code>命令来改变文件创建的缺省权限。相应的改变<strong>直到退出该shell</strong>或<strong>使用另外的<code>umask</code>命令之前</strong>一直有效。</p><p><br></p><p>一般来说, <code>umask</code>命令是在<code>/etc/profile</code>文件中设置的, 每个用户在登录时都会引用这个文件, 所以如果希望改变所有用户的<code>umask</code>, 可以在该文件中加入相应的条目。如果希望永久 性地设置自己的<code>umask</code>值, 那么就把它放在自己<code>$HOME</code>目录下的<code>.profile</code>或<code>.bash_profile</code>文件中。</p><h1 id="umask的使用"><a href="#umask的使用" class="headerlink" title="umask的使用"></a>umask的使用</h1><p><code>umask</code>命令允许你设定文件创建时的缺省模式, 对应每一类用户(文件属主、同组用户、其他用户)存在一个相应的<code>umask</code>值中的数字。</p><p><strong>注意:</strong></p><ul><li><strong>对于文件</strong>来说, 权限数字的<strong>最大值是6</strong>。因为系统不允许你在创建一个文本文件时就赋予<strong>它执行权限</strong>, 必须在创建后用<code>chmod</code>命令增加这一权限。</li><li><strong>目录</strong>允许设置<strong>执行权限</strong>, 这样针对目录来说, <code>umask</code>中各个数字最大可以到<strong>7</strong></li></ul><h2 id="查看当前umask"><a href="#查看当前umask" class="headerlink" title="查看当前umask"></a>查看当前umask</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">umask</span></span><br><span class="line">0002             <span class="comment"># 只看后四位</span></span><br><span class="line">$ <span class="built_in">umask</span> -S</span><br><span class="line">u=rwx,g=rwx,o=rwx <span class="comment"># 字符形式查看</span></span><br></pre></td></tr></table></figure><h2 id="设置umask"><a href="#设置umask" class="headerlink" title="设置umask"></a>设置umask</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">umask</span> nnn   <span class="comment"># nnn为 000-777</span></span><br></pre></td></tr></table></figure><p><img src="/images/2018-12-10-10-38-46.png" alt=""></p><h2 id="计算umask的值"><a href="#计算umask的值" class="headerlink" title="计算umask的值"></a>计算umask的值</h2><p>设置umask值后, 怎么快速得到创建文件的权限呢</p><h3 id="减法"><a href="#减法" class="headerlink" title="减法"></a>减法</h3><p>一种是使用<strong>减法</strong>。<br>记住文件权限最大值是6, 目录权限最大值是7,<br>当你<code>umask 002</code>, 那么<strong>文件</strong>得到的权限就是 664, 因为 6-0=6 6-0=6 6-2=4, <strong>目录</strong>则是775</p><h3 id="异或"><a href="#异或" class="headerlink" title="异或"></a>异或</h3><p>另一种就是<strong>异或</strong>。<br>记住文件权限最大值6的二进制是110, 目录权限最大值7的二进制是111,<br>当你<code>umask 002</code>, 那么<strong>文件</strong>得到的权限就是 664, 因为<strong>二进制异或</strong>: 000^110=110、000^110=110、010^110=100, 所以权限就是664, <strong>目录</strong>则是775</p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Tue Jan 01 2019 11:43:07 GMT+0800 (中国标准时间) --&gt;&lt;h1 id=&quot;umask&quot;&gt;&lt;a href=&quot;#umask&quot; class=&quot;headerlink&quot; title=&quot;umask&quot;&gt;&lt;/a&gt;umask&lt;/h1&gt;&lt;p&gt;在Linux系统下, 创建一个文件/目录时, 系统都会给它赋予一个默认的权限, 这个默认权限就是&lt;code&gt;umask&lt;/code&gt;设置的。&lt;br&gt;&lt;code&gt;umask&lt;/code&gt;设置了用户创建文件的默认权限, 它与&lt;code&gt;chmod&lt;/code&gt;的效果刚好相反, &lt;code&gt;umask&lt;/code&gt;设置的是权限的&lt;strong&gt;反码&lt;/strong&gt;, 也叫作&lt;strong&gt;预设权限(权限掩码)&lt;/strong&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Linux" scheme="https://vonsdite.cn/categories/Linux/"/>
    
      <category term="Command" scheme="https://vonsdite.cn/categories/Linux/Command/"/>
    
    
      <category term="Linux" scheme="https://vonsdite.cn/tags/Linux/"/>
    
      <category term="Command" scheme="https://vonsdite.cn/tags/Command/"/>
    
      <category term="umask" scheme="https://vonsdite.cn/tags/umask/"/>
    
  </entry>
  
  <entry>
    <title>Python 提升python速度</title>
    <link href="https://vonsdite.cn/posts/2a5aa04e.html"/>
    <id>https://vonsdite.cn/posts/2a5aa04e.html</id>
    <published>2018-12-08T12:25:14.000Z</published>
    <updated>2018-12-09T04:27:00.558Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Tue Jan 01 2019 11:43:07 GMT+0800 (中国标准时间) --><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>可以使用 <strong>Cython</strong>, <strong>PyPy</strong>提升 python的速度</p><a id="more"></a><h1 id="Cython"><a href="#Cython" class="headerlink" title="Cython"></a>Cython</h1><p><strong>Cython</strong>是让Python脚本<strong>支持C语言扩展</strong>的编译器, Cython能够将Python+C混合编码的.pyx脚本转换为C代码, 主要用于优化Python脚本性能或Python调用C函数库。由于Python固有的性能差的问题, 用C扩展Python成为提高Python性能常用方法, Cython算是较为常见的一种扩展方式。</p><p>推荐文章:<br><a href="https://www.jianshu.com/p/fc5025094912" target="_blank" rel="noopener">https://www.jianshu.com/p/fc5025094912</a><br><a href="https://www.cnblogs.com/yafengabc/p/6130849.html" target="_blank" rel="noopener">https://www.cnblogs.com/yafengabc/p/6130849.html</a><br><a href="https://baijiahao.baidu.com/s?id=1606135207446878267&amp;wfr=spider&amp;for=pc" target="_blank" rel="noopener">https://baijiahao.baidu.com/s?id=1606135207446878267&amp;wfr=spider&amp;for=pc</a><br><a href="https://baijiahao.baidu.com/s?id=1606135207446878267&amp;wfr=spider&amp;for=pc" target="_blank" rel="noopener">https://baijiahao.baidu.com/s?id=1606135207446878267&amp;wfr=spider&amp;for=pc</a></p><h1 id="CPython-与-PyPy"><a href="#CPython-与-PyPy" class="headerlink" title="CPython 与 PyPy"></a>CPython 与 PyPy</h1><p>CPython: 是用<strong>C语言实现Python</strong>, 是目前应用最广泛的解释器。最新的语言特性都是在这个上面先实现的, 基本包含了所有第三方库支持, 但是CPython有几个缺陷, 一是全局锁使Python在多线程效能上表现不佳, 二是CPython无法支持JIT（即时编译）, 导致其执行速度不及Java和Javascipt等语言。于是出现了Pypy。</p><p>Pypy: 是用<strong>Python自身实现的解释器</strong>。针对CPython的缺点进行了各方面的改良, 性能得到很大的提升。最重要的一点就是Pypy集成了JIT。但是, Pypy无法支持官方的C/Python API, 导致无法使用例如Numpy, Scipy等重要的第三方库。这也是现在Pypy没有被广泛使用的原因吧。</p><h2 id="PyPy与CPython的不同"><a href="#PyPy与CPython的不同" class="headerlink" title="PyPy与CPython的不同"></a>PyPy与CPython的不同</h2><ul><li>CPython是使用解释执行的方式, 这样的实现方式在性能上是很凄惨的。</li><li>而PyPy使用了JIT(即时编译)技术, 在性能上得到了提升。</li></ul><h2 id="Python的解释器"><a href="#Python的解释器" class="headerlink" title="Python的解释器:"></a>Python的解释器:</h2><ol><li><p>由于Python是动态编译的语言, 和C/C++、Java或者Kotlin等静态语言不同, 它是在运行时一句一句代码地边编译边执行的, 而Java是提前将高级语言编译成了JVM字节码, 运行时直接通过JVM和机器打交道, 所以进行密集计算时运行速度远高于动态编译语言。</p></li><li><p>PyPy, 它使用了JIT（即时编译）技术, 混合了动态编译和静态编译的特性, <strong>仍然是一句一句编译源代码</strong>, 但是会将翻译过的代码缓存起来以降低性能损耗。相对于静态编译代码, 即时编译的代码可以处理延迟绑定并增强安全性。绝大部分 Python代码都可以在PyPy下运行, 但是PyPy和CPython有一些是不同的。</p></li></ol><h1 id="一个速度比较例子"><a href="#一个速度比较例子" class="headerlink" title="一个速度比较例子"></a>一个速度比较例子</h1><p>使用<strong>C++</strong>和<strong>Python</strong>分别实现目录大小计算的算法。<br>其中的要求是:</p><ul><li>计算<strong>单个</strong>目录大小, 返回一个<strong>数值</strong></li><li>计算<strong>目录及目录下所有子目录</strong>大小, 返回一个<strong>map表</strong></li></ul><h2 id="结果比较"><a href="#结果比较" class="headerlink" title="结果比较"></a>结果比较</h2><h3 id="Python的运行结果"><a href="#Python的运行结果" class="headerlink" title="Python的运行结果"></a>Python的运行结果</h3><p><img src="/images/2018-12-09-11-59-04.png" alt=""><br><img src="/images/2018-12-09-12-01-01.png" alt=""><br>单纯看Python的结果, 可以看出来<strong>线程池</strong>的优化大大提高了递归计算的速度, 将近提升了<strong>10倍</strong>的效率</p><h3 id="C-的运行结果"><a href="#C-的运行结果" class="headerlink" title="C++的运行结果"></a>C++的运行结果</h3><p><img src="/images/2018-12-09-12-13-14.png" alt=""><br>通过比较<strong>单个目录大小</strong>计算, C++比Python快了近<strong>5.6倍</strong><br>而<strong>计算所有目录大小</strong>, C++比Python快了近<strong>5.6倍</strong></p><h3 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h3><p><strong>线程池</strong>的池子大小设为<strong>5</strong>。<br>计算的目录都是<code>E:\1Code\Repositories</code>, <strong>5.8G的大小</strong><br>为了避免<strong>全局线程池</strong>影响到其他函数的运行效率, 线程池实现的方法 <strong>单独运行</strong><br>两者的实现算法都是<strong>一致</strong>的</p><h4 id="Python实现了4种方法"><a href="#Python实现了4种方法" class="headerlink" title="Python实现了4种方法"></a>Python实现了<strong>4种</strong>方法</h4><ul><li>第一种是使用<code>os.walk</code>的生成器来遍历计算单个目录大小, 名为<code>get_dir_size</code></li><li>第二种是<strong>递归计算</strong>单个目录大小, 名为<code>get_dir_size_recursive</code></li><li>第三种是<strong>递归计算</strong>目录及目录下所有子目录大小, 名为<code>get_all_dir_size</code></li><li>第四种是<strong>线程池</strong>+<strong>递归计算</strong>目录及目录下所有子目录大小, 名为<code>get_all_dir_size_thread</code></li></ul><h4 id="C-实现了2种方法"><a href="#C-实现了2种方法" class="headerlink" title="C++实现了2种方法"></a>C++实现了<strong>2种</strong>方法</h4><ul><li>第一种是<strong>递归计算</strong>单个目录大小, 名为<code>SimpleGetDirectorySizeRecursive</code></li><li>第二种是<strong>递归计算</strong>目录及目录下所有子目录大小, 名为<code>SimpleGetDirectorySize</code></li></ul><h2 id="Python的实现"><a href="#Python的实现" class="headerlink" title="Python的实现"></a>Python的实现</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> timeit</span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">import</span> threadpool</span><br><span class="line"><span class="keyword">from</span> os.path <span class="keyword">import</span> join, getsize, isdir, isfile</span><br><span class="line"></span><br><span class="line"><span class="comment"># os.walk加列表推导式求单个目录的大小</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_dir_size</span><span class="params">(dir)</span>:</span></span><br><span class="line">    size = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> root, dirs, files <span class="keyword">in</span> os.walk(dir):</span><br><span class="line">        size += sum([getsize(join(root, name)) <span class="keyword">for</span> name <span class="keyword">in</span> files])</span><br><span class="line">    <span class="keyword">return</span> size</span><br><span class="line"></span><br><span class="line"><span class="comment"># 递归求单个目录的大小</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_dir_size_recursive</span><span class="params">(dir)</span>:</span></span><br><span class="line">    size = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> f <span class="keyword">in</span> os.listdir(dir):</span><br><span class="line">        ff = join(dir, f)</span><br><span class="line">        <span class="keyword">if</span> isdir(ff):</span><br><span class="line">            size += get_dir_size_recursive(ff)</span><br><span class="line">        <span class="keyword">elif</span> isfile(ff):</span><br><span class="line">            size += getsize(ff)</span><br><span class="line">    <span class="keyword">return</span> size</span><br><span class="line"></span><br><span class="line"><span class="comment"># 去掉目录中的 `:` `\` `/`</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">clear_path_format</span><span class="params">(dir)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> dir.replace(<span class="string">':'</span>, <span class="string">''</span>).replace(<span class="string">'\\'</span>, <span class="string">''</span>).replace(<span class="string">'/'</span>, <span class="string">''</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 递归求目录及所有子目录的大小</span></span><br><span class="line">dir_dict = dict()</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_all_dir_size</span><span class="params">(parent_dirs, dir)</span>:</span></span><br><span class="line">    dir_dict[clear_path_format(dir)] = <span class="number">0</span></span><br><span class="line">    size = <span class="number">0</span></span><br><span class="line">    parent_dirs.append(clear_path_format(dir))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> f <span class="keyword">in</span> os.listdir(dir):</span><br><span class="line">        ff = join(dir, f)</span><br><span class="line">        <span class="keyword">if</span> isdir(ff):</span><br><span class="line">            get_all_dir_size(parent_dirs, ff)</span><br><span class="line">        <span class="keyword">elif</span> isfile(ff):</span><br><span class="line">            size += getsize(ff)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> size &gt; <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">for</span> path <span class="keyword">in</span> parent_dirs:</span><br><span class="line">            dir_dict[path] += size</span><br><span class="line"></span><br><span class="line">dir_dict_thread = dict()</span><br><span class="line">pool = threadpool.ThreadPool(<span class="number">5</span>)</span><br><span class="line">mutex = threading.Lock()</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_all_dir_size_thread</span><span class="params">(parent_dirs, dir)</span>:</span></span><br><span class="line">    size = <span class="number">0</span></span><br><span class="line">    parent_dirs.append(clear_path_format(dir))</span><br><span class="line">    <span class="keyword">for</span> f <span class="keyword">in</span> os.listdir(dir):</span><br><span class="line">        ff = join(dir, f)</span><br><span class="line">        <span class="keyword">if</span> isdir(ff):</span><br><span class="line">            mutex.acquire()</span><br><span class="line">            pool.putRequest(</span><br><span class="line">                        threadpool.makeRequests(</span><br><span class="line">                            get_all_dir_size_thread,</span><br><span class="line">                            [</span><br><span class="line">                                (</span><br><span class="line">                                    (parent_dirs.copy(), ff),</span><br><span class="line">                                    <span class="keyword">None</span></span><br><span class="line">                                )</span><br><span class="line">                            ]</span><br><span class="line">                        )[<span class="number">0</span>]</span><br><span class="line">                    )</span><br><span class="line">            mutex.release()</span><br><span class="line">        <span class="keyword">elif</span> isfile(ff):</span><br><span class="line">            size += getsize(ff)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> size &gt; <span class="number">0</span>:</span><br><span class="line">        mutex.acquire()</span><br><span class="line">        <span class="keyword">for</span> path <span class="keyword">in</span> parent_dirs:</span><br><span class="line">            dir_dict_thread.setdefault(path, <span class="number">0</span>)</span><br><span class="line">            dir_dict_thread[path] += size</span><br><span class="line">        mutex.release()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    dir = <span class="string">r'E:\1Code\Repositories'</span></span><br><span class="line">    print(<span class="string">'Test "%s" size   ////// just python'</span> %  dir)</span><br><span class="line"></span><br><span class="line">    start = timeit.default_timer()</span><br><span class="line">    size = get_dir_size(dir)</span><br><span class="line">    end = timeit.default_timer()</span><br><span class="line">    print(<span class="string">'get_dir_size:            %fGB-&gt; use time: %fs'</span> % (size / (<span class="number">1</span> &lt;&lt; <span class="number">30</span>), end-start))</span><br><span class="line"></span><br><span class="line">    start = timeit.default_timer()</span><br><span class="line">    size = get_dir_size_recursive(dir)</span><br><span class="line">    end = timeit.default_timer()</span><br><span class="line">    print(<span class="string">'get_dir_size_recursive:  %fGB -&gt; use time: %fs'</span> % (size / (<span class="number">1</span> &lt;&lt; <span class="number">30</span>), end - start))</span><br><span class="line"></span><br><span class="line">    start = timeit.default_timer()</span><br><span class="line">    get_all_dir_size([], dir)</span><br><span class="line">    end = timeit.default_timer()</span><br><span class="line">    print(<span class="string">'get_all_dir_size:        %fGB -&gt; use time: %fs'</span> % (dir_dict[clear_path_format(dir)] / (<span class="number">1</span> &lt;&lt; <span class="number">30</span>), end - start))</span><br><span class="line"></span><br><span class="line">    start = timeit.default_timer()</span><br><span class="line">    get_all_dir_size_thread([], dir)</span><br><span class="line">    pool.wait()</span><br><span class="line">    end = timeit.default_timer()</span><br><span class="line">    print(<span class="string">'get_all_dir_size_thread: %fGB -&gt; use time: %fs'</span> % (dir_dict_thread[clear_path_format(dir)] / (<span class="number">1</span> &lt;&lt; <span class="number">30</span>), end - start))</span><br></pre></td></tr></table></figure><h2 id="C-的实现"><a href="#C-的实现" class="headerlink" title="C++的实现"></a>C++的实现</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unordered_map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;windows.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;time.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> UNICODE</span></span><br><span class="line"><span class="keyword">typedef</span> wstring tstring;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">else</span></span></span><br><span class="line"><span class="keyword">typedef</span> <span class="built_in">string</span> tstring;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> POOL_SIZE 5</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">unordered_map</span>&lt;tstring, ULONGLONG&gt; mapDirSize_simple;<span class="comment">// 递归的map表</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 根据文件的高32位和低32位求出文件的大小</span></span><br><span class="line"><span class="function">ULONGLONG <span class="title">GetFileSize</span><span class="params">(ULONGLONG high, ULONGLONG low)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> ((high &lt;&lt; <span class="number">32</span>) | low);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 去掉中所有的 "/"  "\" ":" </span></span><br><span class="line"><span class="function">tstring <span class="title">ClearPathFormat</span><span class="params">(tstring path)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">size_t</span> pos = <span class="number">0</span>;</span><br><span class="line">tstring clear1 = TEXT(<span class="string">"/"</span>);</span><br><span class="line">tstring clear2 = TEXT(<span class="string">"\\"</span>);</span><br><span class="line">tstring clear3 = TEXT(<span class="string">":"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> ((pos = path.find(clear1)) != tstring::npos)</span><br><span class="line">&#123;</span><br><span class="line">path.replace(pos, clear1.length(), <span class="string">""</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> ((pos = path.find(clear2)) != tstring::npos)</span><br><span class="line">&#123;</span><br><span class="line">path.replace(pos, clear2.length(), <span class="string">""</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> ((pos = path.find(clear3)) != tstring::npos)</span><br><span class="line">&#123;</span><br><span class="line">path.replace(pos, clear3.length(), <span class="string">""</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> path;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 简单递归得目录大小</span></span><br><span class="line"><span class="function">ULONGLONG <span class="title">SimpleGetDirectorySize</span><span class="params">(<span class="built_in">vector</span>&lt;tstring&gt; vecParentPath, tstring lpDirName)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">ULONGLONG nDirSize = <span class="number">0</span>;<span class="comment">// 文件夹大小</span></span><br><span class="line">tstring strDirName = lpDirName;</span><br><span class="line">strDirName += TEXT(<span class="string">"/*.*"</span>);<span class="comment">// 目录名字</span></span><br><span class="line"></span><br><span class="line">HANDLE hFile;</span><br><span class="line">WIN32_FIND_DATA pNextInfo;</span><br><span class="line">hFile = FindFirstFile(strDirName.c_str(), &amp;pNextInfo);</span><br><span class="line"><span class="keyword">if</span> (INVALID_HANDLE_VALUE == hFile)</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">vecParentPath.push_back(ClearPathFormat(lpDirName));</span><br><span class="line"><span class="keyword">while</span> (FindNextFile(hFile, &amp;pNextInfo))</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">// 跳过 "." ".." 两个目录</span></span><br><span class="line"><span class="keyword">if</span> (!<span class="built_in">strcmp</span>(pNextInfo.cFileName, <span class="string">"."</span>) || !<span class="built_in">strcmp</span>(pNextInfo.cFileName, <span class="string">".."</span>))</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (pNextInfo.dwFileAttributes &amp; FILE_ATTRIBUTE_DIRECTORY)</span><br><span class="line">&#123;<span class="comment">// 目录, 递归下去加</span></span><br><span class="line">tstring strTmp = lpDirName;</span><br><span class="line">strTmp += TEXT(<span class="string">"/"</span>);</span><br><span class="line">strTmp += pNextInfo.cFileName;</span><br><span class="line">SimpleGetDirectorySize(vecParentPath, strTmp.c_str());</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;<span class="comment">// 文件</span></span><br><span class="line">nDirSize += GetFileSize(pNextInfo.nFileSizeHigh, pNextInfo.nFileSizeLow);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (nDirSize)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> parent : vecParentPath)</span><br><span class="line">&#123;</span><br><span class="line">mapDirSize_simple[parent] += nDirSize;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> mapDirSize_simple[ClearPathFormat(lpDirName)];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 递归得单个目录大小</span></span><br><span class="line"><span class="function">ULONGLONG <span class="title">SimpleGetDirectorySizeRecursive</span><span class="params">(LPCSTR lpDirName)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">ULONGLONG nDirSize = <span class="number">0</span>;<span class="comment">// 文件夹大小</span></span><br><span class="line">TCHAR strDirName[<span class="number">1000</span>];</span><br><span class="line"><span class="built_in">memset</span>(strDirName, <span class="number">0</span>, <span class="keyword">sizeof</span>(strDirName));</span><br><span class="line"><span class="built_in">memcpy</span>(strDirName, lpDirName, <span class="built_in">strlen</span>(lpDirName));</span><br><span class="line"><span class="built_in">strcat</span>(strDirName, TEXT(<span class="string">"/*.*"</span>));</span><br><span class="line"></span><br><span class="line">HANDLE hFile;</span><br><span class="line">WIN32_FIND_DATA pNextInfo;</span><br><span class="line">hFile = FindFirstFile(strDirName, &amp;pNextInfo);</span><br><span class="line"><span class="keyword">if</span> (INVALID_HANDLE_VALUE == hFile)</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (FindNextFile(hFile, &amp;pNextInfo))</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">// 跳过 "." ".." 两个目录</span></span><br><span class="line"><span class="keyword">if</span> (!<span class="built_in">strcmp</span>(pNextInfo.cFileName, <span class="string">"."</span>) || !<span class="built_in">strcmp</span>(pNextInfo.cFileName, <span class="string">".."</span>))</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (pNextInfo.dwFileAttributes &amp; FILE_ATTRIBUTE_DIRECTORY)</span><br><span class="line">&#123;<span class="comment">// 目录, 递归下去加</span></span><br><span class="line">TCHAR strTmp[<span class="number">1000</span>];</span><br><span class="line"><span class="built_in">memset</span>(strTmp, <span class="number">0</span>, <span class="keyword">sizeof</span>(strTmp));</span><br><span class="line"><span class="built_in">memcpy</span>(strTmp, lpDirName, <span class="built_in">strlen</span>(lpDirName));</span><br><span class="line"><span class="built_in">strcat</span>(strTmp, TEXT(<span class="string">"/"</span>));</span><br><span class="line"><span class="built_in">strcat</span>(strTmp, pNextInfo.cFileName);</span><br><span class="line">nDirSize += SimpleGetDirectorySizeRecursive(strTmp);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;<span class="comment">// 文件</span></span><br><span class="line">nDirSize += GetFileSize(pNextInfo.nFileSizeHigh, pNextInfo.nFileSizeLow);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> nDirSize;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">tstring strDirName = TEXT(<span class="string">"E:\\1Code\\Repositories"</span>);</span><br><span class="line"></span><br><span class="line">LARGE_INTEGER t1, t2, tc;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 递归计算单个目录大小</span></span><br><span class="line">QueryPerformanceFrequency(&amp;tc);</span><br><span class="line">QueryPerformanceCounter(&amp;t1);</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; strDirName &lt;&lt; <span class="string">" size: "</span> &lt;&lt; (<span class="keyword">double</span>)SimpleGetDirectorySizeRecursive(strDirName.c_str()) / (<span class="number">1</span> &lt;&lt; <span class="number">30</span>) &lt;&lt; <span class="string">"GB"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">QueryPerformanceCounter(&amp;t2);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"Use Time:%fs\n"</span>, (t2.QuadPart - t1.QuadPart)*<span class="number">1.0</span> / tc.QuadPart);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 递归计算目录大小</span></span><br><span class="line">QueryPerformanceFrequency(&amp;tc);</span><br><span class="line">QueryPerformanceCounter(&amp;t1);</span><br><span class="line"><span class="built_in">vector</span>&lt;tstring&gt; vecEmpty;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; strDirName &lt;&lt; <span class="string">" size: "</span>&lt;&lt; (<span class="keyword">double</span>)SimpleGetDirectorySize(vecEmpty, strDirName.c_str()) / (<span class="number">1</span> &lt;&lt; <span class="number">30</span>) &lt;&lt; <span class="string">"GB"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">QueryPerformanceCounter(&amp;t2);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"Use Time:%fs\n"</span>, (t2.QuadPart - t1.QuadPart)*<span class="number">1.0</span> / tc.QuadPart);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Tue Jan 01 2019 11:43:07 GMT+0800 (中国标准时间) --&gt;&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;可以使用 &lt;strong&gt;Cython&lt;/strong&gt;, &lt;strong&gt;PyPy&lt;/strong&gt;提升 python的速度&lt;/p&gt;
    
    </summary>
    
      <category term="Python" scheme="https://vonsdite.cn/categories/Python/"/>
    
      <category term="Cython" scheme="https://vonsdite.cn/categories/Python/Cython/"/>
    
    
      <category term="Python" scheme="https://vonsdite.cn/tags/Python/"/>
    
      <category term="Cython" scheme="https://vonsdite.cn/tags/Cython/"/>
    
  </entry>
  
  <entry>
    <title>Hexo Next 使用Valine作评论系统</title>
    <link href="https://vonsdite.cn/posts/c7d98860.html"/>
    <id>https://vonsdite.cn/posts/c7d98860.html</id>
    <published>2018-12-07T07:29:23.000Z</published>
    <updated>2018-12-31T14:16:11.799Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Tue Jan 01 2019 11:43:07 GMT+0800 (中国标准时间) --><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>之前博客使用的是<strong>gitalk</strong>作为评论系统, 但是对于<strong>强迫症</strong>, 看到Github的<code>Recent activity</code>满满的一列<code>Issue</code>, 内心着实有点小难受。</p><p>如果想使用<strong>gitalk</strong>作为评论系统的可以看<strong><a href="/posts/dd07da63.html">Hexo Next 加入评论功能gitalk</a></strong><br>而想使用<strong>Valine</strong>作为评论系统, 则可以参考此文</p><a id="more"></a><h1 id="Valine"><a href="#Valine" class="headerlink" title="Valine"></a>Valine</h1><blockquote><p>Valine 诞生于2017年8月7日, 是一款基于<code>Leancloud</code>的快速、简洁且高效的<strong>无后端</strong>评论系统。<br>理论上支持但不限于静态博客, 目前已有<code>Hexo</code>、<code>Jekyll</code>、<code>Typecho</code>、<code>Hugo</code> 等博客程序在使用Valine。</p></blockquote><h2 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h2><ul><li>快速</li><li>安全</li><li>Emoji 😉</li><li>无后端实现</li><li>MarkDown 全语法支持</li><li>轻量易用(~15kb gzipped)</li><li>文章阅读量统计 v1.2.0+</li></ul><h1 id="使用Valine"><a href="#使用Valine" class="headerlink" title="使用Valine"></a>使用Valine</h1><p>可以上Valine的官网的<a href="https://valine.js.org/quickstart.html" target="_blank" rel="noopener">快速开始</a>查看如何配置</p><p>以下专门介绍<code>Hexo</code>如何配置, <strong>Next</strong>主题是<strong><code>6.0</code>版本</strong>以上的</p><p>因为Valine是基于<strong>LeanCloud</strong>的, 所以我们<a href="/posts/c7d98860.html#注册Leancloud并创建应用">先注册Leancloud并创建应用</a></p><h2 id="注册Leancloud并创建应用"><a href="#注册Leancloud并创建应用" class="headerlink" title="注册Leancloud并创建应用"></a>注册Leancloud并创建应用</h2><ol><li><p>首先, 前往Leancloud官网<a href="https://leancloud.cn/dashboard/login.html#/signup" target="_blank" rel="noopener">leancloud.cn</a>进行注册, 并登陆。</p></li><li><p>点击<strong>创建应用</strong><br><img src="/images/2018-11-19-10-45-53.png" alt=""></p></li><li><p>输入应用的名称(随便起都行), 选择<strong>开发版</strong>, 点击<strong>创建</strong><br><img src="/images/2018-11-19-10-46-38.png" alt=""></p></li><li><p>创建成功后点击右上角的设置<strong>小齿轮</strong><br><img src="/images/2018-11-19-10-48-23.png" alt=""></p></li><li><p>创建后点击<strong>设置</strong>-点击<strong>应用Key</strong>-获取<strong>App ID</strong>和<strong>App Key</strong><br><img src="/images/2018-11-19-10-55-18.png" alt=""></p></li><li><p>将获取到的<strong>App ID</strong>和<strong>App Key</strong>设置到<code>Next</code>主题配置文件<code>_config.yml</code>, 并设置<code>enable: true</code><br><em>配置文件已存在这个配置, 只要把 id 和 key 加上去就好了</em></p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">valine:</span></span><br><span class="line">  <span class="comment"># When enable is set to be true, leancloud_visitors is recommended to be closed for the re-initialization problem within different leancloud adk version.</span></span><br><span class="line"><span class="attr">  enable:</span> <span class="literal">true</span> </span><br><span class="line"><span class="attr">  appid:</span> <span class="string">&lt;&lt;your</span> <span class="string">app</span> <span class="string">id&gt;&gt;</span>                    <span class="comment"># your leancloud application appid</span></span><br><span class="line"><span class="attr">  appkey:</span> <span class="string">&lt;&lt;your</span> <span class="string">app</span> <span class="string">key&gt;&gt;</span>                  <span class="comment"># your leancloud application appkey</span></span><br><span class="line"><span class="attr">  notify:</span> <span class="literal">false</span>                             <span class="comment"># mail notifier , https://github.com/xCss/Valine/wiki</span></span><br><span class="line"><span class="attr">  verify:</span> <span class="literal">false</span>                             <span class="comment"># Verification code</span></span><br><span class="line"><span class="attr">  placeholder:</span> <span class="string">ヾﾉ≧∀≦)o来啊,</span> <span class="string">快活啊!</span>        <span class="comment"># comment box placeholder</span></span><br><span class="line"><span class="attr">  avatar:</span> <span class="string">mm</span>                                <span class="comment"># gravatar style</span></span><br><span class="line"><span class="attr">  guest_info:</span> <span class="string">nick,mail,link</span>                <span class="comment"># custom comment header</span></span><br><span class="line"><span class="attr">  pageSize:</span> <span class="number">10</span>                              <span class="comment"># pagination size</span></span><br><span class="line"><span class="attr">  visitor:</span> <span class="literal">false</span>                            <span class="comment"># leancloud-counter-security is not supported for now. When visitor is set to be true, appid and appkey are recommended to be the same as leancloud_visitors' for counter compatibility. Article reading statistic https://valine.js.org/visitor.html</span></span><br></pre></td></tr></table></figure></li><li><p>点击<strong>安全中心</strong>, 填写自己博客对应的域名（注意协议、域名和端口号需严格一致）<br><img src="/images/2018-11-19-10-57-01.png" alt=""></p></li></ol><p>至此完成配置, <code>hexo s</code>就可以看到文章评论区了</p><h2 id="开启评论回复邮箱提醒"><a href="#开启评论回复邮箱提醒" class="headerlink" title="开启评论回复邮箱提醒"></a>开启评论回复邮箱提醒</h2><p>参考<a href="https://github.com/xCss/Valine/wiki/Valine-%E8%AF%84%E8%AE%BA%E7%B3%BB%E7%BB%9F%E4%B8%AD%E7%9A%84%E9%82%AE%E4%BB%B6%E6%8F%90%E9%86%92%E8%AE%BE%E7%BD%AE" target="_blank" rel="noopener">评论系统中的邮件提醒设置</a></p><p>Valine的配置要设置 <code>notify: true</code> 和 <code>verify: true</code><br></p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">valine:</span></span><br><span class="line">  <span class="comment"># When enable is set to be true, leancloud_visitors is recommended to be closed for the re-initialization problem within different leancloud adk version.</span></span><br><span class="line"><span class="attr">  enable:</span> <span class="literal">true</span> </span><br><span class="line"><span class="attr">  appid:</span> <span class="string">&lt;&lt;your</span> <span class="string">app</span> <span class="string">id&gt;&gt;</span>                    <span class="comment"># your leancloud application appid</span></span><br><span class="line"><span class="attr">  appkey:</span> <span class="string">&lt;&lt;your</span> <span class="string">app</span> <span class="string">key&gt;&gt;</span>                  <span class="comment"># your leancloud application appkey</span></span><br><span class="line"><span class="attr">  notify:</span> <span class="literal">true</span>                              <span class="comment"># mail notifier , https://github.com/xCss/Valine/wiki</span></span><br><span class="line"><span class="attr">  verify:</span> <span class="literal">true</span>                              <span class="comment"># Verification code</span></span><br><span class="line"><span class="attr">  placeholder:</span> <span class="string">ヾﾉ≧∀≦)o来啊,</span> <span class="string">快活啊!</span>        <span class="comment"># comment box placeholder</span></span><br><span class="line"><span class="attr">  avatar:</span> <span class="string">mm</span>                                <span class="comment"># gravatar style</span></span><br><span class="line"><span class="attr">  guest_info:</span> <span class="string">nick,mail,link</span>                <span class="comment"># custom comment header</span></span><br><span class="line"><span class="attr">  pageSize:</span> <span class="number">10</span>                              <span class="comment"># pagination size</span></span><br><span class="line"><span class="attr">  visitor:</span> <span class="literal">false</span>                            <span class="comment"># leancloud-counter-security is not supported for now. When visitor is set to be true, appid and appkey are recommended to be the same as leancloud_visitors' for counter compatibility. Article reading statistic https://valine.js.org/visitor.html</span></span><br></pre></td></tr></table></figure><p></p><h2 id="评论数据管理"><a href="#评论数据管理" class="headerlink" title="评论数据管理"></a>评论数据管理</h2><p>由于Valine 是<strong>无后端</strong>评论系统, 所以也就没有开发评论数据管理功能。请<strong>自行登录Leancloud应用管理</strong>。</p><p>具体步骤：<code>登录&gt;选择你创建的应用&gt;存储&gt;选择Class Comment</code>, 然后就可以尽情的发挥你的权利啦(～￣▽￣)～</p><blockquote><p>当然, 你也可以配合 <a href="https://github.com/panjunwen" target="_blank" rel="noopener">@panjunwen</a> 开发的 <a href="https://github.com/panjunwen/Valine-Admin" target="_blank" rel="noopener">Valine-Admin</a> 进行评论数据管理</p></blockquote><h1 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h1><p>如果你某一篇文章不想有评论功能, 你可以在文章的<code>font-matter</code>中加入 <code>comments: false</code></p><p><img src="/images/2018-12-05-21-19-05.png" alt=""></p><p>因为加入了评论功能, 在<code>标签</code>、<code>分类</code>页面都会有个评论区, 所以应到相应页面的<code>index.md</code>的<code>font-matter</code>中加入 <code>comments: false</code></p><p><strong>并修改站点目录下<code>scaffolds</code>的<code>page.md</code>模板</strong>, 因为创建<code>page</code>都会<strong>使用到该模板</strong>, 而页面不需要有评论区<br></p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">title:</span> <span class="string">&#123;&#123;</span> <span class="string">title</span> <span class="string">&#125;&#125;</span></span><br><span class="line"><span class="attr">date:</span> <span class="string">&#123;&#123;</span> <span class="string">date</span> <span class="string">&#125;&#125;</span></span><br><span class="line"><span class="attr">type:</span> </span><br><span class="line"><span class="attr">comments:</span> <span class="literal">false</span></span><br><span class="line"><span class="meta">---</span></span><br></pre></td></tr></table></figure><p></p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Tue Jan 01 2019 11:43:07 GMT+0800 (中国标准时间) --&gt;&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;之前博客使用的是&lt;strong&gt;gitalk&lt;/strong&gt;作为评论系统, 但是对于&lt;strong&gt;强迫症&lt;/strong&gt;, 看到Github的&lt;code&gt;Recent activity&lt;/code&gt;满满的一列&lt;code&gt;Issue&lt;/code&gt;, 内心着实有点小难受。&lt;/p&gt;&lt;p&gt;如果想使用&lt;strong&gt;gitalk&lt;/strong&gt;作为评论系统的可以看&lt;strong&gt;&lt;a href=&quot;/posts/dd07da63.html&quot;&gt;Hexo Next 加入评论功能gitalk&lt;/a&gt;&lt;/strong&gt;&lt;br&gt;而想使用&lt;strong&gt;Valine&lt;/strong&gt;作为评论系统, 则可以参考此文&lt;/p&gt;
    
    </summary>
    
      <category term="Hexo" scheme="https://vonsdite.cn/categories/Hexo/"/>
    
      <category term="Next" scheme="https://vonsdite.cn/categories/Hexo/Next/"/>
    
    
      <category term="Hexo" scheme="https://vonsdite.cn/tags/Hexo/"/>
    
      <category term="Next" scheme="https://vonsdite.cn/tags/Next/"/>
    
      <category term="Valine" scheme="https://vonsdite.cn/tags/Valine/"/>
    
  </entry>
  
  <entry>
    <title>python os模块 关于文件/目录常用的函数使用方法</title>
    <link href="https://vonsdite.cn/posts/b288b56b.html"/>
    <id>https://vonsdite.cn/posts/b288b56b.html</id>
    <published>2018-12-06T09:29:48.000Z</published>
    <updated>2018-12-31T14:16:02.643Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Tue Jan 01 2019 11:43:07 GMT+0800 (中国标准时间) --><h1 id="常用的文件-目录函数"><a href="#常用的文件-目录函数" class="headerlink" title="常用的文件/目录函数"></a>常用的文件/目录函数</h1><table><thead><tr><th>函数名</th><th>使用方法</th></tr></thead><tbody><tr><td>os.getcwd()</td><td>返回当前工作目录</td></tr><tr><td>os.chdir(path)</td><td>改变工作目录</td></tr><tr><td>os.listdir(path=’.’)</td><td>列举指定目录中的文件名(‘.’表示当前目录, ‘..’表示上一级目录)</td></tr><tr><td>os.mkdir(path)</td><td>创建单层目录, 如该目录已存在抛出异常</td></tr><tr><td>os.makedirs(path)</td><td>递归创建多层目录, 如该目录已存在抛出异常, 注意: ‘E:\a\b’和’E:\a\c’并不会冲突</td></tr><tr><td>os.remove(path)</td><td>删除文件</td></tr><tr><td>os.rmdir(path)</td><td>删除单层目录, 如该目录非空则抛出异常</td></tr><tr><td>os.removedirs(path)</td><td>递归删除目录, 从子目录到父目录逐层尝试删除, 遇到目录非空则抛出异常</td></tr><tr><td>os.rename(old, new)</td><td>将文件old重命名为new</td></tr><tr><td>os.system(command)</td><td>运行系统的shell命令</td></tr><tr><td>os.walk(top)</td><td>遍历top路径以下所有的子目录, 返回一个三元组: (路径, [包含目录], [包含文件])</td></tr></tbody></table><a id="more"></a><h1 id="os-path模块关于路径常用的函数"><a href="#os-path模块关于路径常用的函数" class="headerlink" title="os.path模块关于路径常用的函数"></a><code>os.path</code>模块关于路径常用的函数</h1><table><thead><tr><th>函数名</th><th>使用方法</th></tr></thead><tbody><tr><td>os.path.basename(path)</td><td>去掉目录路径，单独返回文件名</td></tr><tr><td>os.path.dirname(path)</td><td>去掉文件名，单独返回目录路径</td></tr><tr><td>os.path.join(path1[, path2[, …]])</td><td>将path1, path2各部分组合成一个路径名</td></tr><tr><td>os.path.split(path)</td><td>分割文件名与路径，返回(f_path, f_name)元组。如果完全使用目录，它也会将最后一个目录作为文件名分离，且不会判断文件或者目录是否存在</td></tr><tr><td>os.path.splitext(path)</td><td>分离文件名与扩展名，返回(f_name, f_extension)元组</td></tr><tr><td>os.path.getsize(file)</td><td>返回指定文件的尺寸，单位是字节</td></tr><tr><td>os.path.getatime(file)</td><td>返回指定文件最近的访问时间（浮点型秒数，可用time模块的gmtime()或localtime()函数换算）</td></tr><tr><td>os.path.getctime(file)</td><td>返回指定文件的创建时间（浮点型秒数，可用time模块的gmtime()或localtime()函数换算）</td></tr><tr><td>os.path.getmtime(file)</td><td>返回指定文件最新的修改时间（浮点型秒数，可用time模块的gmtime()或localtime()函数换算）</td></tr></tbody></table><h2 id="以下返回值为-True-或-False"><a href="#以下返回值为-True-或-False" class="headerlink" title="以下返回值为 True 或 False"></a>以下返回值为 <code>True</code> 或 <code>False</code></h2><table><thead><tr><th>函数名</th><th>使用方法</th></tr></thead><tbody><tr><td>os.path.exists(path)</td><td>判断指定路径（目录或文件）是否存在</td></tr><tr><td>os.path.isabs(path)</td><td>判断指定路径是否为绝对路径</td></tr><tr><td>os.path.isdir(path)</td><td>判断指定路径是否存在且是一个目录</td></tr><tr><td>os.path.isfile(path)</td><td>判断指定路径是否存在且是一个文件</td></tr><tr><td>os.path.islink(path)</td><td>判断指定路径是否存在且是一个符号链接</td></tr><tr><td>os.path.ismount(path)</td><td>判断指定路径是否存在且是一个挂载点</td></tr><tr><td>os.path.samefile(path1, paht2)</td><td>判断path1和path2两个路径是否指向同一个文件</td></tr></tbody></table><h1 id="支持跨平台的路径定义"><a href="#支持跨平台的路径定义" class="headerlink" title="支持跨平台的路径定义"></a>支持跨平台的路径定义</h1><table><thead><tr><th>函数名</th><th>使用方法</th></tr></thead><tbody><tr><td>os.curdir</td><td>指代当前目录(‘.’)</td></tr><tr><td>os.pardir</td><td>指代上一级目录(‘..’)</td><td></td></tr><tr><td>os.sep</td><td>输出操作系统特定的路径分隔符(Win下为’\‘, Linux下为’/‘)</td></tr><tr><td>os.linesep</td><td>当前平台使用的行终止符(Win下为’\r\n’, Linux下为’\n’)</td></tr><tr><td>os.name</td><td>指代当前使用的操作系统(包括: ‘posix’,</td><td>‘nt’, ‘mac’, ‘os2’, ‘ce’, ‘java’)</td></tr></tbody></table><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Tue Jan 01 2019 11:43:07 GMT+0800 (中国标准时间) --&gt;&lt;h1 id=&quot;常用的文件-目录函数&quot;&gt;&lt;a href=&quot;#常用的文件-目录函数&quot; class=&quot;headerlink&quot; title=&quot;常用的文件/目录函数&quot;&gt;&lt;/a&gt;常用的文件/目录函数&lt;/h1&gt;&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;函数名&lt;/th&gt;&lt;th&gt;使用方法&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;os.getcwd()&lt;/td&gt;&lt;td&gt;返回当前工作目录&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;os.chdir(path)&lt;/td&gt;&lt;td&gt;改变工作目录&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;os.listdir(path=’.’)&lt;/td&gt;&lt;td&gt;列举指定目录中的文件名(‘.’表示当前目录, ‘..’表示上一级目录)&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;os.mkdir(path)&lt;/td&gt;&lt;td&gt;创建单层目录, 如该目录已存在抛出异常&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;os.makedirs(path)&lt;/td&gt;&lt;td&gt;递归创建多层目录, 如该目录已存在抛出异常, 注意: ‘E:\a\b’和’E:\a\c’并不会冲突&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;os.remove(path)&lt;/td&gt;&lt;td&gt;删除文件&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;os.rmdir(path)&lt;/td&gt;&lt;td&gt;删除单层目录, 如该目录非空则抛出异常&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;os.removedirs(path)&lt;/td&gt;&lt;td&gt;递归删除目录, 从子目录到父目录逐层尝试删除, 遇到目录非空则抛出异常&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;os.rename(old, new)&lt;/td&gt;&lt;td&gt;将文件old重命名为new&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;os.system(command)&lt;/td&gt;&lt;td&gt;运行系统的shell命令&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;os.walk(top)&lt;/td&gt;&lt;td&gt;遍历top路径以下所有的子目录, 返回一个三元组: (路径, [包含目录], [包含文件])&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
    
    </summary>
    
      <category term="Python" scheme="https://vonsdite.cn/categories/Python/"/>
    
    
      <category term="Python" scheme="https://vonsdite.cn/tags/Python/"/>
    
      <category term="Python os" scheme="https://vonsdite.cn/tags/Python-os/"/>
    
  </entry>
  
  <entry>
    <title>python 性能测试工具</title>
    <link href="https://vonsdite.cn/posts/e1d29b4a.html"/>
    <id>https://vonsdite.cn/posts/e1d29b4a.html</id>
    <published>2018-12-06T03:33:39.000Z</published>
    <updated>2018-12-31T14:15:50.113Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Tue Jan 01 2019 11:43:07 GMT+0800 (中国标准时间) --><h1 id="timeit"><a href="#timeit" class="headerlink" title="timeit"></a>timeit</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> timeit</span><br><span class="line">print(timeit.timeit(stmt=<span class="string">"[i for i in range(1000)]"</span>, number=<span class="number">100000</span>))         <span class="comment"># 传入的是字符串表达式</span></span><br><span class="line"><span class="comment"># 输出: </span></span><br><span class="line"><span class="comment"># 3.0182870961591375</span></span><br></pre></td></tr></table></figure><p><code>timeit</code>只输出被测试代码的总运行时间, 单位为秒, 没有详细的统计.<br><a href="/posts/6218c1b6.html">timeit的详细介绍点这里</a></p><a id="more"></a><h1 id="profile-cProfile"><a href="#profile-cProfile" class="headerlink" title="profile / cProfile"></a>profile / cProfile</h1><p><code>profile</code>: <strong>纯Python</strong>实现的性能测试模块, 接口和<code>cProfile</code>一样<br><code>cProfile</code>: <strong>c语言</strong>实现的性能测试模块, 接口和<code>profile</code>一样</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> profile</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">fun</span><span class="params">()</span>:</span></span><br><span class="line"><span class="meta">... </span>    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">100000</span>):</span><br><span class="line"><span class="meta">... </span>            a = i * i</span><br><span class="line">...</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>profile.run(<span class="string">'fun()'</span>)</span><br><span class="line">         <span class="number">5</span> function calls <span class="keyword">in</span> <span class="number">0.016</span> seconds</span><br><span class="line"></span><br><span class="line">   Ordered by: standard name</span><br><span class="line"></span><br><span class="line">   ncalls  tottime  percall  cumtime  percall filename:lineno(function)</span><br><span class="line">        <span class="number">1</span>    <span class="number">0.000</span>    <span class="number">0.000</span>    <span class="number">0.016</span>    <span class="number">0.016</span> :<span class="number">0</span>(<span class="keyword">exec</span>)</span><br><span class="line">        <span class="number">1</span>    <span class="number">0.000</span>    <span class="number">0.000</span>    <span class="number">0.000</span>    <span class="number">0.000</span> :<span class="number">0</span>(setprofile)</span><br><span class="line">        <span class="number">1</span>    <span class="number">0.016</span>    <span class="number">0.016</span>    <span class="number">0.016</span>    <span class="number">0.016</span> &lt;stdin&gt;:<span class="number">1</span>(fun)</span><br><span class="line">        <span class="number">1</span>    <span class="number">0.000</span>    <span class="number">0.000</span>    <span class="number">0.016</span>    <span class="number">0.016</span> &lt;string&gt;:<span class="number">1</span>(&lt;module&gt;)</span><br><span class="line">        <span class="number">1</span>    <span class="number">0.000</span>    <span class="number">0.000</span>    <span class="number">0.016</span>    <span class="number">0.016</span> profile:<span class="number">0</span>(fun())</span><br><span class="line">        <span class="number">0</span>    <span class="number">0.000</span>             <span class="number">0.000</span>          profile:<span class="number">0</span>(profiler)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> cProfile</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">fun</span><span class="params">()</span>:</span></span><br><span class="line"><span class="meta">... </span>    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">100000</span>):</span><br><span class="line"><span class="meta">... </span>            a = i * i</span><br><span class="line">...</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>cProfile.run(<span class="string">'fun()'</span>)</span><br><span class="line">         <span class="number">4</span> function calls <span class="keyword">in</span> <span class="number">0.005</span> seconds</span><br><span class="line"></span><br><span class="line">   Ordered by: standard name</span><br><span class="line"></span><br><span class="line">   ncalls  tottime  percall  cumtime  percall filename:lineno(function)</span><br><span class="line">        <span class="number">1</span>    <span class="number">0.005</span>    <span class="number">0.005</span>    <span class="number">0.005</span>    <span class="number">0.005</span> &lt;stdin&gt;:<span class="number">1</span>(fun)</span><br><span class="line">        <span class="number">1</span>    <span class="number">0.000</span>    <span class="number">0.000</span>    <span class="number">0.005</span>    <span class="number">0.005</span> &lt;string&gt;:<span class="number">1</span>(&lt;module&gt;)</span><br><span class="line">        <span class="number">1</span>    <span class="number">0.000</span>    <span class="number">0.000</span>    <span class="number">0.005</span>    <span class="number">0.005</span> &#123;built-<span class="keyword">in</span> method builtins.<span class="keyword">exec</span>&#125;</span><br><span class="line">        <span class="number">1</span>    <span class="number">0.000</span>    <span class="number">0.000</span>    <span class="number">0.000</span>    <span class="number">0.000</span> &#123;method <span class="string">'disable'</span> of <span class="string">'_lsprof.Profiler'</span> objects&#125;</span><br></pre></td></tr></table></figure><h2 id="解释"><a href="#解释" class="headerlink" title="解释"></a>解释</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> cProfile</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> re</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>cProfile.run(<span class="string">'re.compile("foo|bar")'</span>)</span><br><span class="line">         <span class="number">199</span> function calls (<span class="number">194</span> primitive calls) <span class="keyword">in</span> <span class="number">0.000</span> seconds</span><br><span class="line"></span><br><span class="line">   Ordered by: standard name</span><br><span class="line"></span><br><span class="line">   ncalls  tottime  percall  cumtime  percall filename:lineno(function)</span><br><span class="line">        <span class="number">1</span>    <span class="number">0.000</span>    <span class="number">0.000</span>    <span class="number">0.000</span>    <span class="number">0.000</span> &lt;string&gt;:<span class="number">1</span>(&lt;module&gt;)</span><br><span class="line">        <span class="number">4</span>    <span class="number">0.000</span>    <span class="number">0.000</span>    <span class="number">0.000</span>    <span class="number">0.000</span> enum.py:<span class="number">265</span>(__call__)</span><br><span class="line">        <span class="number">4</span>    <span class="number">0.000</span>    <span class="number">0.000</span>    <span class="number">0.000</span>    <span class="number">0.000</span> enum.py:<span class="number">515</span>(__new__)</span><br><span class="line">        <span class="number">2</span>    <span class="number">0.000</span>    <span class="number">0.000</span>    <span class="number">0.000</span>    <span class="number">0.000</span> enum.py:<span class="number">801</span>(__and__)</span><br><span class="line">        <span class="number">1</span>    <span class="number">0.000</span>    <span class="number">0.000</span>    <span class="number">0.000</span>    <span class="number">0.000</span> re.py:<span class="number">231</span>(compile)</span><br><span class="line">        <span class="number">1</span>    <span class="number">0.000</span>    <span class="number">0.000</span>    <span class="number">0.000</span>    <span class="number">0.000</span> re.py:<span class="number">286</span>(_compile)</span><br><span class="line">        <span class="number">1</span>    <span class="number">0.000</span>    <span class="number">0.000</span>    <span class="number">0.000</span>    <span class="number">0.000</span> sre_compile.py:<span class="number">223</span>(_compile_charset)</span><br><span class="line">        <span class="number">1</span>    <span class="number">0.000</span>    <span class="number">0.000</span>    <span class="number">0.000</span>    <span class="number">0.000</span> sre_compile.py:<span class="number">250</span>(_optimize_charset)</span><br><span class="line">        <span class="number">1</span>    <span class="number">0.000</span>    <span class="number">0.000</span>    <span class="number">0.000</span>    <span class="number">0.000</span> sre_compile.py:<span class="number">414</span>(_get_literal_prefix)</span><br><span class="line">        <span class="number">1</span>    <span class="number">0.000</span>    <span class="number">0.000</span>    <span class="number">0.000</span>    <span class="number">0.000</span> sre_compile.py:<span class="number">441</span>(_get_charset_prefix)</span><br><span class="line">        <span class="number">1</span>    <span class="number">0.000</span>    <span class="number">0.000</span>    <span class="number">0.000</span>    <span class="number">0.000</span> sre_compile.py:<span class="number">482</span>(_compile_info)</span><br><span class="line">        <span class="number">2</span>    <span class="number">0.000</span>    <span class="number">0.000</span>    <span class="number">0.000</span>    <span class="number">0.000</span> sre_compile.py:<span class="number">539</span>(isstring)</span><br><span class="line">        <span class="number">1</span>    <span class="number">0.000</span>    <span class="number">0.000</span>    <span class="number">0.000</span>    <span class="number">0.000</span> sre_compile.py:<span class="number">542</span>(_code)</span><br><span class="line">        <span class="number">1</span>    <span class="number">0.000</span>    <span class="number">0.000</span>    <span class="number">0.000</span>    <span class="number">0.000</span> sre_compile.py:<span class="number">557</span>(compile)</span><br><span class="line">      <span class="number">3</span>/<span class="number">1</span>    <span class="number">0.000</span>    <span class="number">0.000</span>    <span class="number">0.000</span>    <span class="number">0.000</span> sre_compile.py:<span class="number">64</span>(_compile)</span><br><span class="line">        <span class="number">3</span>    <span class="number">0.000</span>    <span class="number">0.000</span>    <span class="number">0.000</span>    <span class="number">0.000</span> sre_parse.py:<span class="number">111</span>(__init__)</span><br><span class="line">····<span class="comment"># 此处省略</span></span><br></pre></td></tr></table></figure><ol><li>上述运行表明有199个函数被调用, 其中有194个原生调用(即不涉及递归调用)</li><li>总共运行时间 0.000 seconds</li><li>结果按<strong>标准名称</strong>进行<strong>排序</strong></li><li>列表中<ul><li><code>ncalls</code>表示函数调用的次数(有两个数值表示有递归调用, <strong>总调用次数/原生调用次数</strong>)</li><li><code>tottime</code>是函数内部调用时间(不包括他自己调用的其他函数的时间)</li><li>第一个<code>percall</code> = <code>tottime</code>/<code>ncalls</code></li><li><code>cumtime</code>累积调用时间, 它包含了自己内部调用函数的时间</li><li>第二个<code>percall</code> = <code>cumtime</code>/<code>ncalls</code></li><li>最后一列: <strong>文件名, 行号, 函数名</strong></li></ul></li></ol><h1 id="line-profiler"><a href="#line-profiler" class="headerlink" title="line_profiler"></a>line_profiler</h1><p><code>line_profiler</code>可以统计<strong>每行代码</strong>的<strong>执行次数</strong>和<strong>执行时间</strong>等, 时间单位为<strong>微秒</strong>。</p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install line_profiler</span><br></pre></td></tr></table></figure><p>安装之后, python 下会多一个<code>kernprof.py</code></p><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><ol><li><p>在需要测试的函数加上<code>@profile</code>装饰, 这里我们测试代码<code>test.py</code></p></li><li><p>运行命令行: <code>kernprof -l -v test.py</code></p></li></ol><p><img src="/images/2018-12-06-12-03-36.png" alt=""></p><ul><li><code>Total Time</code>: 测试代码的总运行时间</li><li><code>File</code>: 测试的代码名</li><li><code>Function</code>: 测试的函数所在的行</li><li><code>Line #</code>: 表示代码的行号</li><li><code>Hits</code>: 表示每行代码运行的次数</li><li><code>Time</code>: 每行代码运行的总时间, 时间单位为<strong>微秒</strong></li><li><code>Per Hits</code>: 每行代码运行一次的时间, 时间单位为<strong>微秒</strong></li><li><code>% Time</code>: 每行代码运行时间的百分比</li></ul><p><strong>test.py</strong><br></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="meta">@profile</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fun</span><span class="params">()</span>:</span></span><br><span class="line">    a = <span class="number">0</span></span><br><span class="line">    b = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">100000</span>):</span><br><span class="line">        a = a + i * i</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">3</span>):</span><br><span class="line">        b += <span class="number">1</span></span><br><span class="line">        time.sleep(<span class="number">0.1</span>)</span><br><span class="line">    <span class="keyword">return</span> a + b</span><br><span class="line">    </span><br><span class="line">fun()</span><br></pre></td></tr></table></figure><p></p><h1 id="memory-profiler"><a href="#memory-profiler" class="headerlink" title="memory_profiler"></a>memory_profiler</h1><p><code>memory_profiler</code>工具可以统计每行代码占用的<strong>内存大小</strong>。</p><h2 id="安装-1"><a href="#安装-1" class="headerlink" title="安装"></a>安装</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pip install memory_profiler  </span><br><span class="line">pip install psutil</span><br></pre></td></tr></table></figure><h2 id="使用-1"><a href="#使用-1" class="headerlink" title="使用"></a>使用</h2><ol><li><p>在需要测试的函数加上<code>@profile</code>装饰</p></li><li><p>执行命令: <code>python -m memory_profiler test.py</code></p></li></ol><p><img src="/images/2018-12-06-13-29-48.png" alt=""></p><h1 id="Pycharm图形化性能测试工具"><a href="#Pycharm图形化性能测试工具" class="headerlink" title="Pycharm图形化性能测试工具"></a>Pycharm图形化性能测试工具</h1><p>PyCharm提供了性能分析工具<code>Run-&gt; Profile</code>, 如下图所示。利用Profile工具可以对代码进行性能分析, 找出瓶颈所在<br><img src="/images/2018-12-06-13-57-16.png" alt=""></p><h2 id="使用-2"><a href="#使用-2" class="headerlink" title="使用"></a>使用</h2><p>测试代码见下文, 一共有5个函数, 每个函数都调用了<code>time.sleep</code>进行延时<br>点击<code>Run-&gt; Profile</code>开始测试, 代码运行结束后会生成一栏测试结果,<br>测试结果由两部分构成, <strong>Statistics(性能统计)</strong>和<strong>Call Graph(调用关系图)</strong></p><h3 id="Statistics-性能统计"><a href="#Statistics-性能统计" class="headerlink" title="Statistics(性能统计)"></a>Statistics(性能统计)</h3><p><img src="/images/2018-12-06-13-57-37.png" alt=""></p><p>性能统计界面由<code>Name</code>、<code>Call Count</code>、<code>Time(ms)</code>、<code>Own Time(ms)</code> 4列组成一个表格。</p><ol><li><code>Name</code>显示被调用的<strong>模块或者函数</strong></li><li><code>Call Count</code>显示被调用的次数;</li><li><code>Time(ms)</code>显示运行时间和时间百分比, 时间单位为毫秒(ms), <strong>包含</strong>自己内部调用函数的时间</li><li><code>Own Time(ms)</code>显示运行时间和时间百分比, 时间单位为毫秒(ms), <strong>不包含</strong>自己内部调用函数的时间</li></ol><h4 id="小技巧"><a href="#小技巧" class="headerlink" title="小技巧"></a>小技巧</h4><ol><li>点击表头上的<strong>小三角</strong>可以<strong>升序或降序</strong>排列表格。</li><li>在<code>Name</code>这一个列中<strong>双击</strong>某一行可以跳转到对应的代码。</li></ol><h3 id="Call-Graph-调用关系图"><a href="#Call-Graph-调用关系图" class="headerlink" title="Call Graph(调用关系图)"></a>Call Graph(调用关系图)</h3><p><img src="/images/2018-12-06-13-57-50.png" alt=""></p><p><code>Call Graph</code>(调用(系图), 包含了自己内部调用函数的时间界面<strong>直观展示了各函数直接的调用关系</strong>、运行时间和时间百分比。</p><h4 id="解释-1"><a href="#解释-1" class="headerlink" title="解释"></a>解释</h4><ol><li><p>箭头表示<strong>调用关系</strong>, 由调用者指向被调用者;</p></li><li><p>矩形的<strong>左上角</strong>显示模块或者函数的名称, <strong>右上角</strong>显示被调用的次数;</p></li><li><p>矩形<strong>中间</strong>显示运行时间和时间百分比;</p></li><li><p>矩形的<strong>颜色</strong>表示运行时间或者时间百分比大小的趋势: <strong>红色 &gt; 黄绿色 &gt; 绿色</strong>, 比如由图可以看出fun3的矩形为黄绿色, fun1为绿色, 所有fun3运行时间比fun1长。</p></li><li><p>从图中可以看出<code>test.py</code>直接调用了fun3、fun1、fun2和fun5函数; fun5函数直接调用了fun4函数; fun1、fun2、fun3、fun4和fun5都直接调用了print以及sleep函数; 整个测试代码运行的总时间为6001ms, 其中fun3的运行时间为1999ms, 所占的时间百分比为33.3%, 也就是 1999ms / 6006ms = 33.3%。</p></li></ol><p><strong>test.py</strong><br></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># __Author__: Sdite</span></span><br><span class="line"><span class="comment"># __Email__ : a122691411@gmail.com</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fun1</span><span class="params">(a, b)</span>:</span></span><br><span class="line">    print(<span class="string">'fun1'</span>)</span><br><span class="line">    print(a, b)</span><br><span class="line">    time.sleep(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fun2</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">'fun2'</span>)</span><br><span class="line">    time.sleep(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fun3</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">'fun3'</span>)</span><br><span class="line">    time.sleep(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fun4</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">'fun4'</span>)</span><br><span class="line">    time.sleep(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fun5</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">'fun5'</span>)</span><br><span class="line">    time.sleep(<span class="number">1</span>)</span><br><span class="line">    fun4()</span><br><span class="line"></span><br><span class="line">fun1(<span class="string">'foo'</span>, <span class="string">'bar'</span>)</span><br><span class="line">fun2()</span><br><span class="line">fun3()</span><br><span class="line">fun5()</span><br></pre></td></tr></table></figure><p></p><h1 id="objgraph"><a href="#objgraph" class="headerlink" title="objgraph"></a>objgraph</h1><p><code>objgraph</code>是一个实用模块, 可以列出当前内存中存在的对象, 可用于定位<strong>内存泄露</strong></p><p>推荐文章: <a href="http://python.jobbole.com/88827/" target="_blank" rel="noopener">http://python.jobbole.com/88827/</a><br><strong>详情还是谷歌或百度一下, 日后看了再补充</strong></p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Tue Jan 01 2019 11:43:07 GMT+0800 (中国标准时间) --&gt;&lt;h1 id=&quot;timeit&quot;&gt;&lt;a href=&quot;#timeit&quot; class=&quot;headerlink&quot; title=&quot;timeit&quot;&gt;&lt;/a&gt;timeit&lt;/h1&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; timeit&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;print(timeit.timeit(stmt=&lt;span class=&quot;string&quot;&gt;&quot;[i for i in range(1000)]&quot;&lt;/span&gt;, number=&lt;span class=&quot;number&quot;&gt;100000&lt;/span&gt;))         &lt;span class=&quot;comment&quot;&gt;# 传入的是字符串表达式&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 输出: &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 3.0182870961591375&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;&lt;code&gt;timeit&lt;/code&gt;只输出被测试代码的总运行时间, 单位为秒, 没有详细的统计.&lt;br&gt;&lt;a href=&quot;/posts/6218c1b6.html&quot;&gt;timeit的详细介绍点这里&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Python" scheme="https://vonsdite.cn/categories/Python/"/>
    
      <category term="性能测试" scheme="https://vonsdite.cn/categories/Python/%E6%80%A7%E8%83%BD%E6%B5%8B%E8%AF%95/"/>
    
    
      <category term="Python" scheme="https://vonsdite.cn/tags/Python/"/>
    
      <category term="性能测试" scheme="https://vonsdite.cn/tags/%E6%80%A7%E8%83%BD%E6%B5%8B%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>python timeti模块使用</title>
    <link href="https://vonsdite.cn/posts/6218c1b6.html"/>
    <id>https://vonsdite.cn/posts/6218c1b6.html</id>
    <published>2018-12-05T15:50:42.000Z</published>
    <updated>2018-12-31T14:15:41.449Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Tue Jan 01 2019 11:43:07 GMT+0800 (中国标准时间) --><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>python可以使用<code>timeit</code>模块来测试小段代码的运行时间.<br><code>timeit</code>主要的函数有<code>timeit</code>和<code>repeat</code> (还有<code>default_timer</code>, 用法可见<a href="/posts/605d5daa.html#4-timeit-default-timer">文章</a>)</p><h1 id="timeit和repeat的实现"><a href="#timeit和repeat的实现" class="headerlink" title="timeit和repeat的实现"></a><code>timeit</code>和<code>repeat</code>的实现</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">timeit</span><span class="params">(stmt=<span class="string">"pass"</span>, setup=<span class="string">"pass"</span>, timer=default_timer,</span></span></span><br><span class="line"><span class="function"><span class="params">               number=default_number, globals=None)</span>:</span></span><br><span class="line">    <span class="string">"""Convenience function to create Timer object and call timeit method."""</span></span><br><span class="line">    <span class="keyword">return</span> Timer(stmt, setup, timer, globals).timeit(number)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">repeat</span><span class="params">(stmt=<span class="string">"pass"</span>, setup=<span class="string">"pass"</span>, timer=default_timer,</span></span></span><br><span class="line"><span class="function"><span class="params">               repeat=default_repeat, number=default_number, globals=None)</span>:</span></span><br><span class="line">    <span class="string">"""Convenience function to create Timer object and call repeat method."""</span></span><br><span class="line">    <span class="keyword">return</span> Timer(stmt, setup, timer, globals).repeat(repeat, number)</span><br></pre></td></tr></table></figure><a id="more"></a><p>在上面的代码中可见, 无论是<code>timeit</code>还是<code>repeat</code>都是先 生成<code>Timer</code>对象, 然后调用了<code>Timer</code>对象的<code>timeit</code>或<code>repeat</code>函数。</p><h2 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h2><ol><li><p><strong><code>stmt</code></strong>: 用于传入要测试时间的代码, 可以直接接受<strong>字符串的表达式</strong>, 也可以接受<strong>单个变量</strong>, 也可以接受<strong>函数</strong>。<br><strong>PS:</strong> <strong>传入函数</strong>时要使用参数<code>setup</code>导入函数 <img src="/images/ExclamationMark.png" alt=""></p></li><li><p><strong><code>setup</code></strong>: 传入stmt的<strong>运行环境</strong>, 比如stmt中使用到的<strong>参数、变量, 要导入的模块</strong>等。可以写一行语句, 也可以写多行语句, 写多行语句时要用<strong>分号;</strong>隔开语句。</p></li><li><p><strong><code>number</code></strong>: 要测试的代码的<strong>运行次数</strong>, 默认<strong>100000次</strong>, 对于耗时的代码, 运行太多次会比较慢, 此时建议自己修改一下运行次数</p></li><li><strong><code>repeat</code></strong>: 指<strong>测试要重复几次</strong>, 每次的结果构成列表返回, <strong>默认3次</strong>。</li></ol><h2 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h2><p>在使用timeit模块时, 有两种方式</p><ol><li>直接使用<code>timeit.timeit()</code>、<code>tiemit.repeat()</code></li><li>先用<code>timeit.Timer()</code>来生成一个<strong>Timer对象</strong>, 然后再用Timer对象用<code>timeit()</code>和<code>repeat()</code>函数, 相对灵活一些。</li></ol><h2 id="repeat的优点"><a href="#repeat的优点" class="headerlink" title="repeat的优点"></a>repeat的优点</h2><p>可以多次重复测试, 并可以对测试所得的执行时间取<strong>最小值</strong>, <strong>平均值</strong>, <strong>最大值</strong>, 更方便分析。</p><h1 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h1><h2 id="例子1"><a href="#例子1" class="headerlink" title="例子1"></a>例子1</h2><p>测试一个<strong>列表推导式</strong> 比正常写<strong>for循环</strong>快多少<br></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> timeit</span><br><span class="line"></span><br><span class="line">foo = <span class="string">"""</span></span><br><span class="line"><span class="string">sum = []</span></span><br><span class="line"><span class="string">for i in range(1000):</span></span><br><span class="line"><span class="string">    sum.append(i)</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line">print(timeit.timeit(stmt=<span class="string">"[i for i in range(1000)]"</span>, number=<span class="number">100000</span>))         <span class="comment"># 传入的是字符串表达式</span></span><br><span class="line">print(timeit.timeit(stmt=foo, number=<span class="number">100000</span>))                            <span class="comment"># 传入的是变量</span></span><br><span class="line"><span class="comment"># 输出：</span></span><br><span class="line"><span class="comment"># 3.0182870961591375     </span></span><br><span class="line"><span class="comment"># 8.967388768466217</span></span><br></pre></td></tr></table></figure><p></p><h2 id="例子2"><a href="#例子2" class="headerlink" title="例子2"></a>例子2</h2><p>使用<code>timeit</code>来比较<strong>递归斐波那契</strong>和<strong>迭代斐波那契</strong>的时间效率差异</p><h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h3><p>代码中分别定义了<strong>两个函数</strong>,<br>要测试这两个函数, 需导入这两个函数,<br>即设置<code>setup = from __main__ import recursive_fibonacci</code>,<br>表明从<strong>当前运行的代码</strong>下导入这两个函数。<br>如果是其他模块的, 则要<code>import</code>别的模块进来</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> timeit</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">recursive_fibonacci</span><span class="params">(nth_item)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> nth_item == <span class="number">1</span> <span class="keyword">or</span> nth_item == <span class="number">2</span>:</span><br><span class="line">          <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">    <span class="keyword">elif</span> nth_item &lt;= <span class="number">0</span>:</span><br><span class="line">          <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> recursive_fibonacci(nth_item - <span class="number">1</span>) + recursive_fibonacci(nth_item - <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">loop_fibonacci</span><span class="params">(nth_item)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> nth_item == <span class="number">1</span> <span class="keyword">or</span> nth_item == <span class="number">2</span>:</span><br><span class="line">          <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">    <span class="keyword">elif</span> nth_item &lt;= <span class="number">0</span>:</span><br><span class="line">          <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    first_item, second_item = <span class="number">1</span>, <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> range(nth_item<span class="number">-2</span>):</span><br><span class="line">          first_item, second_item = second_item, first_item + second_item</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> second_item</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    print(</span><br><span class="line">          timeit.timeit(</span><br><span class="line">              stmt=<span class="string">"recursive_fibonacci(20)"</span>,</span><br><span class="line">              setup=<span class="string">"from __main__ import recursive_fibonacci"</span>, number=<span class="number">10000</span></span><br><span class="line">          )</span><br><span class="line">    )</span><br><span class="line">    print(</span><br><span class="line">          timeit.timeit(</span><br><span class="line">              stmt=<span class="string">"loop_fibonacci(20)"</span>,</span><br><span class="line">              setup=<span class="string">"from __main__ import loop_fibonacci"</span>,</span><br><span class="line">              number=<span class="number">10000</span></span><br><span class="line">          )</span><br><span class="line">    )</span><br></pre></td></tr></table></figure><h2 id="例子3"><a href="#例子3" class="headerlink" title="例子3"></a>例子3</h2><p><code>setup</code>参数的灵活使用, 设置<code>stmt</code>的<strong>运行环境</strong>的详细例子<br>涉及</p><ul><li>导入模块</li><li>变量定义</li><li>函数调用</li><li>多行写<code>setup</code>要加<strong>分号</strong><img src="/images/ExclamationMark.png" alt="">的方式</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> timeit</span><br><span class="line"></span><br><span class="line">x = <span class="string">"""</span></span><br><span class="line"><span class="string">say_hi.ParseFromString(p)</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line">y = <span class="string">"""</span></span><br><span class="line"><span class="string">simplejson.loads(x)</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line">print(</span><br><span class="line">    timeit.timeit(</span><br><span class="line">        stmt=x, </span><br><span class="line">        setup=<span class="string">"import say_hi_pb2;"</span></span><br><span class="line">            <span class="string">"say_hi = say_hi_pb2.SayHi();"</span></span><br><span class="line">            <span class="string">"say_hi.id = 13423;"</span></span><br><span class="line">            <span class="string">"say_hi.something = 'axiba';"</span></span><br><span class="line">            <span class="string">"say_hi.extra_info = 'xiba';"</span></span><br><span class="line">            <span class="string">"p =say_hi.SerializeToString()"</span>, </span><br><span class="line">            number=<span class="number">1000000</span></span><br><span class="line">    )</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">print(</span><br><span class="line">    timeit.timeit(</span><br><span class="line">        stmt=y, </span><br><span class="line">        setup=<span class="string">"import simplejson; "</span></span><br><span class="line">            <span class="string">"json=&#123;"</span></span><br><span class="line">            <span class="string">"'id': 13423,"</span></span><br><span class="line">            <span class="string">"'something': 'axiba',"</span></span><br><span class="line">            <span class="string">"'extra_info': 'xiba',"</span></span><br><span class="line">            <span class="string">"&#125;;"</span></span><br><span class="line">            <span class="string">"x = simplejson.dumps(json)"</span>, </span><br><span class="line">        number=<span class="number">1000000</span></span><br><span class="line">    )</span><br><span class="line">)</span><br></pre></td></tr></table></figure><h1 id="命令行调用timeit"><a href="#命令行调用timeit" class="headerlink" title="命令行调用timeit"></a>命令行调用timeit</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">python -m timeit [-n N] [-r N] [-s S] [-t] [-c] [-h] [statement...]</span><br><span class="line"></span><br><span class="line">-n N 执行指定语句的次数</span><br><span class="line">-r N 重复测量的次数(默认3次)</span><br><span class="line">-s S 指定初始化代码构建环境的导入语句(默认pass)</span><br><span class="line">python 3.3新增</span><br><span class="line">-t 使用time.time() (不推荐)</span><br><span class="line">-c 使用time.clock() (不推荐)</span><br><span class="line">-v 打印原始计时结果</span><br><span class="line">-h 帮助</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ python -m timeit <span class="string">'"-".join(str(n) for n in range(100))'</span></span><br><span class="line">loops, best of 3: 40.3 usec per loop</span><br><span class="line">$ python -m timeit <span class="string">'"-".join([str(n) for n in range(100)])'</span></span><br><span class="line">loops, best of 3: 33.4 usec per loop</span><br><span class="line">$ python -m timeit <span class="string">'"-".join(map(str, range(100)))'</span></span><br><span class="line">loops, best of 3: 25.2 usec per loop</span><br></pre></td></tr></table></figure><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Tue Jan 01 2019 11:43:07 GMT+0800 (中国标准时间) --&gt;&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;python可以使用&lt;code&gt;timeit&lt;/code&gt;模块来测试小段代码的运行时间.&lt;br&gt;&lt;code&gt;timeit&lt;/code&gt;主要的函数有&lt;code&gt;timeit&lt;/code&gt;和&lt;code&gt;repeat&lt;/code&gt; (还有&lt;code&gt;default_timer&lt;/code&gt;, 用法可见&lt;a href=&quot;/posts/605d5daa.html#4-timeit-default-timer&quot;&gt;文章&lt;/a&gt;)&lt;/p&gt;&lt;h1 id=&quot;timeit和repeat的实现&quot;&gt;&lt;a href=&quot;#timeit和repeat的实现&quot; class=&quot;headerlink&quot; title=&quot;timeit和repeat的实现&quot;&gt;&lt;/a&gt;&lt;code&gt;timeit&lt;/code&gt;和&lt;code&gt;repeat&lt;/code&gt;的实现&lt;/h1&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;timeit&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(stmt=&lt;span class=&quot;string&quot;&gt;&quot;pass&quot;&lt;/span&gt;, setup=&lt;span class=&quot;string&quot;&gt;&quot;pass&quot;&lt;/span&gt;, timer=default_timer,&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;params&quot;&gt;               number=default_number, globals=None)&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&quot;&quot;&quot;Convenience function to create Timer object and call timeit method.&quot;&quot;&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; Timer(stmt, setup, timer, globals).timeit(number)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;repeat&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(stmt=&lt;span class=&quot;string&quot;&gt;&quot;pass&quot;&lt;/span&gt;, setup=&lt;span class=&quot;string&quot;&gt;&quot;pass&quot;&lt;/span&gt;, timer=default_timer,&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;params&quot;&gt;               repeat=default_repeat, number=default_number, globals=None)&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&quot;&quot;&quot;Convenience function to create Timer object and call repeat method.&quot;&quot;&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; Timer(stmt, setup, timer, globals).repeat(repeat, number)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="Python" scheme="https://vonsdite.cn/categories/Python/"/>
    
      <category term="性能测试" scheme="https://vonsdite.cn/categories/Python/%E6%80%A7%E8%83%BD%E6%B5%8B%E8%AF%95/"/>
    
    
      <category term="Python" scheme="https://vonsdite.cn/tags/Python/"/>
    
      <category term="timeit" scheme="https://vonsdite.cn/tags/timeit/"/>
    
  </entry>
  
  <entry>
    <title>Hexo Next 加入评论功能gitalk</title>
    <link href="https://vonsdite.cn/posts/dd07da63.html"/>
    <id>https://vonsdite.cn/posts/dd07da63.html</id>
    <published>2018-12-05T10:30:20.000Z</published>
    <updated>2018-12-31T14:15:35.424Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Tue Jan 01 2019 11:43:07 GMT+0800 (中国标准时间) --><h1 id="Gitalk"><a href="#Gitalk" class="headerlink" title="Gitalk"></a>Gitalk</h1><p><code>Gitalk</code>: 一个基于 Github Issue 和 Preact 开发的评论插件<br>详情Demo可见:<a href="https://gitalk.github.io/" target="_blank" rel="noopener">https://gitalk.github.io/</a></p><h1 id="增加评论区"><a href="#增加评论区" class="headerlink" title="增加评论区"></a>增加评论区</h1><h2 id="注册OAuth-Application"><a href="#注册OAuth-Application" class="headerlink" title="注册OAuth Application"></a>注册OAuth Application</h2><a id="more"></a><p>在GitHub上注册新应用, 链接:<a href="https://github.com/settings/applications/new" target="_blank" rel="noopener">https://github.com/settings/applications/new</a></p><table><thead><tr><th>参数</th><th>说明</th></tr></thead><tbody><tr><td><code>Application name</code></td><td>应用名称, 可以任意填入</td></tr><tr><td><code>Homepage URL</code></td><td>网站URL, <strong>注意</strong>用https://开头, 开头如<a href="https://vonsdite.cn">https://vonsdite.cn</a></td></tr><tr><td><code>Application description</code></td><td>应用描述, 可以任意填入</td></tr><tr><td><code>Authorization callback URL</code></td><td>网站URL, <strong>注意</strong>用https://开头, 如<a href="https://vonsdite.cn">https://vonsdite.cn</a></td></tr></tbody></table><p><img src="/images/2018-12-05-18-39-47.png" alt=""></p><p>注册后记下<code>Client ID</code>和<code>Client Secret</code>, 后续要使用到<br><img src="/images/2018-12-05-18-48-20.png" alt=""></p><h2 id="md5-min-js"><a href="#md5-min-js" class="headerlink" title="md5.min.js"></a>md5.min.js</h2><p>在<code>themes\next\source\js\src\</code>目录下创建<code>md5.min.js</code>, 并添加如下内容:</p><p>加这个代码的<strong>原因是</strong>: 部分文章的评论区会报Error: Validation Failed, 具体原因是由于 Github 限制<strong>labels长度</strong>不能超过<strong>50</strong>引起的, 该问题解决方案来自Gitalk项目仓<a href="https://github.com/gitalk/gitalk/issues/102" target="_blank" rel="noopener">Issues 115</a>, 通过<strong>MD5</strong>加密ID来缩短<strong>labels长度</strong>。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">!<span class="function"><span class="keyword">function</span>(<span class="params">n</span>)</span>&#123;<span class="string">"use strict"</span>;<span class="function"><span class="keyword">function</span> <span class="title">t</span>(<span class="params">n,t</span>)</span>&#123;<span class="keyword">var</span> r=(<span class="number">65535</span>&amp;n)+(<span class="number">65535</span>&amp;t);<span class="keyword">return</span>(n&gt;&gt;<span class="number">16</span>)+(t&gt;&gt;<span class="number">16</span>)+(r&gt;&gt;<span class="number">16</span>)&lt;&lt;<span class="number">16</span>|<span class="number">65535</span>&amp;r&#125;<span class="function"><span class="keyword">function</span> <span class="title">r</span>(<span class="params">n,t</span>)</span>&#123;<span class="keyword">return</span> n&lt;&lt;t|n&gt;&gt;&gt;<span class="number">32</span>-t&#125;<span class="function"><span class="keyword">function</span> <span class="title">e</span>(<span class="params">n,e,o,u,c,f</span>)</span>&#123;<span class="keyword">return</span> t(r(t(t(e,n),t(u,f)),c),o)&#125;<span class="function"><span class="keyword">function</span> <span class="title">o</span>(<span class="params">n,t,r,o,u,c,f</span>)</span>&#123;<span class="keyword">return</span> e(t&amp;r|~t&amp;o,n,t,u,c,f)&#125;<span class="function"><span class="keyword">function</span> <span class="title">u</span>(<span class="params">n,t,r,o,u,c,f</span>)</span>&#123;<span class="keyword">return</span> e(t&amp;o|r&amp;~o,n,t,u,c,f)&#125;<span class="function"><span class="keyword">function</span> <span class="title">c</span>(<span class="params">n,t,r,o,u,c,f</span>)</span>&#123;<span class="keyword">return</span> e(t^r^o,n,t,u,c,f)&#125;<span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params">n,t,r,o,u,c,f</span>)</span>&#123;<span class="keyword">return</span> e(r^(t|~o),n,t,u,c,f)&#125;<span class="function"><span class="keyword">function</span> <span class="title">i</span>(<span class="params">n,r</span>)</span>&#123;n[r&gt;&gt;<span class="number">5</span>]|=<span class="number">128</span>&lt;&lt;r%<span class="number">32</span>,n[<span class="number">14</span>+(r+<span class="number">64</span>&gt;&gt;&gt;<span class="number">9</span>&lt;&lt;<span class="number">4</span>)]=r;<span class="keyword">var</span> e,i,a,d,h,l=<span class="number">1732584193</span>,g=<span class="number">-271733879</span>,v=<span class="number">-1732584194</span>,m=<span class="number">271733878</span>;<span class="keyword">for</span>(e=<span class="number">0</span>;e&lt;n.length;e+=<span class="number">16</span>)i=l,a=g,d=v,h=m,g=f(g=f(g=f(g=f(g=c(g=c(g=c(g=c(g=u(g=u(g=u(g=u(g=o(g=o(g=o(g=o(g,v=o(v,m=o(m,l=o(l,g,v,m,n[e],<span class="number">7</span>,<span class="number">-680876936</span>),g,v,n[e+<span class="number">1</span>],<span class="number">12</span>,<span class="number">-389564586</span>),l,g,n[e+<span class="number">2</span>],<span class="number">17</span>,<span class="number">606105819</span>),m,l,n[e+<span class="number">3</span>],<span class="number">22</span>,<span class="number">-1044525330</span>),v=o(v,m=o(m,l=o(l,g,v,m,n[e+<span class="number">4</span>],<span class="number">7</span>,<span class="number">-176418897</span>),g,v,n[e+<span class="number">5</span>],<span class="number">12</span>,<span class="number">1200080426</span>),l,g,n[e+<span class="number">6</span>],<span class="number">17</span>,<span class="number">-1473231341</span>),m,l,n[e+<span class="number">7</span>],<span class="number">22</span>,<span class="number">-45705983</span>),v=o(v,m=o(m,l=o(l,g,v,m,n[e+<span class="number">8</span>],<span class="number">7</span>,<span class="number">1770035416</span>),g,v,n[e+<span class="number">9</span>],<span class="number">12</span>,<span class="number">-1958414417</span>),l,g,n[e+<span class="number">10</span>],<span class="number">17</span>,<span class="number">-42063</span>),m,l,n[e+<span class="number">11</span>],<span class="number">22</span>,<span class="number">-1990404162</span>),v=o(v,m=o(m,l=o(l,g,v,m,n[e+<span class="number">12</span>],<span class="number">7</span>,<span class="number">1804603682</span>),g,v,n[e+<span class="number">13</span>],<span class="number">12</span>,<span class="number">-40341101</span>),l,g,n[e+<span class="number">14</span>],<span class="number">17</span>,<span class="number">-1502002290</span>),m,l,n[e+<span class="number">15</span>],<span class="number">22</span>,<span class="number">1236535329</span>),v=u(v,m=u(m,l=u(l,g,v,m,n[e+<span class="number">1</span>],<span class="number">5</span>,<span class="number">-165796510</span>),g,v,n[e+<span class="number">6</span>],<span class="number">9</span>,<span class="number">-1069501632</span>),l,g,n[e+<span class="number">11</span>],<span class="number">14</span>,<span class="number">643717713</span>),m,l,n[e],<span class="number">20</span>,<span class="number">-373897302</span>),v=u(v,m=u(m,l=u(l,g,v,m,n[e+<span class="number">5</span>],<span class="number">5</span>,<span class="number">-701558691</span>),g,v,n[e+<span class="number">10</span>],<span class="number">9</span>,<span class="number">38016083</span>),l,g,n[e+<span class="number">15</span>],<span class="number">14</span>,<span class="number">-660478335</span>),m,l,n[e+<span class="number">4</span>],<span class="number">20</span>,<span class="number">-405537848</span>),v=u(v,m=u(m,l=u(l,g,v,m,n[e+<span class="number">9</span>],<span class="number">5</span>,<span class="number">568446438</span>),g,v,n[e+<span class="number">14</span>],<span class="number">9</span>,<span class="number">-1019803690</span>),l,g,n[e+<span class="number">3</span>],<span class="number">14</span>,<span class="number">-187363961</span>),m,l,n[e+<span class="number">8</span>],<span class="number">20</span>,<span class="number">1163531501</span>),v=u(v,m=u(m,l=u(l,g,v,m,n[e+<span class="number">13</span>],<span class="number">5</span>,<span class="number">-1444681467</span>),g,v,n[e+<span class="number">2</span>],<span class="number">9</span>,<span class="number">-51403784</span>),l,g,n[e+<span class="number">7</span>],<span class="number">14</span>,<span class="number">1735328473</span>),m,l,n[e+<span class="number">12</span>],<span class="number">20</span>,<span class="number">-1926607734</span>),v=c(v,m=c(m,l=c(l,g,v,m,n[e+<span class="number">5</span>],<span class="number">4</span>,<span class="number">-378558</span>),g,v,n[e+<span class="number">8</span>],<span class="number">11</span>,<span class="number">-2022574463</span>),l,g,n[e+<span class="number">11</span>],<span class="number">16</span>,<span class="number">1839030562</span>),m,l,n[e+<span class="number">14</span>],<span class="number">23</span>,<span class="number">-35309556</span>),v=c(v,m=c(m,l=c(l,g,v,m,n[e+<span class="number">1</span>],<span class="number">4</span>,<span class="number">-1530992060</span>),g,v,n[e+<span class="number">4</span>],<span class="number">11</span>,<span class="number">1272893353</span>),l,g,n[e+<span class="number">7</span>],<span class="number">16</span>,<span class="number">-155497632</span>),m,l,n[e+<span class="number">10</span>],<span class="number">23</span>,<span class="number">-1094730640</span>),v=c(v,m=c(m,l=c(l,g,v,m,n[e+<span class="number">13</span>],<span class="number">4</span>,<span class="number">681279174</span>),g,v,n[e],<span class="number">11</span>,<span class="number">-358537222</span>),l,g,n[e+<span class="number">3</span>],<span class="number">16</span>,<span class="number">-722521979</span>),m,l,n[e+<span class="number">6</span>],<span class="number">23</span>,<span class="number">76029189</span>),v=c(v,m=c(m,l=c(l,g,v,m,n[e+<span class="number">9</span>],<span class="number">4</span>,<span class="number">-640364487</span>),g,v,n[e+<span class="number">12</span>],<span class="number">11</span>,<span class="number">-421815835</span>),l,g,n[e+<span class="number">15</span>],<span class="number">16</span>,<span class="number">530742520</span>),m,l,n[e+<span class="number">2</span>],<span class="number">23</span>,<span class="number">-995338651</span>),v=f(v,m=f(m,l=f(l,g,v,m,n[e],<span class="number">6</span>,<span class="number">-198630844</span>),g,v,n[e+<span class="number">7</span>],<span class="number">10</span>,<span class="number">1126891415</span>),l,g,n[e+<span class="number">14</span>],<span class="number">15</span>,<span class="number">-1416354905</span>),m,l,n[e+<span class="number">5</span>],<span class="number">21</span>,<span class="number">-57434055</span>),v=f(v,m=f(m,l=f(l,g,v,m,n[e+<span class="number">12</span>],<span class="number">6</span>,<span class="number">1700485571</span>),g,v,n[e+<span class="number">3</span>],<span class="number">10</span>,<span class="number">-1894986606</span>),l,g,n[e+<span class="number">10</span>],<span class="number">15</span>,<span class="number">-1051523</span>),m,l,n[e+<span class="number">1</span>],<span class="number">21</span>,<span class="number">-2054922799</span>),v=f(v,m=f(m,l=f(l,g,v,m,n[e+<span class="number">8</span>],<span class="number">6</span>,<span class="number">1873313359</span>),g,v,n[e+<span class="number">15</span>],<span class="number">10</span>,<span class="number">-30611744</span>),l,g,n[e+<span class="number">6</span>],<span class="number">15</span>,<span class="number">-1560198380</span>),m,l,n[e+<span class="number">13</span>],<span class="number">21</span>,<span class="number">1309151649</span>),v=f(v,m=f(m,l=f(l,g,v,m,n[e+<span class="number">4</span>],<span class="number">6</span>,<span class="number">-145523070</span>),g,v,n[e+<span class="number">11</span>],<span class="number">10</span>,<span class="number">-1120210379</span>),l,g,n[e+<span class="number">2</span>],<span class="number">15</span>,<span class="number">718787259</span>),m,l,n[e+<span class="number">9</span>],<span class="number">21</span>,<span class="number">-343485551</span>),l=t(l,i),g=t(g,a),v=t(v,d),m=t(m,h);<span class="keyword">return</span>[l,g,v,m]&#125;<span class="function"><span class="keyword">function</span> <span class="title">a</span>(<span class="params">n</span>)</span>&#123;<span class="keyword">var</span> t,r=<span class="string">""</span>,e=<span class="number">32</span>*n.length;<span class="keyword">for</span>(t=<span class="number">0</span>;t&lt;e;t+=<span class="number">8</span>)r+=<span class="built_in">String</span>.fromCharCode(n[t&gt;&gt;<span class="number">5</span>]&gt;&gt;&gt;t%<span class="number">32</span>&amp;<span class="number">255</span>);<span class="keyword">return</span> r&#125;<span class="function"><span class="keyword">function</span> <span class="title">d</span>(<span class="params">n</span>)</span>&#123;<span class="keyword">var</span> t,r=[];<span class="keyword">for</span>(r[(n.length&gt;&gt;<span class="number">2</span>)<span class="number">-1</span>]=<span class="keyword">void</span> <span class="number">0</span>,t=<span class="number">0</span>;t&lt;r.length;t+=<span class="number">1</span>)r[t]=<span class="number">0</span>;<span class="keyword">var</span> e=<span class="number">8</span>*n.length;<span class="keyword">for</span>(t=<span class="number">0</span>;t&lt;e;t+=<span class="number">8</span>)r[t&gt;&gt;<span class="number">5</span>]|=(<span class="number">255</span>&amp;n.charCodeAt(t/<span class="number">8</span>))&lt;&lt;t%<span class="number">32</span>;<span class="keyword">return</span> r&#125;<span class="function"><span class="keyword">function</span> <span class="title">h</span>(<span class="params">n</span>)</span>&#123;<span class="keyword">return</span> a(i(d(n),<span class="number">8</span>*n.length))&#125;<span class="function"><span class="keyword">function</span> <span class="title">l</span>(<span class="params">n,t</span>)</span>&#123;<span class="keyword">var</span> r,e,o=d(n),u=[],c=[];<span class="keyword">for</span>(u[<span class="number">15</span>]=c[<span class="number">15</span>]=<span class="keyword">void</span> <span class="number">0</span>,o.length&gt;<span class="number">16</span>&amp;&amp;(o=i(o,<span class="number">8</span>*n.length)),r=<span class="number">0</span>;r&lt;<span class="number">16</span>;r+=<span class="number">1</span>)u[r]=<span class="number">909522486</span>^o[r],c[r]=<span class="number">1549556828</span>^o[r];<span class="keyword">return</span> e=i(u.concat(d(t)),<span class="number">512</span>+<span class="number">8</span>*t.length),a(i(c.concat(e),<span class="number">640</span>))&#125;<span class="function"><span class="keyword">function</span> <span class="title">g</span>(<span class="params">n</span>)</span>&#123;<span class="keyword">var</span> t,r,e=<span class="string">""</span>;<span class="keyword">for</span>(r=<span class="number">0</span>;r&lt;n.length;r+=<span class="number">1</span>)t=n.charCodeAt(r),e+=<span class="string">"0123456789abcdef"</span>.charAt(t&gt;&gt;&gt;<span class="number">4</span>&amp;<span class="number">15</span>)+<span class="string">"0123456789abcdef"</span>.charAt(<span class="number">15</span>&amp;t);<span class="keyword">return</span> e&#125;<span class="function"><span class="keyword">function</span> <span class="title">v</span>(<span class="params">n</span>)</span>&#123;<span class="keyword">return</span> <span class="built_in">unescape</span>(<span class="built_in">encodeURIComponent</span>(n))&#125;<span class="function"><span class="keyword">function</span> <span class="title">m</span>(<span class="params">n</span>)</span>&#123;<span class="keyword">return</span> h(v(n))&#125;<span class="function"><span class="keyword">function</span> <span class="title">p</span>(<span class="params">n</span>)</span>&#123;<span class="keyword">return</span> g(m(n))&#125;<span class="function"><span class="keyword">function</span> <span class="title">s</span>(<span class="params">n,t</span>)</span>&#123;<span class="keyword">return</span> l(v(n),v(t))&#125;<span class="function"><span class="keyword">function</span> <span class="title">C</span>(<span class="params">n,t</span>)</span>&#123;<span class="keyword">return</span> g(s(n,t))&#125;<span class="function"><span class="keyword">function</span> <span class="title">A</span>(<span class="params">n,t,r</span>)</span>&#123;<span class="keyword">return</span> t?r?s(t,n):C(t,n):r?m(n):p(n)&#125;<span class="string">"function"</span>==<span class="keyword">typeof</span> define&amp;&amp;define.amd?define(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;<span class="keyword">return</span> A&#125;):<span class="string">"object"</span>==<span class="keyword">typeof</span> <span class="built_in">module</span>&amp;&amp;<span class="built_in">module</span>.exports?<span class="built_in">module</span>.exports=A:n.md5=A&#125;(<span class="keyword">this</span>);</span><br></pre></td></tr></table></figure><h2 id="新建gitalk-swig"><a href="#新建gitalk-swig" class="headerlink" title="新建gitalk.swig"></a>新建gitalk.swig</h2><p>在站点目录下, <code>themes/next/layout/_third-party/comments/</code>下新建<code>gitalk.swig</code>文件, 并添加如下内容</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&#123;% if page.comments &amp;&amp; theme.gitalk.enable %&#125;</span><br><span class="line">  &lt;link rel=&quot;stylesheet&quot; href=&quot;https://unpkg.com/gitalk/dist/gitalk.css&quot;&gt;</span><br><span class="line">  &lt;script src=&quot;https://unpkg.com/gitalk/dist/gitalk.min.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">  &lt;script src=&quot;/js/src/md5.min.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">   &lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line">        var gitalk = new Gitalk(&#123;</span><br><span class="line">          clientID: &apos;&#123;&#123; theme.gitalk.ClientID &#125;&#125;&apos;,</span><br><span class="line">          clientSecret: &apos;&#123;&#123; theme.gitalk.ClientSecret &#125;&#125;&apos;,</span><br><span class="line">          repo: &apos;&#123;&#123; theme.gitalk.repo &#125;&#125;&apos;,</span><br><span class="line">          owner: &apos;&#123;&#123; theme.gitalk.githubID &#125;&#125;&apos;,</span><br><span class="line">          admin: [&apos;&#123;&#123; theme.gitalk.adminUser &#125;&#125;&apos;],</span><br><span class="line">          id: md5(location.pathname),</span><br><span class="line">          distractionFreeMode: &apos;&#123;&#123; theme.gitalk.distractionFreeMode &#125;&#125;&apos;</span><br><span class="line">        &#125;)</span><br><span class="line">        gitalk.render(&apos;gitalk-container&apos;)           </span><br><span class="line">       &lt;/script&gt;</span><br><span class="line">&#123;% endif %&#125;</span><br></pre></td></tr></table></figure><h2 id="修改comments-swig"><a href="#修改comments-swig" class="headerlink" title="修改comments.swig"></a>修改comments.swig</h2><p>修改<code>themes/next/layout/_partials/comments.swig</code>, 添加内容如下, (在倒数第二个<code>endif</code>前):<br><img src="/images/2018-12-05-18-53-21.png" alt=""></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#123;% elseif theme.gitalk.enable %&#125;</span><br><span class="line"> &lt;div id=&quot;gitalk-container&quot;&gt;&lt;/div&gt;</span><br></pre></td></tr></table></figure><h2 id="修改index-swig"><a href="#修改index-swig" class="headerlink" title="修改index.swig"></a>修改index.swig</h2><p>修改<code>themes/next/layout/_third-party/comments/index.swig</code>, 在最后一行添加内容:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% include &apos;gitalk.swig&apos; %&#125;</span><br></pre></td></tr></table></figure><h2 id="新建gitalk-styl"><a href="#新建gitalk-styl" class="headerlink" title="新建gitalk.styl"></a>新建gitalk.styl</h2><p>在<code>themes/next/source/css/_common/components/third-party/</code>目录下新建<code>gitalk.styl</code>, 并添加如下内容:</p><figure class="highlight styl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.gt-header</span> <span class="selector-tag">a</span>, <span class="selector-class">.gt-comments</span> <span class="selector-tag">a</span>, <span class="selector-class">.gt-popup</span> a</span><br><span class="line">  <span class="attribute">border-bottom</span>: none;</span><br><span class="line"><span class="selector-class">.gt-container</span> <span class="selector-class">.gt-popup</span> <span class="selector-class">.gt-action</span><span class="selector-class">.is--active</span>:before</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">0.7em</span>;</span><br></pre></td></tr></table></figure><h2 id="修改third-party-styl"><a href="#修改third-party-styl" class="headerlink" title="修改third-party.styl"></a>修改third-party.styl</h2><p>修改<code>themes/next/source/css/_common/components/third-party/third-party.styl</code>, 在最后一行上添加内容:</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">@import "gitalk";</span><br></pre></td></tr></table></figure><h2 id="修改主题配置文件-config-yml"><a href="#修改主题配置文件-config-yml" class="headerlink" title="修改主题配置文件_config.yml"></a>修改主题配置文件_config.yml</h2><p>在主题配置文件<code>themes/next/_config.yml</code>中添加如下内容:<br></p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">gitalk:</span></span><br><span class="line"><span class="attr">  enable:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">  githubID:</span> <span class="string">github帐号</span>           <span class="comment"># 例：vonsdite   注意必须小写 </span></span><br><span class="line"><span class="attr">  repo:</span> <span class="string">仓库名称</span>                 <span class="comment"># 例：vonsdite.github.io</span></span><br><span class="line"><span class="attr">  ClientID:</span> <span class="string">Client</span> <span class="string">ID</span>           <span class="comment"># 上文注册 OAuth Application后得到的值</span></span><br><span class="line"><span class="attr">  ClientSecret:</span> <span class="string">Client</span> <span class="string">Secret</span>   <span class="comment"># 上文注册 OAuth Application后得到的值</span></span><br><span class="line"><span class="attr">  adminUser:</span> <span class="string">github帐号</span>         <span class="comment"># 指定可初始化评论账户, 例：vonsdite   注意必须小写 </span></span><br><span class="line"><span class="attr">  distractionFreeMode:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><p></p><p>以上就是<code>Next</code>中添加<strong>gitalk评论</strong>的配置。</p><h2 id="开启评论"><a href="#开启评论" class="headerlink" title="开启评论"></a>开启评论</h2><p>博客上传到GitHub上后, 打开页面<strong>进入某一篇文章</strong><br>此时会看到如下<br><img src="/images/2018-12-05-20-17-12.png" alt=""></p><p>如果上述配置均无误, 点击<strong>使用GitHub登录</strong>就会建立一个评论区(实际上是在你的Github博客仓库下开了一个<strong>Issue</strong>)</p><h1 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h1><p>如果你某一篇文章不想有评论功能, 你可以在文章的<code>font-matter</code>中加入 <code>comments: false</code></p><p><img src="/images/2018-12-05-21-19-05.png" alt=""></p><p>因为加入了评论功能, 在<code>标签</code>、<code>分类</code>页面都会有个评论区, 所以应到相应页面的<code>index.md</code>的<code>font-matter</code>中加入 <code>comments: false</code></p><p><strong>并修改站点目录下<code>scaffolds</code>的<code>page.md</code>模板</strong>, 因为创建<code>page</code>都会<strong>使用到该模板</strong>, 而页面不需要有评论区<br></p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">title:</span> <span class="string">&#123;&#123;</span> <span class="string">title</span> <span class="string">&#125;&#125;</span></span><br><span class="line"><span class="attr">date:</span> <span class="string">&#123;&#123;</span> <span class="string">date</span> <span class="string">&#125;&#125;</span></span><br><span class="line"><span class="attr">type:</span> </span><br><span class="line"><span class="attr">comments:</span> <span class="literal">false</span></span><br><span class="line"><span class="meta">---</span></span><br></pre></td></tr></table></figure><p></p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Tue Jan 01 2019 11:43:07 GMT+0800 (中国标准时间) --&gt;&lt;h1 id=&quot;Gitalk&quot;&gt;&lt;a href=&quot;#Gitalk&quot; class=&quot;headerlink&quot; title=&quot;Gitalk&quot;&gt;&lt;/a&gt;Gitalk&lt;/h1&gt;&lt;p&gt;&lt;code&gt;Gitalk&lt;/code&gt;: 一个基于 Github Issue 和 Preact 开发的评论插件&lt;br&gt;详情Demo可见:&lt;a href=&quot;https://gitalk.github.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://gitalk.github.io/&lt;/a&gt;&lt;/p&gt;&lt;h1 id=&quot;增加评论区&quot;&gt;&lt;a href=&quot;#增加评论区&quot; class=&quot;headerlink&quot; title=&quot;增加评论区&quot;&gt;&lt;/a&gt;增加评论区&lt;/h1&gt;&lt;h2 id=&quot;注册OAuth-Application&quot;&gt;&lt;a href=&quot;#注册OAuth-Application&quot; class=&quot;headerlink&quot; title=&quot;注册OAuth Application&quot;&gt;&lt;/a&gt;注册OAuth Application&lt;/h2&gt;
    
    </summary>
    
      <category term="Hexo" scheme="https://vonsdite.cn/categories/Hexo/"/>
    
      <category term="Next" scheme="https://vonsdite.cn/categories/Hexo/Next/"/>
    
    
      <category term="Hexo" scheme="https://vonsdite.cn/tags/Hexo/"/>
    
      <category term="Next" scheme="https://vonsdite.cn/tags/Next/"/>
    
      <category term="gitalk" scheme="https://vonsdite.cn/tags/gitalk/"/>
    
  </entry>
  
  <entry>
    <title>Hexo Next主题的TOC设置成不是逐级展开</title>
    <link href="https://vonsdite.cn/posts/6c0dbfd2.html"/>
    <id>https://vonsdite.cn/posts/6c0dbfd2.html</id>
    <published>2018-12-05T07:44:11.000Z</published>
    <updated>2018-12-31T14:15:22.810Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Tue Jan 01 2019 11:43:07 GMT+0800 (中国标准时间) --><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>使用<code>Hexo</code> + <code>Next</code> 主题编写文章时, <code>Next</code>主题会自动给文章生成<code>TOC</code>目录, 如图<br><img src="/images/2018-12-05-15-57-19.png" alt=""></p><a id="more"></a><p><img src="/images/2018-12-05-15-57-37.png" alt=""></p><p>只有当你下拉浏览到相应的<strong>目录级</strong>时, <code>TOC</code>目录才会展开, 这<strong>不方便</strong>别人<strong>一次性</strong>看到所有的目录</p><p><br></p><p>如果想最开始打开文章一次性就把<code>TOC</code>目录全部展开, 可进行如下的修改<br>打开站点目录下的<code>themes/next/source/css/_common/components/sidebar/sidebar-toc.styl</code></p><p>找到如下的代码<br></p><figure class="highlight styl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.post-toc</span> <span class="selector-class">.nav</span> <span class="selector-class">.nav-child</span> &#123; <span class="attribute">display</span>: none; &#125;</span><br></pre></td></tr></table></figure><p></p><p>修改为<br></p><figure class="highlight styl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.post-toc</span> <span class="selector-class">.nav</span> <span class="selector-class">.nav-child</span> &#123; <span class="attribute">display</span>: block; &#125;</span><br></pre></td></tr></table></figure><p></p><p>这样既可完成想要的功能</p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Tue Jan 01 2019 11:43:07 GMT+0800 (中国标准时间) --&gt;&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;使用&lt;code&gt;Hexo&lt;/code&gt; + &lt;code&gt;Next&lt;/code&gt; 主题编写文章时, &lt;code&gt;Next&lt;/code&gt;主题会自动给文章生成&lt;code&gt;TOC&lt;/code&gt;目录, 如图&lt;br&gt;&lt;img src=&quot;/images/2018-12-05-15-57-19.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Hexo" scheme="https://vonsdite.cn/categories/Hexo/"/>
    
      <category term="Next" scheme="https://vonsdite.cn/categories/Hexo/Next/"/>
    
    
      <category term="Hexo" scheme="https://vonsdite.cn/tags/Hexo/"/>
    
      <category term="Next" scheme="https://vonsdite.cn/tags/Next/"/>
    
  </entry>
  
  <entry>
    <title>python 代码运行计时函数比较</title>
    <link href="https://vonsdite.cn/posts/605d5daa.html"/>
    <id>https://vonsdite.cn/posts/605d5daa.html</id>
    <published>2018-12-04T10:23:44.000Z</published>
    <updated>2018-12-04T17:23:47.653Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Tue Jan 01 2019 11:43:07 GMT+0800 (中国标准时间) --><h1 id="计时函数"><a href="#计时函数" class="headerlink" title="计时函数"></a>计时函数</h1><p>计算python某个程序或者代码块的<strong>运行时间</strong>, 可以使用如下方法</p><table><thead><tr><th>方法</th><th>说明</th></tr></thead><tbody><tr><td><a href="/posts/605d5daa.html#1-datetime-datetime-now">datetime.datetime.now()</a></td><td>该方法包含了其他程序使用CPU的时间, <strong>不推荐</strong></td></tr><tr><td><a href="/posts/605d5daa.html#2-time-time">time.time()</a></td><td><code>Unix</code>系统下, 建议使用</td></tr><tr><td><a href="/posts/605d5daa.html#3-time-clock">time.clock()</a></td><td><code>Windows</code>系统下, 建议使用</td></tr><tr><td><a href="/posts/605d5daa.html#4-timeit-default-timer">timeit.default_timer()</a></td><td>跨平台使用, <strong>最推荐</strong><img src="/images/recommend.png" alt=""></td></tr></tbody></table><a id="more"></a><p><img src="/images/2018-12-05-01-08-07.png" alt=""></p><blockquote><p><code>time.clock()</code>返回的是处理器时间, 而因为<strong>Unix</strong>中<strong>jiffy</strong>的缘故, 所以精度不会太高<br>究竟是使用<code>time.clock()</code>, 还是使用<code>time.time()</code>, 由平台来决定<br>总概来讲, 在<strong>Unix系统</strong>中, 建议使用<code>time.time()</code>,<br>在<strong>Windows系统</strong>中, 建议使用<code>time.clock()</code>.<br>要实现跨平台的精度性, 使用<code>timeit</code>来代替<code>time</code>.</p></blockquote><h2 id="1-datetime-datetime-now"><a href="#1-datetime-datetime-now" class="headerlink" title="1.datetime.datetime.now"></a>1.datetime.datetime.now</h2><p>该方法包含了其他程序使用CPU的时间<br><strong>不推荐</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test_datetime</span><span class="params">()</span>:</span></span><br><span class="line">    start = datetime.datetime.now()</span><br><span class="line">    time.sleep(<span class="number">100</span>)</span><br><span class="line">    end = datetime.datetime.now()</span><br><span class="line">    print(<span class="string">"test datetime():"</span>, <span class="string">"%fms"</span> % (float((end - start).microseconds) / <span class="number">1000</span>))</span><br></pre></td></tr></table></figure><h2 id="2-time-time"><a href="#2-time-time" class="headerlink" title="2.time.time"></a>2.time.time</h2><p>该方法包含了其他程序使用CPU的时间, 返回值是浮点数<br><strong>Unix系统下推荐</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test_time</span><span class="params">()</span>:</span></span><br><span class="line">    start = time.time()</span><br><span class="line">    time.sleep(<span class="number">100</span>)</span><br><span class="line">    end = time.time()</span><br><span class="line">    print(<span class="string">"test time():"</span>, <span class="string">"%fms"</span> % ((end - start) * <span class="number">1000</span>))</span><br></pre></td></tr></table></figure><h2 id="3-time-clock"><a href="#3-time-clock" class="headerlink" title="3.time.clock"></a>3.time.clock</h2><p>只计算程序运行CPU的时间<br><strong>Windows系统下推荐</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test_clock</span><span class="params">()</span>:</span></span><br><span class="line">    start = time.clock()</span><br><span class="line">    time.sleep(<span class="number">100</span>)</span><br><span class="line">    end = time.clock()</span><br><span class="line">    print(<span class="string">"test clock():"</span>, <span class="string">"%fms"</span> % ((end - start) * <span class="number">1000</span>))</span><br></pre></td></tr></table></figure><h2 id="4-timeit-default-timer"><a href="#4-timeit-default-timer" class="headerlink" title="4.timeit.default_timer"></a>4.timeit.default_timer</h2><p><strong>实现跨平台</strong>的精度性</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test_timeit</span><span class="params">()</span>:</span></span><br><span class="line">    start = timeit.default_timer()</span><br><span class="line">    time.sleep(<span class="number">100</span>)</span><br><span class="line">    end = timeit.default_timer()</span><br><span class="line">    print(<span class="string">"test timeit():"</span>, <span class="string">"%fms"</span> % ((end - start) * <span class="number">1000</span>))</span><br></pre></td></tr></table></figure><h2 id="测试代码"><a href="#测试代码" class="headerlink" title="测试代码"></a>测试代码</h2><p>结果如图:<br><img src="/images/2018-12-04-21-09-26.png" alt=""></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> timeit</span><br><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line"></span><br><span class="line">SLEEP_TIME = <span class="number">0.001</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test_datetime</span><span class="params">()</span>:</span></span><br><span class="line">    start = datetime.datetime.now()</span><br><span class="line">    time.sleep(SLEEP_TIME)</span><br><span class="line">    end = datetime.datetime.now()</span><br><span class="line">    print(<span class="string">"test datetime():"</span>, <span class="string">"%fms"</span> % (float((end - start).microseconds) / <span class="number">1000</span>))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test_time</span><span class="params">()</span>:</span></span><br><span class="line">    start = time.time()</span><br><span class="line">    time.sleep(SLEEP_TIME)</span><br><span class="line">    end = time.time()</span><br><span class="line">    print(<span class="string">"test time():"</span>, <span class="string">"%fms"</span> % ((end - start) * <span class="number">1000</span>))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test_clock</span><span class="params">()</span>:</span></span><br><span class="line">    start = time.clock()</span><br><span class="line">    time.sleep(SLEEP_TIME)</span><br><span class="line">    end = time.clock()</span><br><span class="line">    print(<span class="string">"test clock():"</span>, <span class="string">"%fms"</span> % ((end - start) * <span class="number">1000</span>))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test_timeit</span><span class="params">()</span>:</span></span><br><span class="line">    start = timeit.default_timer()</span><br><span class="line">    time.sleep(SLEEP_TIME)</span><br><span class="line">    end = timeit.default_timer()</span><br><span class="line">    print(<span class="string">"test timeit():"</span>, <span class="string">"%fms"</span> % ((end - start) * <span class="number">1000</span>))</span><br><span class="line">    </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    test_datetime()</span><br><span class="line">    test_time()</span><br><span class="line">    test_clock()</span><br><span class="line">    test_timeit()</span><br></pre></td></tr></table></figure><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Tue Jan 01 2019 11:43:07 GMT+0800 (中国标准时间) --&gt;&lt;h1 id=&quot;计时函数&quot;&gt;&lt;a href=&quot;#计时函数&quot; class=&quot;headerlink&quot; title=&quot;计时函数&quot;&gt;&lt;/a&gt;计时函数&lt;/h1&gt;&lt;p&gt;计算python某个程序或者代码块的&lt;strong&gt;运行时间&lt;/strong&gt;, 可以使用如下方法&lt;/p&gt;&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;方法&lt;/th&gt;&lt;th&gt;说明&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;&lt;a href=&quot;/posts/605d5daa.html#1-datetime-datetime-now&quot;&gt;datetime.datetime.now()&lt;/a&gt;&lt;/td&gt;&lt;td&gt;该方法包含了其他程序使用CPU的时间, &lt;strong&gt;不推荐&lt;/strong&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;a href=&quot;/posts/605d5daa.html#2-time-time&quot;&gt;time.time()&lt;/a&gt;&lt;/td&gt;&lt;td&gt;&lt;code&gt;Unix&lt;/code&gt;系统下, 建议使用&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;a href=&quot;/posts/605d5daa.html#3-time-clock&quot;&gt;time.clock()&lt;/a&gt;&lt;/td&gt;&lt;td&gt;&lt;code&gt;Windows&lt;/code&gt;系统下, 建议使用&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;a href=&quot;/posts/605d5daa.html#4-timeit-default-timer&quot;&gt;timeit.default_timer()&lt;/a&gt;&lt;/td&gt;&lt;td&gt;跨平台使用, &lt;strong&gt;最推荐&lt;/strong&gt;&lt;img src=&quot;/images/recommend.png&quot; alt=&quot;&quot;&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
    
    </summary>
    
      <category term="Python" scheme="https://vonsdite.cn/categories/Python/"/>
    
    
      <category term="Python" scheme="https://vonsdite.cn/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>ATL MFC的CThreadPool</title>
    <link href="https://vonsdite.cn/posts/2182c76b.html"/>
    <id>https://vonsdite.cn/posts/2182c76b.html</id>
    <published>2018-12-03T07:14:12.000Z</published>
    <updated>2018-12-31T14:14:55.063Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Tue Jan 01 2019 11:43:07 GMT+0800 (中国标准时间) --><h1 id="CThreadPool"><a href="#CThreadPool" class="headerlink" title="CThreadPool"></a>CThreadPool</h1><p>MFC提供了一个叫做<code>CThreadPool</code> 的类，这是一个模板类，基于完成端口开发的一个线程池。</p><h2 id="以下是CThreadPool的使用介绍"><a href="#以下是CThreadPool的使用介绍" class="headerlink" title="以下是CThreadPool的使用介绍"></a>以下是CThreadPool的使用介绍</h2><p>主要的伪代码如下<br><strong>线程池要操作的任务通过实现CTaskBase的DoTask函数来完成</strong></p><a id="more"></a><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"CWorker.h"</span> <span class="comment">// 包含头文件</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> THREADPOOL_SIZE 5</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 实例化线程池对象，CWorker是自己定义的Worker类， MSDN中定义了它的原型，它必须包含下面</span></span><br><span class="line"><span class="comment">// 所列的几个函数Initialize,Execute,Terminate；具体Worker定义见下面代码</span></span><br><span class="line">CThreadPool&lt;CWorker&gt; threadPool; </span><br><span class="line"></span><br><span class="line">threadPool.Initialize(<span class="literal">NULL</span>, THREADPOOL_SIZE);<span class="comment">// 初始化线程池</span></span><br><span class="line">CTaskBase *pTask = <span class="literal">NULL</span>;</span><br><span class="line">pTask = <span class="keyword">new</span> CTask();<span class="comment">// 创建任务</span></span><br><span class="line">threadPool.QueueRequest((CParseWorker::RequestType) pTask); <span class="comment">// 执行线程池任务</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">CThreadPool 调用Initialize，调用此方法来初始化线程池。</span></span><br><span class="line"><span class="comment">HRESULT Initialize(</span></span><br><span class="line"><span class="comment">    void* pvWorkerParam = NULL,</span></span><br><span class="line"><span class="comment">    int nNumThreads = 0,</span></span><br><span class="line"><span class="comment">    DWORD dwStackSize = 0,</span></span><br><span class="line"><span class="comment">    HANDLE hCompletion = INVALID_HANDLE_VALUE) throw();</span></span><br><span class="line"><span class="comment">参数</span></span><br><span class="line"><span class="comment">pvWorkerParam</span></span><br><span class="line"><span class="comment">辅助参数传递给辅助线程对象Initialize， Execute，和Terminate方法。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">nNumThreads</span></span><br><span class="line"><span class="comment">请求的池中的线程数。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">如果nNumThreads是负数，其绝对值的数值将乘以中要获取的线程总数的计算机的处理器数。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">如果nNumThreads为零，ATLS_DEFAULT_THREADSPERPROC 将乘以中要获取的线程总数的计算机的处理器数。 </span></span><br><span class="line"><span class="comment">默认值为每个处理器的 2 个线程。 如有必要，可以包括 atlutil.h 之前定义此符号自己正整数值。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">dwStackSize</span></span><br><span class="line"><span class="comment">在池中每个线程堆栈大小。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">hCompletion</span></span><br><span class="line"><span class="comment">若要将与完成端口相关联的对象的句柄。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">返回值</span></span><br><span class="line"><span class="comment">返回成功，则为 S_OK 或失败时的错误 HRESULT。</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p><code>CWoker.h</code></p><details><summary>展开代码</summary><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> once</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;atlutil.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CTaskBase</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CTask</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CWorker</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">typedef</span> DWORD_PTR RequestType;</span><br><span class="line"></span><br><span class="line">    CWorker();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> BOOL <span class="title">Initialize</span><span class="params">(<span class="keyword">void</span> *pvParam)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">Terminate</span><span class="params">(<span class="keyword">void</span>* <span class="comment">/*pvParam*/</span>)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Execute</span><span class="params">(RequestType dw, <span class="keyword">void</span> *pvParam, OVERLAPPED* pOverlapped)</span> <span class="title">throw</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> BOOL <span class="title">GetWorkerData</span><span class="params">(DWORD <span class="comment">/*dwParam*/</span>, <span class="keyword">void</span> ** <span class="comment">/*ppvData*/</span>)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line">    DWORDm_dwExecs;</span><br><span class="line">    LONGm_lId;</span><br><span class="line">&#125;; <span class="comment">// CWorker</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CTaskBase</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">DoTask</span><span class="params">(<span class="keyword">void</span> *pvParam, OVERLAPPED *pOverlapped)</span></span>=<span class="number">0</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CTask</span> :</span> <span class="keyword">public</span> CTaskBase</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">DoTask</span><span class="params">(<span class="keyword">void</span> *pvParam, OVERLAPPED *pOverlapped)</span></span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><br><br></details><p><code>CWorker.cpp</code></p><details><summary>展开代码</summary><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"CWorker.h"</span></span></span><br><span class="line"></span><br><span class="line">LONG g_lCurrId = <span class="number">-1</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> CTask::DoTask(<span class="keyword">void</span> *pvParam, OVERLAPPED *pOverlapped)</span><br><span class="line">&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">CWorker::CWorker() : m_dwExecs( <span class="number">0</span> )</span><br><span class="line">&#123;</span><br><span class="line">    m_lId = InterlockedIncrement( &amp;g_lCurrId );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">BOOL CWorker::Initialize(<span class="keyword">void</span> *pvParam)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> TRUE;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> CWorker::Terminate(<span class="keyword">void</span>* <span class="comment">/*pvParam*/</span>)</span><br><span class="line">&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> CWorker::Execute(RequestType dw, <span class="keyword">void</span> *pvParam, OVERLAPPED* pOverlapped) <span class="keyword">throw</span>()</span><br><span class="line">&#123;</span><br><span class="line">    CTaskBase* pTask = (CTaskBase*)(DWORD_PTR)dw;</span><br><span class="line">    pTask-&gt;DoTask(pvParam, pOverlapped);</span><br><span class="line">    m_dwExecs++;</span><br><span class="line">    <span class="keyword">delete</span> pTask;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">BOOL CWorker::GetWorkerData(DWORD <span class="comment">/*dwParam*/</span>, <span class="keyword">void</span> ** <span class="comment">/*ppvData*/</span>)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> FALSE;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><br></details><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Tue Jan 01 2019 11:43:07 GMT+0800 (中国标准时间) --&gt;&lt;h1 id=&quot;CThreadPool&quot;&gt;&lt;a href=&quot;#CThreadPool&quot; class=&quot;headerlink&quot; title=&quot;CThreadPool&quot;&gt;&lt;/a&gt;CThreadPool&lt;/h1&gt;&lt;p&gt;MFC提供了一个叫做&lt;code&gt;CThreadPool&lt;/code&gt; 的类，这是一个模板类，基于完成端口开发的一个线程池。&lt;/p&gt;&lt;h2 id=&quot;以下是CThreadPool的使用介绍&quot;&gt;&lt;a href=&quot;#以下是CThreadPool的使用介绍&quot; class=&quot;headerlink&quot; title=&quot;以下是CThreadPool的使用介绍&quot;&gt;&lt;/a&gt;以下是CThreadPool的使用介绍&lt;/h2&gt;&lt;p&gt;主要的伪代码如下&lt;br&gt;&lt;strong&gt;线程池要操作的任务通过实现CTaskBase的DoTask函数来完成&lt;/strong&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="C/C++" scheme="https://vonsdite.cn/categories/C-C/"/>
    
      <category term="MFC" scheme="https://vonsdite.cn/categories/C-C/MFC/"/>
    
    
      <category term="C/C++" scheme="https://vonsdite.cn/tags/C-C/"/>
    
      <category term="MFC" scheme="https://vonsdite.cn/tags/MFC/"/>
    
  </entry>
  
  <entry>
    <title>C/C++ 各种计时函数比较</title>
    <link href="https://vonsdite.cn/posts/18ab89cc.html"/>
    <id>https://vonsdite.cn/posts/18ab89cc.html</id>
    <published>2018-12-03T07:10:28.000Z</published>
    <updated>2018-12-04T06:53:02.956Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Tue Jan 01 2019 11:43:07 GMT+0800 (中国标准时间) --><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>目前有各种计时函数,</p><ol><li>一般的处理都是先调用计时函数, 记下当前时间<code>start</code></li><li>然后运行自己的代码</li><li>再调用计时函数, 记下处理后的时间<code>end</code></li><li>再<code>end</code>和<code>start</code>做差, 就可以得到程序的执行时间</li></ol><p>但是各种计时函数的<strong>精度不一样</strong>.</p><table><thead><tr><th>序号</th><th>函数</th><th>类型</th><th>精度级别</th><th>时间</th></tr></thead><tbody><tr><td>1</td><td><a href="/posts/18ab89cc.html#time">time</a></td><td>C系统调用</td><td>低</td><td>&lt;1s</td></tr><tr><td>2</td><td><a href="/posts/18ab89cc.html#clock">clcok</a> <img src="/images/recommend.png" alt=""><em>windows, linux均可用, 推荐</em></td><td>C系统调用</td><td>低</td><td>&lt;10ms</td></tr><tr><td>3</td><td><a href="/posts/18ab89cc.html#timeGetTime">timeGetTime</a></td><td>Windows API</td><td>中</td><td>&lt;1ms</td></tr><tr><td>4</td><td><a href="/posts/18ab89cc.html#QueryPerformanceCounter">QueryPerformanceCounter</a> <img src="/images/recommend.png" alt=""><em>windows下最好的方法</em></td><td>Windows API</td><td>高</td><td>&lt;0.1ms</td></tr><tr><td>5</td><td><a href="/posts/18ab89cc.html#GetTickCount">GetTickCount</a></td><td>Windows API</td><td>中</td><td>&lt;1ms</td></tr><tr><td>6</td><td><a href="/posts/18ab89cc.html#RDTSC">RDTSC</a> (实际不可用)</td><td>指令</td><td>高</td><td>&lt;0.1ms</td></tr><tr><td>7</td><td><a href="/posts/18ab89cc.html#gettimeofday">gettimeofday</a> <img src="/images/recommend.png" alt=""><em>linux下最好的方法</em></td><td>linux环境下C系统调用</td><td>高</td><td>&lt;0.1ms</td></tr></tbody></table><a id="more"></a><h1 id="time"><a href="#time" class="headerlink" title="time"></a>time</h1><p><code>time()</code>获取当前的系统时间, 返回的结果是一个<code>time_t</code>类型, 其值表示从”<code>CUT(Coordinated Universal Time)</code>时间1970年1月1日00:00:00(称为UNIX系统的Epoch时间)”到”当前时刻的<strong>秒数</strong>“.</p><p><strong>精度</strong>: 低, &lt;1s</p><p>调用Sleep(50), 让程序暂停50ms, 测得运行时间为 0ms, 表明精度的低<br><img src="/images/2018-12-04-11-41-53.png" alt=""></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;time.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SLEEP_TIME 50</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// test time()</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">TestTime</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">time_t</span> start, end;</span><br><span class="line">start = time(<span class="literal">NULL</span>);</span><br><span class="line">Sleep(<span class="number">50</span>);</span><br><span class="line">end = time(<span class="literal">NULL</span>);</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"Sleep("</span> &lt;&lt; SLEEP_TIME &lt;&lt; <span class="string">") :"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"Test time(): "</span> &lt;&lt; (end - start) * <span class="number">1000</span> &lt;&lt; <span class="string">"ms"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="clock"><a href="#clock" class="headerlink" title="clock"></a>clock</h1><p><code>clock()</code>函数返回从”开启这个程序进程”到”程序中调用<code>clock()</code>函数”时之间的<strong>CPU时钟计时单元(clock tick)数</strong>, 在MSDN中称之为<strong>挂钟时间(wal-clock)</strong><br>常量<code>CLOCKS_PER_SEC</code>, 它用来表示一秒钟会有多少个时钟计时单元</p><p><strong>精度</strong>: 低, &lt;10ms<br><img src="/images/2018-12-04-11-47-52.png" alt=""><br></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;time.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SLEEP_TIME 50</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// test clock()</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">TestClock</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">clock_t</span> start, end;</span><br><span class="line">start = clock();</span><br><span class="line">Sleep(<span class="number">50</span>);</span><br><span class="line">end = clock();</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"Sleep("</span> &lt;&lt; SLEEP_TIME &lt;&lt; <span class="string">") :"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; fixed  &lt;&lt; setprecision(<span class="number">17</span>) &lt;&lt; <span class="string">"Test clock(): "</span> &lt;&lt; ((<span class="keyword">double</span>)end - start) / CLOCKS_PER_SEC * <span class="number">1000</span> &lt;&lt; <span class="string">"ms"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><h1 id="timeGetTime"><a href="#timeGetTime" class="headerlink" title="timeGetTime"></a>timeGetTime</h1><p><code>timeGetTime()</code>函数以<strong>毫秒级</strong>的系统时间. 该时间为从系统开启算起所经过的时间, 是<code>windows api</code></p><p><strong>精度</strong>: 中, &lt;1ms<br><img src="/images/2018-12-04-11-53-59.png" alt=""><br></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;windows.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SLEEP_TIME 50</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> comment( lib,<span class="meta-string">"winmm.lib"</span> )</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// test timeGetTime()</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">TestTimeGetTime</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">DWORD start, end;</span><br><span class="line">start = timeGetTime();</span><br><span class="line">Sleep(<span class="number">50</span>);</span><br><span class="line">end = timeGetTime();</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"Sleep("</span> &lt;&lt; SLEEP_TIME &lt;&lt; <span class="string">") :"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; fixed &lt;&lt; setprecision(<span class="number">17</span>) &lt;&lt; <span class="string">"Test timeGetTime(): "</span> &lt;&lt; ((<span class="keyword">double</span>)end - start) / <span class="number">1000</span> * <span class="number">1000</span> &lt;&lt; <span class="string">"ms"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><h1 id="QueryPerformanceCounter"><a href="#QueryPerformanceCounter" class="headerlink" title="QueryPerformanceCounter"></a>QueryPerformanceCounter</h1><p><code>QueryPerformanceCounter()</code>这个函数返回高精确度性能计数器的值, 它可以以<strong>微秒</strong>为单位计时. 但是<code>QueryPerformanceCounter()</code>确切的精确计时的最小单位是与系统有关的, 所以, 必须要查询系统以得到<code>QueryPerformanceCounter()</code>返回的嘀哒声的频率. <code>QueryPerformanceFrequency()</code>提供了这个频率值, 返回每秒嘀哒声的个数.</p><p><strong>精度:</strong> 高, &lt;0.1ms<br><img src="/images/2018-12-04-14-07-14.png" alt=""><br></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;windows.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SLEEP_TIME 50</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// test QueryPerformanceCounter()</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">TestQueryPerformanceCounter</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">LARGE_INTEGER start, end, tc;</span><br><span class="line">QueryPerformanceFrequency(&amp;tc);</span><br><span class="line">QueryPerformanceCounter(&amp;start);</span><br><span class="line">Sleep(<span class="number">50</span>);</span><br><span class="line">QueryPerformanceCounter(&amp;end);</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"Sleep("</span> &lt;&lt; SLEEP_TIME &lt;&lt; <span class="string">") :"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; fixed &lt;&lt; setprecision(<span class="number">17</span>) &lt;&lt; <span class="string">"Test QueryPerformanceCounter(): "</span> &lt;&lt; ((<span class="keyword">double</span>)end.QuadPart - start.QuadPart) / tc.QuadPart * <span class="number">1000</span> &lt;&lt; <span class="string">"ms"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><h1 id="GetTickCount"><a href="#GetTickCount" class="headerlink" title="GetTickCount"></a>GetTickCount</h1><p><code>GetTickCount()</code>返回(retrieve)从操作系统启动到现在所经过(elapsed)的<strong>毫秒数</strong>, 它的返回值是DWORD</p><p><strong>精度:</strong> 中, &lt;1ms<br><img src="/images/2018-12-04-14-11-43.png" alt=""><br></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;windows.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SLEEP_TIME 50</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// test GetTickCount()</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">TestGetTickCount</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">DWORD start, end;</span><br><span class="line">start = GetTickCount();</span><br><span class="line">Sleep(<span class="number">50</span>);</span><br><span class="line">end = GetTickCount();</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"Sleep("</span> &lt;&lt; SLEEP_TIME &lt;&lt; <span class="string">") :"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; fixed &lt;&lt; setprecision(<span class="number">17</span>) &lt;&lt; <span class="string">"Test GetTickCount(): "</span> &lt;&lt; ((<span class="keyword">double</span>)end - start) / <span class="number">1000</span> * <span class="number">1000</span> &lt;&lt; <span class="string">"ms"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><h1 id="RDTSC"><a href="#RDTSC" class="headerlink" title="RDTSC"></a>RDTSC</h1><p><code>RDTSC</code>指令, 在<strong>Intel Pentium</strong>以上级别的CPU中, 有一个称为”时间戳(Time Stamp)”的部件, 它以64位无符号整型数的格式, 记录了自CPU上电以来所经过的时钟周期数。由于目前的<strong>CPU主频都非常高</strong>, 因此这个部件可以达到<strong>纳秒级</strong>的计时精度。这个精确性是上述几种方法所无法比拟的. 在Pentium以上的CPU中, 提供了一条机器指令RDTSC(Read Time Stamp Counter)来读取这个时间戳的数字, 并将其保存在EDX:EAX寄存器对中. 由于EDX:EAX寄存器对恰好是Win32平台下C++语言保存函数返回值的寄存器, 所以我们可以把这条指令看成是一个普通的函数调用, 因为RDTSC不被C++的内嵌汇编器直接支持, 所以我们要用_emit伪指令直接嵌入该指令的机器码形式0X0F、0X31</p><h2 id="然而真相"><a href="#然而真相" class="headerlink" title="然而真相"></a>然而真相</h2><p>多核时代<strong>不宜再用</strong> x86 的 RDTSC 指令测试指令周期和时间</p><ol><li><strong>不能保证</strong>同一块主板上每个核的 TSC 是同步的；</li><li>CPU 的<strong>时钟频率可能变化</strong>, 例如笔记本电脑的节能功能；</li><li><strong>乱序执行</strong>导致 RDTSC 测得的周期数不准, 这个问题从 Pentium Pro 时代就存在。</li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SLEEP_TIME 50</span></span><br><span class="line"><span class="comment">// test RDTSC</span></span><br><span class="line"><span class="comment">// 多核时代不宜再用 x86 的 RDTSC 指令测试指令周期和时间</span></span><br><span class="line"><span class="comment">// 1. 不能保证同一块主板上每个核的 TSC 是同步的；</span></span><br><span class="line"><span class="comment">// 2. CPU 的时钟频率可能变化, 例如笔记本电脑的节能功能；</span></span><br><span class="line"><span class="comment">// 3. 乱序执行导致 RDTSC 测得的周期数不准, 这个问题从 Pentium Pro 时代就存在。</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">inline</span> <span class="keyword">unsigned</span> __<span class="function">int64 <span class="title">GetCycleCount</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">__asm</span><br><span class="line">&#123;</span><br><span class="line">_emit <span class="number">0x3F</span>;</span><br><span class="line">_emit <span class="number">0x31</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 我的CPU频率</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FREQUENCY (2.6*(1&lt;&lt;30))  </span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">TestRDTSC</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">unsigned</span> __int64 start, end;</span><br><span class="line">start = GetCycleCount();</span><br><span class="line">Sleep(<span class="number">50</span>);</span><br><span class="line">end = GetCycleCount();</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"Sleep("</span> &lt;&lt; SLEEP_TIME &lt;&lt; <span class="string">") :"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; fixed &lt;&lt; setprecision(<span class="number">17</span>) &lt;&lt; <span class="string">"Test RDTSC(): "</span> &lt;&lt; ((<span class="keyword">double</span>)end - start) / FREQUENCY * <span class="number">1000</span> &lt;&lt; <span class="string">"ms"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="gettimeofday"><a href="#gettimeofday" class="headerlink" title="gettimeofday"></a>gettimeofday</h1><p><code>gettimeofday()</code> linux环境下的计时函数, <code>int gettimeofday(struct timeval* tv , struct timezone* tz)</code>, <code>gettimeofday()</code>会把目前的时间有<code>tv</code>所指的结构返回, 当地时区的信息则放到<code>tz</code>所指的结构中.</p><p><strong>精度:</strong> 高, &lt;0.1ms</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SLEEP_TIME 50</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// test gettimeofday()</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// timeval结构定义为:</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">timeval</span> &#123;</span></span><br><span class="line"><span class="keyword">long</span> tv_sec;  <span class="comment">// 秒</span></span><br><span class="line"><span class="keyword">long</span> tv_usec; <span class="comment">// 微秒</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//timezone 结构定义为:</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">timezone</span> &#123;</span></span><br><span class="line"><span class="keyword">int</span> tz_minuteswest; <span class="comment">// 和Greenwich 时间差了多少分钟</span></span><br><span class="line"><span class="keyword">int</span> tz_dsttime;<span class="comment">// 日光节约时间的状态</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">TestGetTimeOfDay</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">timeval start, end;</span><br><span class="line"><span class="keyword">double</span> timeuse;</span><br><span class="line">gettimeofday(&amp;start, <span class="literal">NULL</span>);</span><br><span class="line">    Sleep(<span class="number">50</span>);</span><br><span class="line">gettimefoday(&amp;end, <span class="literal">NULL</span>);</span><br><span class="line">timeuse = end.tv_sec - start.tv_sec + (end.tv_usec - start.tv_usec) / <span class="number">50000.0</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"Sleep("</span> &lt;&lt; SLEEP_TIME &lt;&lt; <span class="string">") :"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; fixed &lt;&lt; setprecision(<span class="number">17</span>) &lt;&lt; <span class="string">"Test gettimeofday(): "</span> &lt;&lt; timeuse * <span class="number">1000</span> &lt;&lt; <span class="string">"ms"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Tue Jan 01 2019 11:43:07 GMT+0800 (中国标准时间) --&gt;&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;目前有各种计时函数,&lt;/p&gt;&lt;ol&gt;&lt;li&gt;一般的处理都是先调用计时函数, 记下当前时间&lt;code&gt;start&lt;/code&gt;&lt;/li&gt;&lt;li&gt;然后运行自己的代码&lt;/li&gt;&lt;li&gt;再调用计时函数, 记下处理后的时间&lt;code&gt;end&lt;/code&gt;&lt;/li&gt;&lt;li&gt;再&lt;code&gt;end&lt;/code&gt;和&lt;code&gt;start&lt;/code&gt;做差, 就可以得到程序的执行时间&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;但是各种计时函数的&lt;strong&gt;精度不一样&lt;/strong&gt;.&lt;/p&gt;&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;序号&lt;/th&gt;&lt;th&gt;函数&lt;/th&gt;&lt;th&gt;类型&lt;/th&gt;&lt;th&gt;精度级别&lt;/th&gt;&lt;th&gt;时间&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;1&lt;/td&gt;&lt;td&gt;&lt;a href=&quot;/posts/18ab89cc.html#time&quot;&gt;time&lt;/a&gt;&lt;/td&gt;&lt;td&gt;C系统调用&lt;/td&gt;&lt;td&gt;低&lt;/td&gt;&lt;td&gt;&amp;lt;1s&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;2&lt;/td&gt;&lt;td&gt;&lt;a href=&quot;/posts/18ab89cc.html#clock&quot;&gt;clcok&lt;/a&gt; &lt;img src=&quot;/images/recommend.png&quot; alt=&quot;&quot;&gt;&lt;em&gt;windows, linux均可用, 推荐&lt;/em&gt;&lt;/td&gt;&lt;td&gt;C系统调用&lt;/td&gt;&lt;td&gt;低&lt;/td&gt;&lt;td&gt;&amp;lt;10ms&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;3&lt;/td&gt;&lt;td&gt;&lt;a href=&quot;/posts/18ab89cc.html#timeGetTime&quot;&gt;timeGetTime&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Windows API&lt;/td&gt;&lt;td&gt;中&lt;/td&gt;&lt;td&gt;&amp;lt;1ms&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;4&lt;/td&gt;&lt;td&gt;&lt;a href=&quot;/posts/18ab89cc.html#QueryPerformanceCounter&quot;&gt;QueryPerformanceCounter&lt;/a&gt; &lt;img src=&quot;/images/recommend.png&quot; alt=&quot;&quot;&gt;&lt;em&gt;windows下最好的方法&lt;/em&gt;&lt;/td&gt;&lt;td&gt;Windows API&lt;/td&gt;&lt;td&gt;高&lt;/td&gt;&lt;td&gt;&amp;lt;0.1ms&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;5&lt;/td&gt;&lt;td&gt;&lt;a href=&quot;/posts/18ab89cc.html#GetTickCount&quot;&gt;GetTickCount&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Windows API&lt;/td&gt;&lt;td&gt;中&lt;/td&gt;&lt;td&gt;&amp;lt;1ms&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;6&lt;/td&gt;&lt;td&gt;&lt;a href=&quot;/posts/18ab89cc.html#RDTSC&quot;&gt;RDTSC&lt;/a&gt; (实际不可用)&lt;/td&gt;&lt;td&gt;指令&lt;/td&gt;&lt;td&gt;高&lt;/td&gt;&lt;td&gt;&amp;lt;0.1ms&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;7&lt;/td&gt;&lt;td&gt;&lt;a href=&quot;/posts/18ab89cc.html#gettimeofday&quot;&gt;gettimeofday&lt;/a&gt; &lt;img src=&quot;/images/recommend.png&quot; alt=&quot;&quot;&gt;&lt;em&gt;linux下最好的方法&lt;/em&gt;&lt;/td&gt;&lt;td&gt;linux环境下C系统调用&lt;/td&gt;&lt;td&gt;高&lt;/td&gt;&lt;td&gt;&amp;lt;0.1ms&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
    
    </summary>
    
      <category term="C/C++" scheme="https://vonsdite.cn/categories/C-C/"/>
    
    
      <category term="C/C++" scheme="https://vonsdite.cn/tags/C-C/"/>
    
  </entry>
  
</feed>
