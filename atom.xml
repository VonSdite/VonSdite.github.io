<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Von Sdite</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://vonsdite.cn/"/>
  <updated>2018-12-11T07:20:12.563Z</updated>
  <id>https://vonsdite.cn/</id>
  
  <author>
    <name>Von Sdite</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>K-Means 算法实现, 动态显示变化</title>
    <link href="https://vonsdite.cn/posts/b62ef61c.html"/>
    <id>https://vonsdite.cn/posts/b62ef61c.html</id>
    <published>2018-12-11T07:07:57.000Z</published>
    <updated>2018-12-11T07:20:12.563Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Fri Dec 14 2018 21:02:55 GMT+0800 (中国标准时间) --><h1 id="项目介绍"><a href="#项目介绍" class="headerlink" title="项目介绍"></a>项目介绍</h1><p><strong>源代码: <a href="https://github.com/VonSdite/KMeans" target="_blank" rel="noopener">https://github.com/VonSdite/KMeans</a></strong> <img src="/images/2018-12-11-15-13-19.png" alt=""><strong>以后放出来</strong><br><strong>使用前记得先安装相关的包</strong><br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install -r requirement.txt</span><br></pre></td></tr></table></figure><p></p><h2 id="以本项目为例"><a href="#以本项目为例" class="headerlink" title="以本项目为例"></a>以本项目为例</h2><ol><li>先运行<code>dataClean.py</code>程序, 对数据<code>iris.data</code>做处理, 得到<code>iris.csv</code>以及真实的分类图<br><img src="/images/2.png" alt=""></li></ol><a id="more"></a><blockquote><p><code>iris.data</code>是鸢尾花数据集, 包含3个不同品种的鸢尾花(Setosa, Versicolour, and Virginica)数据, 以及花瓣和萼片的长度、宽度。 数据有150行4列, 150行指150朵花, 4列分别是Sepal Length(萼片长度), Sepal Width(萼片宽度), Petal Length(花瓣长度) and Petal Width(花瓣宽度)</p></blockquote><ol start="2"><li>运行<code>main.py</code></li></ol><p><img src="/images/1.png" alt=""></p><ol start="3"><li>点击 <code>打开</code>-<code>open file</code>, 打开csv文件(也只能打开csv文件)</li></ol><p><strong>注意csv文件的要求:</strong></p><ul><li>要带有表头</li><li>数据是两列数值数据, 所以需要先处理数据<br>数据格式类似如下<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">x,y</span><br><span class="line">1,1</span><br><span class="line">2,3</span><br><span class="line">4,5</span><br></pre></td></tr></table></figure></li></ul><ol start="4"><li><p>打开后, 会先绘制出数据的散点图<br><img src="/images/3.png" alt=""></p></li><li><p>输入<code>分类个数k</code>-点击<code>分类</code>, 分类过程如下</p></li></ol><p>分类过程中, <strong>左下角状态栏</strong>会显示<strong>当前的状态</strong><br><img src="/images/4.gif" alt=""></p><h2 id="分类结果比较"><a href="#分类结果比较" class="headerlink" title="分类结果比较"></a>分类结果比较</h2><p><img src="/images/6.jpg" alt=""></p><p><strong>分析</strong></p><p>因为数据只用到了<strong>萼片的宽度和长度</strong>, 只做了二维数据的<code>k-means</code>, 所以对于区分<strong>1类</strong>和<strong>2类花朵</strong>的效果还没达到完全区分的效果, 但是已经能万全区分<strong>0类花朵</strong>了</p><p>提升方面, 提升维度, 把花瓣的宽度和长度也考虑进去, 可能可以更好的区分</p><h1 id="K-Means介绍"><a href="#K-Means介绍" class="headerlink" title="K-Means介绍"></a>K-Means介绍</h1><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p><code>K-means算法</code>是集简单和经典于一身的<strong>基于距离</strong>的聚类算法</p><p>采用距离作为相似性的评价指标, 即认为两个对象的距离越近, 其相似度就越大。</p><p>该算法认为类簇是由距离靠近的对象组成的, 因此把得到<strong>紧凑且独立</strong>的簇作为最终目标。</p><h2 id="核心思想"><a href="#核心思想" class="headerlink" title="核心思想"></a>核心思想</h2><p>通过迭代寻找k个类簇的一种划分方案, 使得用这k个类簇的均值来代表相应各类样本时所得的总体误差最小。</p><p>k个聚类具有以下特点：各聚类本身尽可能的紧凑, 而各聚类之间尽可能的分开。</p><p>k-means算法的基础是最小误差平方和准则,</p><p>其代价函数是：<br><img src="/images/6.png" alt=""> 式中, μc(i)表示第i个聚类的均值。</p><p>各类簇内的样本越相似, 其与该类均值间的误差平方越小, 对所有类所得到的误差平方求和, 即可验证分为k类时, 各聚类是否是最优的。</p><p>上式的代价函数无法用解析的方法最小化, 只能有迭代的方法。</p><h2 id="算法实现步骤"><a href="#算法实现步骤" class="headerlink" title="算法实现步骤"></a>算法实现步骤</h2><p>k-means算法是将样本聚类成 k个簇(cluster), 其中k是用户给定的, 其求解过程非常直观简单, 具体算法描述如下：</p><p>1) 随机选取 k个聚类质心点</p><p>2) 重复下面过程直到收敛 {</p><p>对于每一个样例 i, 计算其应该属于的类：<br><img src="/images/7.png" alt=""></p><p>对于每一个类 j, 重新计算该类的质心：<br><img src="/images/8.png" alt=""><br>}</p><p>其伪代码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">创建k个点作为初始的质心点(随机选择)</span><br><span class="line"></span><br><span class="line">当任意一个点的簇分配结果发生改变时</span><br><span class="line"></span><br><span class="line">       对数据集中的每一个数据点</span><br><span class="line"></span><br><span class="line">              对每一个质心</span><br><span class="line"></span><br><span class="line">                     计算质心与数据点的距离</span><br><span class="line"></span><br><span class="line">              将数据点分配到距离最近的簇</span><br><span class="line"></span><br><span class="line">       对每一个簇, 计算簇中所有点的均值, 并将均值作为质心</span><br></pre></td></tr></table></figure><h2 id="K-means算法补充"><a href="#K-means算法补充" class="headerlink" title="K-means算法补充"></a>K-means算法补充</h2><p>K-means算法的缺点及改进方法</p><p>(1)k值的选择是用户指定的,不同的k得到的结果会有挺大的不同,如下图所示,左边是k=3的结果,这个就太稀疏了,蓝色的那个簇其实是可以再划分成两个簇的。而右图是k=5的结果,可以看到红色菱形和蓝色菱形这两个簇应该是可以合并成一个簇的：</p><p>改进：</p><p>对k的选择可以先用一些算法分析数据的分布,如重心和密度等,然后选择合适的k</p><p><img src="/images/9.png" alt=""></p><p>(2)对k个<strong>初始质心</strong>的选择比较敏感,容易陷入<strong>局部最小值</strong>。例如,我们上面的算法运行的时候,有可能会得到不同的结果,如下面这两种情况。K-means也是收敛了,只是收敛到了局部最小值：</p><p>改进：<br>有人提出了另一个成为二分k均值(bisecting k-means)算法,它对初始的k个质心的选择就不太敏感</p><p><img src="/images/10.png" alt=""></p><p>(3)存在局限性,如下面这种非球状的数据分布就搞不定了：</p><p><img src="/images/11.png" alt=""></p><p>(4)数据集<strong>比较大</strong>的时候,收敛会<strong>比较慢</strong>。</p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Fri Dec 14 2018 21:02:55 GMT+0800 (中国标准时间) --&gt;&lt;h1 id=&quot;项目介绍&quot;&gt;&lt;a href=&quot;#项目介绍&quot; class=&quot;headerlink&quot; title=&quot;项目介绍&quot;&gt;&lt;/a&gt;项目介绍&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;源代码: &lt;a href=&quot;https://github.com/VonSdite/KMeans&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://github.com/VonSdite/KMeans&lt;/a&gt;&lt;/strong&gt; &lt;img src=&quot;/images/2018-12-11-15-13-19.png&quot; alt=&quot;&quot;&gt;&lt;strong&gt;以后放出来&lt;/strong&gt;&lt;br&gt;&lt;strong&gt;使用前记得先安装相关的包&lt;/strong&gt;&lt;br&gt;&lt;/p&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;pip install -r requirement.txt&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;&lt;/p&gt;&lt;h2 id=&quot;以本项目为例&quot;&gt;&lt;a href=&quot;#以本项目为例&quot; class=&quot;headerlink&quot; title=&quot;以本项目为例&quot;&gt;&lt;/a&gt;以本项目为例&lt;/h2&gt;&lt;ol&gt;&lt;li&gt;先运行&lt;code&gt;dataClean.py&lt;/code&gt;程序, 对数据&lt;code&gt;iris.data&lt;/code&gt;做处理, 得到&lt;code&gt;iris.csv&lt;/code&gt;以及真实的分类图&lt;br&gt;&lt;img src=&quot;/images/2.png&quot; alt=&quot;&quot;&gt;&lt;/li&gt;&lt;/ol&gt;
    
    </summary>
    
      <category term="Python" scheme="https://vonsdite.cn/categories/Python/"/>
    
      <category term="KMeans" scheme="https://vonsdite.cn/categories/Python/KMeans/"/>
    
    
      <category term="Python" scheme="https://vonsdite.cn/tags/Python/"/>
    
      <category term="KMeans" scheme="https://vonsdite.cn/tags/KMeans/"/>
    
  </entry>
  
  <entry>
    <title>Linux umask的使用</title>
    <link href="https://vonsdite.cn/posts/11eb8483.html"/>
    <id>https://vonsdite.cn/posts/11eb8483.html</id>
    <published>2018-12-10T01:46:42.000Z</published>
    <updated>2018-12-10T02:47:52.871Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Fri Dec 14 2018 21:02:55 GMT+0800 (中国标准时间) --><h1 id="umask"><a href="#umask" class="headerlink" title="umask"></a>umask</h1><p>在Linux系统下, 创建一个文件/目录时, 系统都会给它赋予一个默认的权限, 这个默认权限就是<code>umask</code>设置的。<br><code>umask</code>设置了用户创建文件的默认权限, 它与<code>chmod</code>的效果刚好相反, <code>umask</code>设置的是权限的<strong>反码</strong>, 也叫作<strong>预设权限(权限掩码)</strong></p><a id="more"></a><p><br><br>你的系统管理员必须要为你设置一个合理的 <code>umask</code>值, 以确保你创建的文件具有所希望的缺省权限, 防止其他非同组用户对你的文件具有写权限。在已经登录之后, 可以按照个人的偏好使用<code>umask</code>命令来改变文件创建的缺省权限。相应的改变<strong>直到退出该shell</strong>或<strong>使用另外的<code>umask</code>命令之前</strong>一直有效。</p><p><br></p><p>一般来说, <code>umask</code>命令是在<code>/etc/profile</code>文件中设置的, 每个用户在登录时都会引用这个文件, 所以如果希望改变所有用户的<code>umask</code>, 可以在该文件中加入相应的条目。如果希望永久 性地设置自己的<code>umask</code>值, 那么就把它放在自己<code>$HOME</code>目录下的<code>.profile</code>或<code>.bash_profile</code>文件中。</p><h1 id="umask的使用"><a href="#umask的使用" class="headerlink" title="umask的使用"></a>umask的使用</h1><p><code>umask</code>命令允许你设定文件创建时的缺省模式, 对应每一类用户(文件属主、同组用户、其他用户)存在一个相应的<code>umask</code>值中的数字。</p><p><strong>注意:</strong></p><ul><li><strong>对于文件</strong>来说, 权限数字的<strong>最大值是6</strong>。因为系统不允许你在创建一个文本文件时就赋予<strong>它执行权限</strong>, 必须在创建后用<code>chmod</code>命令增加这一权限。</li><li><strong>目录</strong>允许设置<strong>执行权限</strong>, 这样针对目录来说, <code>umask</code>中各个数字最大可以到<strong>7</strong></li></ul><h2 id="查看当前umask"><a href="#查看当前umask" class="headerlink" title="查看当前umask"></a>查看当前umask</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">umask</span></span><br><span class="line">0002             <span class="comment"># 只看后四位</span></span><br><span class="line">$ <span class="built_in">umask</span> -S</span><br><span class="line">u=rwx,g=rwx,o=rwx <span class="comment"># 字符形式查看</span></span><br></pre></td></tr></table></figure><h2 id="设置umask"><a href="#设置umask" class="headerlink" title="设置umask"></a>设置umask</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">umask</span> nnn   <span class="comment"># nnn为 000-777</span></span><br></pre></td></tr></table></figure><p><img src="/images/2018-12-10-10-38-46.png" alt=""></p><h2 id="计算umask的值"><a href="#计算umask的值" class="headerlink" title="计算umask的值"></a>计算umask的值</h2><p>设置umask值后, 怎么快速得到创建文件的权限呢</p><h3 id="减法"><a href="#减法" class="headerlink" title="减法"></a>减法</h3><p>一种是使用<strong>减法</strong>。<br>记住文件权限最大值是6, 目录权限最大值是7,<br>当你<code>umask 002</code>, 那么<strong>文件</strong>得到的权限就是 664, 因为 6-0=6 6-0=6 6-2=4, <strong>目录</strong>则是775</p><h3 id="异或"><a href="#异或" class="headerlink" title="异或"></a>异或</h3><p>另一种就是<strong>异或</strong>。<br>记住文件权限最大值6的二进制是110, 目录权限最大值7的二进制是111,<br>当你<code>umask 002</code>, 那么<strong>文件</strong>得到的权限就是 664, 因为<strong>二进制异或</strong>: 000^110=110、000^110=110、010^110=100, 所以权限就是664, <strong>目录</strong>则是775</p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Fri Dec 14 2018 21:02:55 GMT+0800 (中国标准时间) --&gt;&lt;h1 id=&quot;umask&quot;&gt;&lt;a href=&quot;#umask&quot; class=&quot;headerlink&quot; title=&quot;umask&quot;&gt;&lt;/a&gt;umask&lt;/h1&gt;&lt;p&gt;在Linux系统下, 创建一个文件/目录时, 系统都会给它赋予一个默认的权限, 这个默认权限就是&lt;code&gt;umask&lt;/code&gt;设置的。&lt;br&gt;&lt;code&gt;umask&lt;/code&gt;设置了用户创建文件的默认权限, 它与&lt;code&gt;chmod&lt;/code&gt;的效果刚好相反, &lt;code&gt;umask&lt;/code&gt;设置的是权限的&lt;strong&gt;反码&lt;/strong&gt;, 也叫作&lt;strong&gt;预设权限(权限掩码)&lt;/strong&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Linux" scheme="https://vonsdite.cn/categories/Linux/"/>
    
      <category term="Command" scheme="https://vonsdite.cn/categories/Linux/Command/"/>
    
    
      <category term="Linux" scheme="https://vonsdite.cn/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>Python 提升python速度</title>
    <link href="https://vonsdite.cn/posts/2a5aa04e.html"/>
    <id>https://vonsdite.cn/posts/2a5aa04e.html</id>
    <published>2018-12-08T12:25:14.000Z</published>
    <updated>2018-12-09T04:27:00.558Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Fri Dec 14 2018 21:02:56 GMT+0800 (中国标准时间) --><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>可以使用 <strong>Cython</strong>, <strong>PyPy</strong>提升 python的速度</p><a id="more"></a><h1 id="Cython"><a href="#Cython" class="headerlink" title="Cython"></a>Cython</h1><p><strong>Cython</strong>是让Python脚本<strong>支持C语言扩展</strong>的编译器, Cython能够将Python+C混合编码的.pyx脚本转换为C代码, 主要用于优化Python脚本性能或Python调用C函数库。由于Python固有的性能差的问题, 用C扩展Python成为提高Python性能常用方法, Cython算是较为常见的一种扩展方式。</p><p>推荐文章:<br><a href="https://www.jianshu.com/p/fc5025094912" target="_blank" rel="noopener">https://www.jianshu.com/p/fc5025094912</a><br><a href="https://www.cnblogs.com/yafengabc/p/6130849.html" target="_blank" rel="noopener">https://www.cnblogs.com/yafengabc/p/6130849.html</a><br><a href="https://baijiahao.baidu.com/s?id=1606135207446878267&amp;wfr=spider&amp;for=pc" target="_blank" rel="noopener">https://baijiahao.baidu.com/s?id=1606135207446878267&amp;wfr=spider&amp;for=pc</a><br><a href="https://baijiahao.baidu.com/s?id=1606135207446878267&amp;wfr=spider&amp;for=pc" target="_blank" rel="noopener">https://baijiahao.baidu.com/s?id=1606135207446878267&amp;wfr=spider&amp;for=pc</a></p><h1 id="CPython-与-PyPy"><a href="#CPython-与-PyPy" class="headerlink" title="CPython 与 PyPy"></a>CPython 与 PyPy</h1><p>CPython: 是用<strong>C语言实现Python</strong>, 是目前应用最广泛的解释器。最新的语言特性都是在这个上面先实现的, 基本包含了所有第三方库支持, 但是CPython有几个缺陷, 一是全局锁使Python在多线程效能上表现不佳, 二是CPython无法支持JIT（即时编译）, 导致其执行速度不及Java和Javascipt等语言。于是出现了Pypy。</p><p>Pypy: 是用<strong>Python自身实现的解释器</strong>。针对CPython的缺点进行了各方面的改良, 性能得到很大的提升。最重要的一点就是Pypy集成了JIT。但是, Pypy无法支持官方的C/Python API, 导致无法使用例如Numpy, Scipy等重要的第三方库。这也是现在Pypy没有被广泛使用的原因吧。</p><h2 id="PyPy与CPython的不同"><a href="#PyPy与CPython的不同" class="headerlink" title="PyPy与CPython的不同"></a>PyPy与CPython的不同</h2><ul><li>CPython是使用解释执行的方式, 这样的实现方式在性能上是很凄惨的。</li><li>而PyPy使用了JIT(即时编译)技术, 在性能上得到了提升。</li></ul><h2 id="Python的解释器"><a href="#Python的解释器" class="headerlink" title="Python的解释器:"></a>Python的解释器:</h2><ol><li><p>由于Python是动态编译的语言, 和C/C++、Java或者Kotlin等静态语言不同, 它是在运行时一句一句代码地边编译边执行的, 而Java是提前将高级语言编译成了JVM字节码, 运行时直接通过JVM和机器打交道, 所以进行密集计算时运行速度远高于动态编译语言。</p></li><li><p>PyPy, 它使用了JIT（即时编译）技术, 混合了动态编译和静态编译的特性, <strong>仍然是一句一句编译源代码</strong>, 但是会将翻译过的代码缓存起来以降低性能损耗。相对于静态编译代码, 即时编译的代码可以处理延迟绑定并增强安全性。绝大部分 Python代码都可以在PyPy下运行, 但是PyPy和CPython有一些是不同的。</p></li></ol><h1 id="一个速度比较例子"><a href="#一个速度比较例子" class="headerlink" title="一个速度比较例子"></a>一个速度比较例子</h1><p>使用<strong>C++</strong>和<strong>Python</strong>分别实现目录大小计算的算法。<br>其中的要求是:</p><ul><li>计算<strong>单个</strong>目录大小, 返回一个<strong>数值</strong></li><li>计算<strong>目录及目录下所有子目录</strong>大小, 返回一个<strong>map表</strong></li></ul><h2 id="结果比较"><a href="#结果比较" class="headerlink" title="结果比较"></a>结果比较</h2><h3 id="Python的运行结果"><a href="#Python的运行结果" class="headerlink" title="Python的运行结果"></a>Python的运行结果</h3><p><img src="/images/2018-12-09-11-59-04.png" alt=""><br><img src="/images/2018-12-09-12-01-01.png" alt=""><br>单纯看Python的结果, 可以看出来<strong>线程池</strong>的优化大大提高了递归计算的速度, 将近提升了<strong>10倍</strong>的效率</p><h3 id="C-的运行结果"><a href="#C-的运行结果" class="headerlink" title="C++的运行结果"></a>C++的运行结果</h3><p><img src="/images/2018-12-09-12-13-14.png" alt=""><br>通过比较<strong>单个目录大小</strong>计算, C++比Python快了近<strong>5.6倍</strong><br>而<strong>计算所有目录大小</strong>, C++比Python快了近<strong>5.6倍</strong></p><h3 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h3><p><strong>线程池</strong>的池子大小设为<strong>5</strong>。<br>计算的目录都是<code>E:\1Code\Repositories</code>, <strong>5.8G的大小</strong><br>为了避免<strong>全局线程池</strong>影响到其他函数的运行效率, 线程池实现的方法 <strong>单独运行</strong><br>两者的实现算法都是<strong>一致</strong>的</p><h4 id="Python实现了4种方法"><a href="#Python实现了4种方法" class="headerlink" title="Python实现了4种方法"></a>Python实现了<strong>4种</strong>方法</h4><ul><li>第一种是使用<code>os.walk</code>的生成器来遍历计算单个目录大小, 名为<code>get_dir_size</code></li><li>第二种是<strong>递归计算</strong>单个目录大小, 名为<code>get_dir_size_recursive</code></li><li>第三种是<strong>递归计算</strong>目录及目录下所有子目录大小, 名为<code>get_all_dir_size</code></li><li>第四种是<strong>线程池</strong>+<strong>递归计算</strong>目录及目录下所有子目录大小, 名为<code>get_all_dir_size_thread</code></li></ul><h4 id="C-实现了2种方法"><a href="#C-实现了2种方法" class="headerlink" title="C++实现了2种方法"></a>C++实现了<strong>2种</strong>方法</h4><ul><li>第一种是<strong>递归计算</strong>单个目录大小, 名为<code>SimpleGetDirectorySizeRecursive</code></li><li>第二种是<strong>递归计算</strong>目录及目录下所有子目录大小, 名为<code>SimpleGetDirectorySize</code></li></ul><h2 id="Python的实现"><a href="#Python的实现" class="headerlink" title="Python的实现"></a>Python的实现</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> timeit</span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">import</span> threadpool</span><br><span class="line"><span class="keyword">from</span> os.path <span class="keyword">import</span> join, getsize, isdir, isfile</span><br><span class="line"></span><br><span class="line"><span class="comment"># os.walk加列表推导式求单个目录的大小</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_dir_size</span><span class="params">(dir)</span>:</span></span><br><span class="line">    size = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> root, dirs, files <span class="keyword">in</span> os.walk(dir):</span><br><span class="line">        size += sum([getsize(join(root, name)) <span class="keyword">for</span> name <span class="keyword">in</span> files])</span><br><span class="line">    <span class="keyword">return</span> size</span><br><span class="line"></span><br><span class="line"><span class="comment"># 递归求单个目录的大小</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_dir_size_recursive</span><span class="params">(dir)</span>:</span></span><br><span class="line">    size = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> f <span class="keyword">in</span> os.listdir(dir):</span><br><span class="line">        ff = join(dir, f)</span><br><span class="line">        <span class="keyword">if</span> isdir(ff):</span><br><span class="line">            size += get_dir_size_recursive(ff)</span><br><span class="line">        <span class="keyword">elif</span> isfile(ff):</span><br><span class="line">            size += getsize(ff)</span><br><span class="line">    <span class="keyword">return</span> size</span><br><span class="line"></span><br><span class="line"><span class="comment"># 去掉目录中的 `:` `\` `/`</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">clear_path_format</span><span class="params">(dir)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> dir.replace(<span class="string">':'</span>, <span class="string">''</span>).replace(<span class="string">'\\'</span>, <span class="string">''</span>).replace(<span class="string">'/'</span>, <span class="string">''</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 递归求目录及所有子目录的大小</span></span><br><span class="line">dir_dict = dict()</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_all_dir_size</span><span class="params">(parent_dirs, dir)</span>:</span></span><br><span class="line">    dir_dict[clear_path_format(dir)] = <span class="number">0</span></span><br><span class="line">    size = <span class="number">0</span></span><br><span class="line">    parent_dirs.append(clear_path_format(dir))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> f <span class="keyword">in</span> os.listdir(dir):</span><br><span class="line">        ff = join(dir, f)</span><br><span class="line">        <span class="keyword">if</span> isdir(ff):</span><br><span class="line">            get_all_dir_size(parent_dirs, ff)</span><br><span class="line">        <span class="keyword">elif</span> isfile(ff):</span><br><span class="line">            size += getsize(ff)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> size &gt; <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">for</span> path <span class="keyword">in</span> parent_dirs:</span><br><span class="line">            dir_dict[path] += size</span><br><span class="line"></span><br><span class="line">dir_dict_thread = dict()</span><br><span class="line">pool = threadpool.ThreadPool(<span class="number">5</span>)</span><br><span class="line">mutex = threading.Lock()</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_all_dir_size_thread</span><span class="params">(parent_dirs, dir)</span>:</span></span><br><span class="line">    size = <span class="number">0</span></span><br><span class="line">    parent_dirs.append(clear_path_format(dir))</span><br><span class="line">    <span class="keyword">for</span> f <span class="keyword">in</span> os.listdir(dir):</span><br><span class="line">        ff = join(dir, f)</span><br><span class="line">        <span class="keyword">if</span> isdir(ff):</span><br><span class="line">            mutex.acquire()</span><br><span class="line">            pool.putRequest(</span><br><span class="line">                        threadpool.makeRequests(</span><br><span class="line">                            get_all_dir_size_thread,</span><br><span class="line">                            [</span><br><span class="line">                                (</span><br><span class="line">                                    (parent_dirs.copy(), ff),</span><br><span class="line">                                    <span class="keyword">None</span></span><br><span class="line">                                )</span><br><span class="line">                            ]</span><br><span class="line">                        )[<span class="number">0</span>]</span><br><span class="line">                    )</span><br><span class="line">            mutex.release()</span><br><span class="line">        <span class="keyword">elif</span> isfile(ff):</span><br><span class="line">            size += getsize(ff)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> size &gt; <span class="number">0</span>:</span><br><span class="line">        mutex.acquire()</span><br><span class="line">        <span class="keyword">for</span> path <span class="keyword">in</span> parent_dirs:</span><br><span class="line">            dir_dict_thread.setdefault(path, <span class="number">0</span>)</span><br><span class="line">            dir_dict_thread[path] += size</span><br><span class="line">        mutex.release()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    dir = <span class="string">r'E:\1Code\Repositories'</span></span><br><span class="line">    print(<span class="string">'Test "%s" size   ////// just python'</span> %  dir)</span><br><span class="line"></span><br><span class="line">    start = timeit.default_timer()</span><br><span class="line">    size = get_dir_size(dir)</span><br><span class="line">    end = timeit.default_timer()</span><br><span class="line">    print(<span class="string">'get_dir_size:            %fGB-&gt; use time: %fs'</span> % (size / (<span class="number">1</span> &lt;&lt; <span class="number">30</span>), end-start))</span><br><span class="line"></span><br><span class="line">    start = timeit.default_timer()</span><br><span class="line">    size = get_dir_size_recursive(dir)</span><br><span class="line">    end = timeit.default_timer()</span><br><span class="line">    print(<span class="string">'get_dir_size_recursive:  %fGB -&gt; use time: %fs'</span> % (size / (<span class="number">1</span> &lt;&lt; <span class="number">30</span>), end - start))</span><br><span class="line"></span><br><span class="line">    start = timeit.default_timer()</span><br><span class="line">    get_all_dir_size([], dir)</span><br><span class="line">    end = timeit.default_timer()</span><br><span class="line">    print(<span class="string">'get_all_dir_size:        %fGB -&gt; use time: %fs'</span> % (dir_dict[clear_path_format(dir)] / (<span class="number">1</span> &lt;&lt; <span class="number">30</span>), end - start))</span><br><span class="line"></span><br><span class="line">    start = timeit.default_timer()</span><br><span class="line">    get_all_dir_size_thread([], dir)</span><br><span class="line">    pool.wait()</span><br><span class="line">    end = timeit.default_timer()</span><br><span class="line">    print(<span class="string">'get_all_dir_size_thread: %fGB -&gt; use time: %fs'</span> % (dir_dict_thread[clear_path_format(dir)] / (<span class="number">1</span> &lt;&lt; <span class="number">30</span>), end - start))</span><br></pre></td></tr></table></figure><h2 id="C-的实现"><a href="#C-的实现" class="headerlink" title="C++的实现"></a>C++的实现</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unordered_map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;windows.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;time.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> UNICODE</span></span><br><span class="line"><span class="keyword">typedef</span> wstring tstring;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">else</span></span></span><br><span class="line"><span class="keyword">typedef</span> <span class="built_in">string</span> tstring;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> POOL_SIZE 5</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">unordered_map</span>&lt;tstring, ULONGLONG&gt; mapDirSize_simple;<span class="comment">// 递归的map表</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 根据文件的高32位和低32位求出文件的大小</span></span><br><span class="line"><span class="function">ULONGLONG <span class="title">GetFileSize</span><span class="params">(ULONGLONG high, ULONGLONG low)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> ((high &lt;&lt; <span class="number">32</span>) | low);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 去掉中所有的 "/"  "\" ":" </span></span><br><span class="line"><span class="function">tstring <span class="title">ClearPathFormat</span><span class="params">(tstring path)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">size_t</span> pos = <span class="number">0</span>;</span><br><span class="line">tstring clear1 = TEXT(<span class="string">"/"</span>);</span><br><span class="line">tstring clear2 = TEXT(<span class="string">"\\"</span>);</span><br><span class="line">tstring clear3 = TEXT(<span class="string">":"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> ((pos = path.find(clear1)) != tstring::npos)</span><br><span class="line">&#123;</span><br><span class="line">path.replace(pos, clear1.length(), <span class="string">""</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> ((pos = path.find(clear2)) != tstring::npos)</span><br><span class="line">&#123;</span><br><span class="line">path.replace(pos, clear2.length(), <span class="string">""</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> ((pos = path.find(clear3)) != tstring::npos)</span><br><span class="line">&#123;</span><br><span class="line">path.replace(pos, clear3.length(), <span class="string">""</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> path;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 简单递归得目录大小</span></span><br><span class="line"><span class="function">ULONGLONG <span class="title">SimpleGetDirectorySize</span><span class="params">(<span class="built_in">vector</span>&lt;tstring&gt; vecParentPath, tstring lpDirName)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">ULONGLONG nDirSize = <span class="number">0</span>;<span class="comment">// 文件夹大小</span></span><br><span class="line">tstring strDirName = lpDirName;</span><br><span class="line">strDirName += TEXT(<span class="string">"/*.*"</span>);<span class="comment">// 目录名字</span></span><br><span class="line"></span><br><span class="line">HANDLE hFile;</span><br><span class="line">WIN32_FIND_DATA pNextInfo;</span><br><span class="line">hFile = FindFirstFile(strDirName.c_str(), &amp;pNextInfo);</span><br><span class="line"><span class="keyword">if</span> (INVALID_HANDLE_VALUE == hFile)</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">vecParentPath.push_back(ClearPathFormat(lpDirName));</span><br><span class="line"><span class="keyword">while</span> (FindNextFile(hFile, &amp;pNextInfo))</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">// 跳过 "." ".." 两个目录</span></span><br><span class="line"><span class="keyword">if</span> (!<span class="built_in">strcmp</span>(pNextInfo.cFileName, <span class="string">"."</span>) || !<span class="built_in">strcmp</span>(pNextInfo.cFileName, <span class="string">".."</span>))</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (pNextInfo.dwFileAttributes &amp; FILE_ATTRIBUTE_DIRECTORY)</span><br><span class="line">&#123;<span class="comment">// 目录, 递归下去加</span></span><br><span class="line">tstring strTmp = lpDirName;</span><br><span class="line">strTmp += TEXT(<span class="string">"/"</span>);</span><br><span class="line">strTmp += pNextInfo.cFileName;</span><br><span class="line">SimpleGetDirectorySize(vecParentPath, strTmp.c_str());</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;<span class="comment">// 文件</span></span><br><span class="line">nDirSize += GetFileSize(pNextInfo.nFileSizeHigh, pNextInfo.nFileSizeLow);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (nDirSize)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> parent : vecParentPath)</span><br><span class="line">&#123;</span><br><span class="line">mapDirSize_simple[parent] += nDirSize;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> mapDirSize_simple[ClearPathFormat(lpDirName)];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 递归得单个目录大小</span></span><br><span class="line"><span class="function">ULONGLONG <span class="title">SimpleGetDirectorySizeRecursive</span><span class="params">(LPCSTR lpDirName)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">ULONGLONG nDirSize = <span class="number">0</span>;<span class="comment">// 文件夹大小</span></span><br><span class="line">TCHAR strDirName[<span class="number">1000</span>];</span><br><span class="line"><span class="built_in">memset</span>(strDirName, <span class="number">0</span>, <span class="keyword">sizeof</span>(strDirName));</span><br><span class="line"><span class="built_in">memcpy</span>(strDirName, lpDirName, <span class="built_in">strlen</span>(lpDirName));</span><br><span class="line"><span class="built_in">strcat</span>(strDirName, TEXT(<span class="string">"/*.*"</span>));</span><br><span class="line"></span><br><span class="line">HANDLE hFile;</span><br><span class="line">WIN32_FIND_DATA pNextInfo;</span><br><span class="line">hFile = FindFirstFile(strDirName, &amp;pNextInfo);</span><br><span class="line"><span class="keyword">if</span> (INVALID_HANDLE_VALUE == hFile)</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (FindNextFile(hFile, &amp;pNextInfo))</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">// 跳过 "." ".." 两个目录</span></span><br><span class="line"><span class="keyword">if</span> (!<span class="built_in">strcmp</span>(pNextInfo.cFileName, <span class="string">"."</span>) || !<span class="built_in">strcmp</span>(pNextInfo.cFileName, <span class="string">".."</span>))</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (pNextInfo.dwFileAttributes &amp; FILE_ATTRIBUTE_DIRECTORY)</span><br><span class="line">&#123;<span class="comment">// 目录, 递归下去加</span></span><br><span class="line">TCHAR strTmp[<span class="number">1000</span>];</span><br><span class="line"><span class="built_in">memset</span>(strTmp, <span class="number">0</span>, <span class="keyword">sizeof</span>(strTmp));</span><br><span class="line"><span class="built_in">memcpy</span>(strTmp, lpDirName, <span class="built_in">strlen</span>(lpDirName));</span><br><span class="line"><span class="built_in">strcat</span>(strTmp, TEXT(<span class="string">"/"</span>));</span><br><span class="line"><span class="built_in">strcat</span>(strTmp, pNextInfo.cFileName);</span><br><span class="line">nDirSize += SimpleGetDirectorySizeRecursive(strTmp);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;<span class="comment">// 文件</span></span><br><span class="line">nDirSize += GetFileSize(pNextInfo.nFileSizeHigh, pNextInfo.nFileSizeLow);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> nDirSize;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">tstring strDirName = TEXT(<span class="string">"E:\\1Code\\Repositories"</span>);</span><br><span class="line"></span><br><span class="line">LARGE_INTEGER t1, t2, tc;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 递归计算单个目录大小</span></span><br><span class="line">QueryPerformanceFrequency(&amp;tc);</span><br><span class="line">QueryPerformanceCounter(&amp;t1);</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; strDirName &lt;&lt; <span class="string">" size: "</span> &lt;&lt; (<span class="keyword">double</span>)SimpleGetDirectorySizeRecursive(strDirName.c_str()) / (<span class="number">1</span> &lt;&lt; <span class="number">30</span>) &lt;&lt; <span class="string">"GB"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">QueryPerformanceCounter(&amp;t2);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"Use Time:%fs\n"</span>, (t2.QuadPart - t1.QuadPart)*<span class="number">1.0</span> / tc.QuadPart);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 递归计算目录大小</span></span><br><span class="line">QueryPerformanceFrequency(&amp;tc);</span><br><span class="line">QueryPerformanceCounter(&amp;t1);</span><br><span class="line"><span class="built_in">vector</span>&lt;tstring&gt; vecEmpty;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; strDirName &lt;&lt; <span class="string">" size: "</span>&lt;&lt; (<span class="keyword">double</span>)SimpleGetDirectorySize(vecEmpty, strDirName.c_str()) / (<span class="number">1</span> &lt;&lt; <span class="number">30</span>) &lt;&lt; <span class="string">"GB"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">QueryPerformanceCounter(&amp;t2);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"Use Time:%fs\n"</span>, (t2.QuadPart - t1.QuadPart)*<span class="number">1.0</span> / tc.QuadPart);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Fri Dec 14 2018 21:02:56 GMT+0800 (中国标准时间) --&gt;&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;可以使用 &lt;strong&gt;Cython&lt;/strong&gt;, &lt;strong&gt;PyPy&lt;/strong&gt;提升 python的速度&lt;/p&gt;
    
    </summary>
    
      <category term="Python" scheme="https://vonsdite.cn/categories/Python/"/>
    
      <category term="Cython" scheme="https://vonsdite.cn/categories/Python/Cython/"/>
    
    
      <category term="Python" scheme="https://vonsdite.cn/tags/Python/"/>
    
      <category term="Cython" scheme="https://vonsdite.cn/tags/Cython/"/>
    
  </entry>
  
  <entry>
    <title>Hexo Next 使用Valine作评论系统</title>
    <link href="https://vonsdite.cn/posts/c7d98860.html"/>
    <id>https://vonsdite.cn/posts/c7d98860.html</id>
    <published>2018-12-07T07:29:23.000Z</published>
    <updated>2018-12-08T06:11:32.679Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Fri Dec 14 2018 21:02:55 GMT+0800 (中国标准时间) --><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>之前博客使用的是<strong>gitalk</strong>作为评论系统, 但是对于<strong>强迫症</strong>, 看到Github的<code>Recent activity</code>满满的一列<code>Issue</code>, 内心着实有点小难受。</p><p>如果想使用<strong>gitalk</strong>作为评论系统的可以看<strong><a href="/posts/dd07da63.html">Hexo Next 加入评论功能gitalk</a></strong><br>而想使用<strong>Valine</strong>作为评论系统, 则可以参考此文</p><a id="more"></a><h1 id="Valine"><a href="#Valine" class="headerlink" title="Valine"></a>Valine</h1><blockquote><p>Valine 诞生于2017年8月7日, 是一款基于<code>Leancloud</code>的快速、简洁且高效的<strong>无后端</strong>评论系统。<br>理论上支持但不限于静态博客, 目前已有<code>Hexo</code>、<code>Jekyll</code>、<code>Typecho</code>、<code>Hugo</code> 等博客程序在使用Valine。</p></blockquote><h2 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h2><ul><li>快速</li><li>安全</li><li>Emoji 😉</li><li>无后端实现</li><li>MarkDown 全语法支持</li><li>轻量易用(~15kb gzipped)</li><li>文章阅读量统计 v1.2.0+</li></ul><h1 id="使用Valine"><a href="#使用Valine" class="headerlink" title="使用Valine"></a>使用Valine</h1><p>可以上Valine的官网的<a href="https://valine.js.org/quickstart.html" target="_blank" rel="noopener">快速开始</a>查看如何配置</p><p>以下专门介绍<code>Hexo</code>如何配置, <strong>Next</strong>主题是<strong><code>6.0</code>版本</strong>以上的</p><p>因为Valine是基于<strong>LeanCloud</strong>的, 所以我们<a href="/posts/c7d98860.html#注册Leancloud并创建应用">先注册Leancloud并创建应用</a></p><h2 id="注册Leancloud并创建应用"><a href="#注册Leancloud并创建应用" class="headerlink" title="注册Leancloud并创建应用"></a>注册Leancloud并创建应用</h2><ol><li><p>首先, 前往Leancloud官网<a href="https://leancloud.cn/dashboard/login.html#/signup" target="_blank" rel="noopener">leancloud.cn</a>进行注册, 并登陆。</p></li><li><p>点击<strong>创建应用</strong><br><img src="/images/2018-11-19-10-45-53.png" alt=""></p></li><li><p>输入应用的名称(随便起都行), 选择<strong>开发版</strong>, 点击<strong>创建</strong><br><img src="/images/2018-11-19-10-46-38.png" alt=""></p></li><li><p>创建成功后点击右上角的设置<strong>小齿轮</strong><br><img src="/images/2018-11-19-10-48-23.png" alt=""></p></li><li><p>创建后点击<strong>设置</strong>-点击<strong>应用Key</strong>-获取<strong>App ID</strong>和<strong>App Key</strong><br><img src="/images/2018-11-19-10-55-18.png" alt=""></p></li><li><p>将获取到的<strong>App ID</strong>和<strong>App Key</strong>设置到<code>Next</code>主题配置文件<code>_config.yml</code>, 并设置<code>enable: true</code><br><em>配置文件已存在这个配置, 只要把 id 和 key 加上去就好了</em></p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">valine:</span></span><br><span class="line">  <span class="comment"># When enable is set to be true, leancloud_visitors is recommended to be closed for the re-initialization problem within different leancloud adk version.</span></span><br><span class="line"><span class="attr">  enable:</span> <span class="literal">true</span> </span><br><span class="line"><span class="attr">  appid:</span> <span class="string">&lt;&lt;your</span> <span class="string">app</span> <span class="string">id&gt;&gt;</span>                    <span class="comment"># your leancloud application appid</span></span><br><span class="line"><span class="attr">  appkey:</span> <span class="string">&lt;&lt;your</span> <span class="string">app</span> <span class="string">key&gt;&gt;</span>                  <span class="comment"># your leancloud application appkey</span></span><br><span class="line"><span class="attr">  notify:</span> <span class="literal">false</span>                             <span class="comment"># mail notifier , https://github.com/xCss/Valine/wiki</span></span><br><span class="line"><span class="attr">  verify:</span> <span class="literal">false</span>                             <span class="comment"># Verification code</span></span><br><span class="line"><span class="attr">  placeholder:</span> <span class="string">ヾﾉ≧∀≦)o来啊,</span> <span class="string">快活啊!</span>        <span class="comment"># comment box placeholder</span></span><br><span class="line"><span class="attr">  avatar:</span> <span class="string">mm</span>                                <span class="comment"># gravatar style</span></span><br><span class="line"><span class="attr">  guest_info:</span> <span class="string">nick,mail,link</span>                <span class="comment"># custom comment header</span></span><br><span class="line"><span class="attr">  pageSize:</span> <span class="number">10</span>                              <span class="comment"># pagination size</span></span><br><span class="line"><span class="attr">  visitor:</span> <span class="literal">false</span>                            <span class="comment"># leancloud-counter-security is not supported for now. When visitor is set to be true, appid and appkey are recommended to be the same as leancloud_visitors' for counter compatibility. Article reading statistic https://valine.js.org/visitor.html</span></span><br></pre></td></tr></table></figure></li><li><p>点击<strong>安全中心</strong>, 填写自己博客对应的域名（注意协议、域名和端口号需严格一致）<br><img src="/images/2018-11-19-10-57-01.png" alt=""></p></li></ol><p>至此完成配置, <code>hexo s</code>就可以看到文章评论区了</p><h2 id="开启评论回复邮箱提醒"><a href="#开启评论回复邮箱提醒" class="headerlink" title="开启评论回复邮箱提醒"></a>开启评论回复邮箱提醒</h2><p>参考<a href="https://github.com/xCss/Valine/wiki/Valine-%E8%AF%84%E8%AE%BA%E7%B3%BB%E7%BB%9F%E4%B8%AD%E7%9A%84%E9%82%AE%E4%BB%B6%E6%8F%90%E9%86%92%E8%AE%BE%E7%BD%AE" target="_blank" rel="noopener">评论系统中的邮件提醒设置</a></p><p>Valine的配置要设置 <code>notify: true</code> 和 <code>verify: true</code><br></p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">valine:</span></span><br><span class="line">  <span class="comment"># When enable is set to be true, leancloud_visitors is recommended to be closed for the re-initialization problem within different leancloud adk version.</span></span><br><span class="line"><span class="attr">  enable:</span> <span class="literal">true</span> </span><br><span class="line"><span class="attr">  appid:</span> <span class="string">&lt;&lt;your</span> <span class="string">app</span> <span class="string">id&gt;&gt;</span>                    <span class="comment"># your leancloud application appid</span></span><br><span class="line"><span class="attr">  appkey:</span> <span class="string">&lt;&lt;your</span> <span class="string">app</span> <span class="string">key&gt;&gt;</span>                  <span class="comment"># your leancloud application appkey</span></span><br><span class="line"><span class="attr">  notify:</span> <span class="literal">true</span>                              <span class="comment"># mail notifier , https://github.com/xCss/Valine/wiki</span></span><br><span class="line"><span class="attr">  verify:</span> <span class="literal">true</span>                              <span class="comment"># Verification code</span></span><br><span class="line"><span class="attr">  placeholder:</span> <span class="string">ヾﾉ≧∀≦)o来啊,</span> <span class="string">快活啊!</span>        <span class="comment"># comment box placeholder</span></span><br><span class="line"><span class="attr">  avatar:</span> <span class="string">mm</span>                                <span class="comment"># gravatar style</span></span><br><span class="line"><span class="attr">  guest_info:</span> <span class="string">nick,mail,link</span>                <span class="comment"># custom comment header</span></span><br><span class="line"><span class="attr">  pageSize:</span> <span class="number">10</span>                              <span class="comment"># pagination size</span></span><br><span class="line"><span class="attr">  visitor:</span> <span class="literal">false</span>                            <span class="comment"># leancloud-counter-security is not supported for now. When visitor is set to be true, appid and appkey are recommended to be the same as leancloud_visitors' for counter compatibility. Article reading statistic https://valine.js.org/visitor.html</span></span><br></pre></td></tr></table></figure><p></p><h2 id="评论数据管理"><a href="#评论数据管理" class="headerlink" title="评论数据管理"></a>评论数据管理</h2><p>由于Valine 是<strong>无后端</strong>评论系统, 所以也就没有开发评论数据管理功能。请<strong>自行登录Leancloud应用管理</strong>。</p><p>具体步骤：<code>登录&gt;选择你创建的应用&gt;存储&gt;选择Class Comment</code>, 然后就可以尽情的发挥你的权利啦(～￣▽￣)～</p><blockquote><p>当然, 你也可以配合 <a href="https://github.com/panjunwen" target="_blank" rel="noopener">@panjunwen</a> 开发的 <a href="https://github.com/panjunwen/Valine-Admin" target="_blank" rel="noopener">Valine-Admin</a> 进行评论数据管理</p></blockquote><h1 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h1><p>如果你某一篇文章不想有评论功能, 你可以在文章的<code>font-matter</code>中加入 <code>comments: false</code></p><p><img src="/images/2018-12-05-21-19-05.png" alt=""></p><p>因为加入了评论功能, 在<code>标签</code>、<code>分类</code>页面都会有个评论区, 所以应到相应页面的<code>index.md</code>的<code>font-matter</code>中加入 <code>comments: false</code></p><p><strong>并修改站点目录下<code>scaffolds</code>的<code>page.md</code>模板</strong>, 因为创建<code>page</code>都会<strong>使用到该模板</strong>, 而页面不需要有评论区<br></p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">title:</span> <span class="string">&#123;&#123;</span> <span class="string">title</span> <span class="string">&#125;&#125;</span></span><br><span class="line"><span class="attr">date:</span> <span class="string">&#123;&#123;</span> <span class="string">date</span> <span class="string">&#125;&#125;</span></span><br><span class="line"><span class="attr">type:</span> </span><br><span class="line"><span class="attr">comments:</span> <span class="literal">false</span></span><br><span class="line"><span class="meta">---</span></span><br></pre></td></tr></table></figure><p></p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Fri Dec 14 2018 21:02:55 GMT+0800 (中国标准时间) --&gt;&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;之前博客使用的是&lt;strong&gt;gitalk&lt;/strong&gt;作为评论系统, 但是对于&lt;strong&gt;强迫症&lt;/strong&gt;, 看到Github的&lt;code&gt;Recent activity&lt;/code&gt;满满的一列&lt;code&gt;Issue&lt;/code&gt;, 内心着实有点小难受。&lt;/p&gt;&lt;p&gt;如果想使用&lt;strong&gt;gitalk&lt;/strong&gt;作为评论系统的可以看&lt;strong&gt;&lt;a href=&quot;/posts/dd07da63.html&quot;&gt;Hexo Next 加入评论功能gitalk&lt;/a&gt;&lt;/strong&gt;&lt;br&gt;而想使用&lt;strong&gt;Valine&lt;/strong&gt;作为评论系统, 则可以参考此文&lt;/p&gt;
    
    </summary>
    
      <category term="Hexo" scheme="https://vonsdite.cn/categories/Hexo/"/>
    
      <category term="Next" scheme="https://vonsdite.cn/categories/Hexo/Next/"/>
    
    
      <category term="Hexo" scheme="https://vonsdite.cn/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title>python os模块 关于文件/目录常用的函数使用方法</title>
    <link href="https://vonsdite.cn/posts/b288b56b.html"/>
    <id>https://vonsdite.cn/posts/b288b56b.html</id>
    <published>2018-12-06T09:29:48.000Z</published>
    <updated>2018-12-06T10:00:20.754Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Fri Dec 14 2018 21:02:55 GMT+0800 (中国标准时间) --><h1 id="常用的文件-目录函数"><a href="#常用的文件-目录函数" class="headerlink" title="常用的文件/目录函数"></a>常用的文件/目录函数</h1><table><thead><tr><th>函数名</th><th>使用方法</th></tr></thead><tbody><tr><td>os.getcwd()</td><td>返回当前工作目录</td></tr><tr><td>os.chdir(path)</td><td>改变工作目录</td></tr><tr><td>os.listdir(path=’.’)</td><td>列举指定目录中的文件名(‘.’表示当前目录, ‘..’表示上一级目录)</td></tr><tr><td>os.mkdir(path)</td><td>创建单层目录, 如该目录已存在抛出异常</td></tr><tr><td>os.makedirs(path)</td><td>递归创建多层目录, 如该目录已存在抛出异常, 注意: ‘E:\a\b’和’E:\a\c’并不会冲突</td></tr><tr><td>os.remove(path)</td><td>删除文件</td></tr><tr><td>os.rmdir(path)</td><td>删除单层目录, 如该目录非空则抛出异常</td></tr><tr><td>os.removedirs(path)</td><td>递归删除目录, 从子目录到父目录逐层尝试删除, 遇到目录非空则抛出异常</td></tr><tr><td>os.rename(old, new)</td><td>将文件old重命名为new</td></tr><tr><td>os.system(command)</td><td>运行系统的shell命令</td></tr><tr><td>os.walk(top)</td><td>遍历top路径以下所有的子目录, 返回一个三元组: (路径, [包含目录], [包含文件])</td></tr></tbody></table><a id="more"></a><h1 id="os-path模块关于路径常用的函数"><a href="#os-path模块关于路径常用的函数" class="headerlink" title="os.path模块关于路径常用的函数"></a><code>os.path</code>模块关于路径常用的函数</h1><table><thead><tr><th>函数名</th><th>使用方法</th></tr></thead><tbody><tr><td>os.path.basename(path)</td><td>去掉目录路径，单独返回文件名</td></tr><tr><td>os.path.dirname(path)</td><td>去掉文件名，单独返回目录路径</td></tr><tr><td>os.path.join(path1[, path2[, …]])</td><td>将path1, path2各部分组合成一个路径名</td></tr><tr><td>os.path.split(path)</td><td>分割文件名与路径，返回(f_path, f_name)元组。如果完全使用目录，它也会将最后一个目录作为文件名分离，且不会判断文件或者目录是否存在</td></tr><tr><td>os.path.splitext(path)</td><td>分离文件名与扩展名，返回(f_name, f_extension)元组</td></tr><tr><td>os.path.getsize(file)</td><td>返回指定文件的尺寸，单位是字节</td></tr><tr><td>os.path.getatime(file)</td><td>返回指定文件最近的访问时间（浮点型秒数，可用time模块的gmtime()或localtime()函数换算）</td></tr><tr><td>os.path.getctime(file)</td><td>返回指定文件的创建时间（浮点型秒数，可用time模块的gmtime()或localtime()函数换算）</td></tr><tr><td>os.path.getmtime(file)</td><td>返回指定文件最新的修改时间（浮点型秒数，可用time模块的gmtime()或localtime()函数换算）</td></tr></tbody></table><h2 id="以下返回值为-True-或-False"><a href="#以下返回值为-True-或-False" class="headerlink" title="以下返回值为 True 或 False"></a>以下返回值为 <code>True</code> 或 <code>False</code></h2><table><thead><tr><th>函数名</th><th>使用方法</th></tr></thead><tbody><tr><td>os.path.exists(path)</td><td>判断指定路径（目录或文件）是否存在</td></tr><tr><td>os.path.isabs(path)</td><td>判断指定路径是否为绝对路径</td></tr><tr><td>os.path.isdir(path)</td><td>判断指定路径是否存在且是一个目录</td></tr><tr><td>os.path.isfile(path)</td><td>判断指定路径是否存在且是一个文件</td></tr><tr><td>os.path.islink(path)</td><td>判断指定路径是否存在且是一个符号链接</td></tr><tr><td>os.path.ismount(path)</td><td>判断指定路径是否存在且是一个挂载点</td></tr><tr><td>os.path.samefile(path1, paht2)</td><td>判断path1和path2两个路径是否指向同一个文件</td></tr></tbody></table><h1 id="支持跨平台的路径定义"><a href="#支持跨平台的路径定义" class="headerlink" title="支持跨平台的路径定义"></a>支持跨平台的路径定义</h1><table><thead><tr><th>函数名</th><th>使用方法</th></tr></thead><tbody><tr><td>os.curdir</td><td>指代当前目录(‘.’)</td></tr><tr><td>os.pardir</td><td>指代上一级目录(‘..’)</td><td></td></tr><tr><td>os.sep</td><td>输出操作系统特定的路径分隔符(Win下为’\‘, Linux下为’/‘)</td></tr><tr><td>os.linesep</td><td>当前平台使用的行终止符(Win下为’\r\n’, Linux下为’\n’)</td></tr><tr><td>os.name</td><td>指代当前使用的操作系统(包括: ‘posix’,</td><td>‘nt’, ‘mac’, ‘os2’, ‘ce’, ‘java’)</td></tr></tbody></table><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Fri Dec 14 2018 21:02:55 GMT+0800 (中国标准时间) --&gt;&lt;h1 id=&quot;常用的文件-目录函数&quot;&gt;&lt;a href=&quot;#常用的文件-目录函数&quot; class=&quot;headerlink&quot; title=&quot;常用的文件/目录函数&quot;&gt;&lt;/a&gt;常用的文件/目录函数&lt;/h1&gt;&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;函数名&lt;/th&gt;&lt;th&gt;使用方法&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;os.getcwd()&lt;/td&gt;&lt;td&gt;返回当前工作目录&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;os.chdir(path)&lt;/td&gt;&lt;td&gt;改变工作目录&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;os.listdir(path=’.’)&lt;/td&gt;&lt;td&gt;列举指定目录中的文件名(‘.’表示当前目录, ‘..’表示上一级目录)&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;os.mkdir(path)&lt;/td&gt;&lt;td&gt;创建单层目录, 如该目录已存在抛出异常&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;os.makedirs(path)&lt;/td&gt;&lt;td&gt;递归创建多层目录, 如该目录已存在抛出异常, 注意: ‘E:\a\b’和’E:\a\c’并不会冲突&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;os.remove(path)&lt;/td&gt;&lt;td&gt;删除文件&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;os.rmdir(path)&lt;/td&gt;&lt;td&gt;删除单层目录, 如该目录非空则抛出异常&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;os.removedirs(path)&lt;/td&gt;&lt;td&gt;递归删除目录, 从子目录到父目录逐层尝试删除, 遇到目录非空则抛出异常&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;os.rename(old, new)&lt;/td&gt;&lt;td&gt;将文件old重命名为new&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;os.system(command)&lt;/td&gt;&lt;td&gt;运行系统的shell命令&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;os.walk(top)&lt;/td&gt;&lt;td&gt;遍历top路径以下所有的子目录, 返回一个三元组: (路径, [包含目录], [包含文件])&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
    
    </summary>
    
      <category term="Python" scheme="https://vonsdite.cn/categories/Python/"/>
    
    
      <category term="Python" scheme="https://vonsdite.cn/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>python 性能测试工具</title>
    <link href="https://vonsdite.cn/posts/e1d29b4a.html"/>
    <id>https://vonsdite.cn/posts/e1d29b4a.html</id>
    <published>2018-12-06T03:33:39.000Z</published>
    <updated>2018-12-06T07:28:50.625Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Fri Dec 14 2018 21:02:56 GMT+0800 (中国标准时间) --><h1 id="timeit"><a href="#timeit" class="headerlink" title="timeit"></a>timeit</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> timeit</span><br><span class="line">print(timeit.timeit(stmt=<span class="string">"[i for i in range(1000)]"</span>, number=<span class="number">100000</span>))         <span class="comment"># 传入的是字符串表达式</span></span><br><span class="line"><span class="comment"># 输出: </span></span><br><span class="line"><span class="comment"># 3.0182870961591375</span></span><br></pre></td></tr></table></figure><p><code>timeit</code>只输出被测试代码的总运行时间, 单位为秒, 没有详细的统计.<br><a href="/posts/6218c1b6.html">timeit的详细介绍点这里</a></p><a id="more"></a><h1 id="profile-cProfile"><a href="#profile-cProfile" class="headerlink" title="profile / cProfile"></a>profile / cProfile</h1><p><code>profile</code>: <strong>纯Python</strong>实现的性能测试模块, 接口和<code>cProfile</code>一样<br><code>cProfile</code>: <strong>c语言</strong>实现的性能测试模块, 接口和<code>profile</code>一样</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> profile</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">fun</span><span class="params">()</span>:</span></span><br><span class="line"><span class="meta">... </span>    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">100000</span>):</span><br><span class="line"><span class="meta">... </span>            a = i * i</span><br><span class="line">...</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>profile.run(<span class="string">'fun()'</span>)</span><br><span class="line">         <span class="number">5</span> function calls <span class="keyword">in</span> <span class="number">0.016</span> seconds</span><br><span class="line"></span><br><span class="line">   Ordered by: standard name</span><br><span class="line"></span><br><span class="line">   ncalls  tottime  percall  cumtime  percall filename:lineno(function)</span><br><span class="line">        <span class="number">1</span>    <span class="number">0.000</span>    <span class="number">0.000</span>    <span class="number">0.016</span>    <span class="number">0.016</span> :<span class="number">0</span>(<span class="keyword">exec</span>)</span><br><span class="line">        <span class="number">1</span>    <span class="number">0.000</span>    <span class="number">0.000</span>    <span class="number">0.000</span>    <span class="number">0.000</span> :<span class="number">0</span>(setprofile)</span><br><span class="line">        <span class="number">1</span>    <span class="number">0.016</span>    <span class="number">0.016</span>    <span class="number">0.016</span>    <span class="number">0.016</span> &lt;stdin&gt;:<span class="number">1</span>(fun)</span><br><span class="line">        <span class="number">1</span>    <span class="number">0.000</span>    <span class="number">0.000</span>    <span class="number">0.016</span>    <span class="number">0.016</span> &lt;string&gt;:<span class="number">1</span>(&lt;module&gt;)</span><br><span class="line">        <span class="number">1</span>    <span class="number">0.000</span>    <span class="number">0.000</span>    <span class="number">0.016</span>    <span class="number">0.016</span> profile:<span class="number">0</span>(fun())</span><br><span class="line">        <span class="number">0</span>    <span class="number">0.000</span>             <span class="number">0.000</span>          profile:<span class="number">0</span>(profiler)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> cProfile</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">fun</span><span class="params">()</span>:</span></span><br><span class="line"><span class="meta">... </span>    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">100000</span>):</span><br><span class="line"><span class="meta">... </span>            a = i * i</span><br><span class="line">...</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>cProfile.run(<span class="string">'fun()'</span>)</span><br><span class="line">         <span class="number">4</span> function calls <span class="keyword">in</span> <span class="number">0.005</span> seconds</span><br><span class="line"></span><br><span class="line">   Ordered by: standard name</span><br><span class="line"></span><br><span class="line">   ncalls  tottime  percall  cumtime  percall filename:lineno(function)</span><br><span class="line">        <span class="number">1</span>    <span class="number">0.005</span>    <span class="number">0.005</span>    <span class="number">0.005</span>    <span class="number">0.005</span> &lt;stdin&gt;:<span class="number">1</span>(fun)</span><br><span class="line">        <span class="number">1</span>    <span class="number">0.000</span>    <span class="number">0.000</span>    <span class="number">0.005</span>    <span class="number">0.005</span> &lt;string&gt;:<span class="number">1</span>(&lt;module&gt;)</span><br><span class="line">        <span class="number">1</span>    <span class="number">0.000</span>    <span class="number">0.000</span>    <span class="number">0.005</span>    <span class="number">0.005</span> &#123;built-<span class="keyword">in</span> method builtins.<span class="keyword">exec</span>&#125;</span><br><span class="line">        <span class="number">1</span>    <span class="number">0.000</span>    <span class="number">0.000</span>    <span class="number">0.000</span>    <span class="number">0.000</span> &#123;method <span class="string">'disable'</span> of <span class="string">'_lsprof.Profiler'</span> objects&#125;</span><br></pre></td></tr></table></figure><h2 id="解释"><a href="#解释" class="headerlink" title="解释"></a>解释</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> cProfile</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> re</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>cProfile.run(<span class="string">'re.compile("foo|bar")'</span>)</span><br><span class="line">         <span class="number">199</span> function calls (<span class="number">194</span> primitive calls) <span class="keyword">in</span> <span class="number">0.000</span> seconds</span><br><span class="line"></span><br><span class="line">   Ordered by: standard name</span><br><span class="line"></span><br><span class="line">   ncalls  tottime  percall  cumtime  percall filename:lineno(function)</span><br><span class="line">        <span class="number">1</span>    <span class="number">0.000</span>    <span class="number">0.000</span>    <span class="number">0.000</span>    <span class="number">0.000</span> &lt;string&gt;:<span class="number">1</span>(&lt;module&gt;)</span><br><span class="line">        <span class="number">4</span>    <span class="number">0.000</span>    <span class="number">0.000</span>    <span class="number">0.000</span>    <span class="number">0.000</span> enum.py:<span class="number">265</span>(__call__)</span><br><span class="line">        <span class="number">4</span>    <span class="number">0.000</span>    <span class="number">0.000</span>    <span class="number">0.000</span>    <span class="number">0.000</span> enum.py:<span class="number">515</span>(__new__)</span><br><span class="line">        <span class="number">2</span>    <span class="number">0.000</span>    <span class="number">0.000</span>    <span class="number">0.000</span>    <span class="number">0.000</span> enum.py:<span class="number">801</span>(__and__)</span><br><span class="line">        <span class="number">1</span>    <span class="number">0.000</span>    <span class="number">0.000</span>    <span class="number">0.000</span>    <span class="number">0.000</span> re.py:<span class="number">231</span>(compile)</span><br><span class="line">        <span class="number">1</span>    <span class="number">0.000</span>    <span class="number">0.000</span>    <span class="number">0.000</span>    <span class="number">0.000</span> re.py:<span class="number">286</span>(_compile)</span><br><span class="line">        <span class="number">1</span>    <span class="number">0.000</span>    <span class="number">0.000</span>    <span class="number">0.000</span>    <span class="number">0.000</span> sre_compile.py:<span class="number">223</span>(_compile_charset)</span><br><span class="line">        <span class="number">1</span>    <span class="number">0.000</span>    <span class="number">0.000</span>    <span class="number">0.000</span>    <span class="number">0.000</span> sre_compile.py:<span class="number">250</span>(_optimize_charset)</span><br><span class="line">        <span class="number">1</span>    <span class="number">0.000</span>    <span class="number">0.000</span>    <span class="number">0.000</span>    <span class="number">0.000</span> sre_compile.py:<span class="number">414</span>(_get_literal_prefix)</span><br><span class="line">        <span class="number">1</span>    <span class="number">0.000</span>    <span class="number">0.000</span>    <span class="number">0.000</span>    <span class="number">0.000</span> sre_compile.py:<span class="number">441</span>(_get_charset_prefix)</span><br><span class="line">        <span class="number">1</span>    <span class="number">0.000</span>    <span class="number">0.000</span>    <span class="number">0.000</span>    <span class="number">0.000</span> sre_compile.py:<span class="number">482</span>(_compile_info)</span><br><span class="line">        <span class="number">2</span>    <span class="number">0.000</span>    <span class="number">0.000</span>    <span class="number">0.000</span>    <span class="number">0.000</span> sre_compile.py:<span class="number">539</span>(isstring)</span><br><span class="line">        <span class="number">1</span>    <span class="number">0.000</span>    <span class="number">0.000</span>    <span class="number">0.000</span>    <span class="number">0.000</span> sre_compile.py:<span class="number">542</span>(_code)</span><br><span class="line">        <span class="number">1</span>    <span class="number">0.000</span>    <span class="number">0.000</span>    <span class="number">0.000</span>    <span class="number">0.000</span> sre_compile.py:<span class="number">557</span>(compile)</span><br><span class="line">      <span class="number">3</span>/<span class="number">1</span>    <span class="number">0.000</span>    <span class="number">0.000</span>    <span class="number">0.000</span>    <span class="number">0.000</span> sre_compile.py:<span class="number">64</span>(_compile)</span><br><span class="line">        <span class="number">3</span>    <span class="number">0.000</span>    <span class="number">0.000</span>    <span class="number">0.000</span>    <span class="number">0.000</span> sre_parse.py:<span class="number">111</span>(__init__)</span><br><span class="line">····<span class="comment"># 此处省略</span></span><br></pre></td></tr></table></figure><ol><li>上述运行表明有199个函数被调用, 其中有194个原生调用(即不涉及递归调用)</li><li>总共运行时间 0.000 seconds</li><li>结果按<strong>标准名称</strong>进行<strong>排序</strong></li><li>列表中<ul><li><code>ncalls</code>表示函数调用的次数(有两个数值表示有递归调用, <strong>总调用次数/原生调用次数</strong>)</li><li><code>tottime</code>是函数内部调用时间(不包括他自己调用的其他函数的时间)</li><li>第一个<code>percall</code> = <code>tottime</code>/<code>ncalls</code></li><li><code>cumtime</code>累积调用时间, 它包含了自己内部调用函数的时间</li><li>第二个<code>percall</code> = <code>cumtime</code>/<code>ncalls</code></li><li>最后一列: <strong>文件名, 行号, 函数名</strong></li></ul></li></ol><h1 id="line-profiler"><a href="#line-profiler" class="headerlink" title="line_profiler"></a>line_profiler</h1><p><code>line_profiler</code>可以统计<strong>每行代码</strong>的<strong>执行次数</strong>和<strong>执行时间</strong>等, 时间单位为<strong>微秒</strong>。</p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install line_profiler</span><br></pre></td></tr></table></figure><p>安装之后, python 下会多一个<code>kernprof.py</code></p><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><ol><li><p>在需要测试的函数加上<code>@profile</code>装饰, 这里我们测试代码<code>test.py</code></p></li><li><p>运行命令行: <code>kernprof -l -v test.py</code></p></li></ol><p><img src="/images/2018-12-06-12-03-36.png" alt=""></p><ul><li><code>Total Time</code>: 测试代码的总运行时间</li><li><code>File</code>: 测试的代码名</li><li><code>Function</code>: 测试的函数所在的行</li><li><code>Line #</code>: 表示代码的行号</li><li><code>Hits</code>: 表示每行代码运行的次数</li><li><code>Time</code>: 每行代码运行的总时间, 时间单位为<strong>微秒</strong></li><li><code>Per Hits</code>: 每行代码运行一次的时间, 时间单位为<strong>微秒</strong></li><li><code>% Time</code>: 每行代码运行时间的百分比</li></ul><p><strong>test.py</strong><br></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="meta">@profile</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fun</span><span class="params">()</span>:</span></span><br><span class="line">    a = <span class="number">0</span></span><br><span class="line">    b = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">100000</span>):</span><br><span class="line">        a = a + i * i</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">3</span>):</span><br><span class="line">        b += <span class="number">1</span></span><br><span class="line">        time.sleep(<span class="number">0.1</span>)</span><br><span class="line">    <span class="keyword">return</span> a + b</span><br><span class="line">    </span><br><span class="line">fun()</span><br></pre></td></tr></table></figure><p></p><h1 id="memory-profiler"><a href="#memory-profiler" class="headerlink" title="memory_profiler"></a>memory_profiler</h1><p><code>memory_profiler</code>工具可以统计每行代码占用的<strong>内存大小</strong>。</p><h2 id="安装-1"><a href="#安装-1" class="headerlink" title="安装"></a>安装</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pip install memory_profiler  </span><br><span class="line">pip install psutil</span><br></pre></td></tr></table></figure><h2 id="使用-1"><a href="#使用-1" class="headerlink" title="使用"></a>使用</h2><ol><li><p>在需要测试的函数加上<code>@profile</code>装饰</p></li><li><p>执行命令: <code>python -m memory_profiler test.py</code></p></li></ol><p><img src="/images/2018-12-06-13-29-48.png" alt=""></p><h1 id="Pycharm图形化性能测试工具"><a href="#Pycharm图形化性能测试工具" class="headerlink" title="Pycharm图形化性能测试工具"></a>Pycharm图形化性能测试工具</h1><p>PyCharm提供了性能分析工具<code>Run-&gt; Profile</code>, 如下图所示。利用Profile工具可以对代码进行性能分析, 找出瓶颈所在<br><img src="/images/2018-12-06-13-57-16.png" alt=""></p><h2 id="使用-2"><a href="#使用-2" class="headerlink" title="使用"></a>使用</h2><p>测试代码见下文, 一共有5个函数, 每个函数都调用了<code>time.sleep</code>进行延时<br>点击<code>Run-&gt; Profile</code>开始测试, 代码运行结束后会生成一栏测试结果,<br>测试结果由两部分构成, <strong>Statistics(性能统计)</strong>和<strong>Call Graph(调用关系图)</strong></p><h3 id="Statistics-性能统计"><a href="#Statistics-性能统计" class="headerlink" title="Statistics(性能统计)"></a>Statistics(性能统计)</h3><p><img src="/images/2018-12-06-13-57-37.png" alt=""></p><p>性能统计界面由<code>Name</code>、<code>Call Count</code>、<code>Time(ms)</code>、<code>Own Time(ms)</code> 4列组成一个表格。</p><ol><li><code>Name</code>显示被调用的<strong>模块或者函数</strong></li><li><code>Call Count</code>显示被调用的次数;</li><li><code>Time(ms)</code>显示运行时间和时间百分比, 时间单位为毫秒(ms), <strong>包含</strong>自己内部调用函数的时间</li><li><code>Own Time(ms)</code>显示运行时间和时间百分比, 时间单位为毫秒(ms), <strong>不包含</strong>自己内部调用函数的时间</li></ol><h4 id="小技巧"><a href="#小技巧" class="headerlink" title="小技巧"></a>小技巧</h4><ol><li>点击表头上的<strong>小三角</strong>可以<strong>升序或降序</strong>排列表格。</li><li>在<code>Name</code>这一个列中<strong>双击</strong>某一行可以跳转到对应的代码。</li></ol><h3 id="Call-Graph-调用关系图"><a href="#Call-Graph-调用关系图" class="headerlink" title="Call Graph(调用关系图)"></a>Call Graph(调用关系图)</h3><p><img src="/images/2018-12-06-13-57-50.png" alt=""></p><p><code>Call Graph</code>(调用(系图), 包含了自己内部调用函数的时间界面<strong>直观展示了各函数直接的调用关系</strong>、运行时间和时间百分比。</p><h4 id="解释-1"><a href="#解释-1" class="headerlink" title="解释"></a>解释</h4><ol><li><p>箭头表示<strong>调用关系</strong>, 由调用者指向被调用者;</p></li><li><p>矩形的<strong>左上角</strong>显示模块或者函数的名称, <strong>右上角</strong>显示被调用的次数;</p></li><li><p>矩形<strong>中间</strong>显示运行时间和时间百分比;</p></li><li><p>矩形的<strong>颜色</strong>表示运行时间或者时间百分比大小的趋势: <strong>红色 &gt; 黄绿色 &gt; 绿色</strong>, 比如由图可以看出fun3的矩形为黄绿色, fun1为绿色, 所有fun3运行时间比fun1长。</p></li><li><p>从图中可以看出<code>test.py</code>直接调用了fun3、fun1、fun2和fun5函数; fun5函数直接调用了fun4函数; fun1、fun2、fun3、fun4和fun5都直接调用了print以及sleep函数; 整个测试代码运行的总时间为6001ms, 其中fun3的运行时间为1999ms, 所占的时间百分比为33.3%, 也就是 1999ms / 6006ms = 33.3%。</p></li></ol><p><strong>test.py</strong><br></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># __Author__: Sdite</span></span><br><span class="line"><span class="comment"># __Email__ : a122691411@gmail.com</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fun1</span><span class="params">(a, b)</span>:</span></span><br><span class="line">    print(<span class="string">'fun1'</span>)</span><br><span class="line">    print(a, b)</span><br><span class="line">    time.sleep(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fun2</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">'fun2'</span>)</span><br><span class="line">    time.sleep(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fun3</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">'fun3'</span>)</span><br><span class="line">    time.sleep(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fun4</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">'fun4'</span>)</span><br><span class="line">    time.sleep(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fun5</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">'fun5'</span>)</span><br><span class="line">    time.sleep(<span class="number">1</span>)</span><br><span class="line">    fun4()</span><br><span class="line"></span><br><span class="line">fun1(<span class="string">'foo'</span>, <span class="string">'bar'</span>)</span><br><span class="line">fun2()</span><br><span class="line">fun3()</span><br><span class="line">fun5()</span><br></pre></td></tr></table></figure><p></p><h1 id="objgraph"><a href="#objgraph" class="headerlink" title="objgraph"></a>objgraph</h1><p><code>objgraph</code>是一个实用模块, 可以列出当前内存中存在的对象, 可用于定位<strong>内存泄露</strong></p><p>推荐文章: <a href="http://python.jobbole.com/88827/" target="_blank" rel="noopener">http://python.jobbole.com/88827/</a><br><strong>详情还是谷歌或百度一下, 日后看了再补充</strong></p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Fri Dec 14 2018 21:02:56 GMT+0800 (中国标准时间) --&gt;&lt;h1 id=&quot;timeit&quot;&gt;&lt;a href=&quot;#timeit&quot; class=&quot;headerlink&quot; title=&quot;timeit&quot;&gt;&lt;/a&gt;timeit&lt;/h1&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; timeit&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;print(timeit.timeit(stmt=&lt;span class=&quot;string&quot;&gt;&quot;[i for i in range(1000)]&quot;&lt;/span&gt;, number=&lt;span class=&quot;number&quot;&gt;100000&lt;/span&gt;))         &lt;span class=&quot;comment&quot;&gt;# 传入的是字符串表达式&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 输出: &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 3.0182870961591375&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;&lt;code&gt;timeit&lt;/code&gt;只输出被测试代码的总运行时间, 单位为秒, 没有详细的统计.&lt;br&gt;&lt;a href=&quot;/posts/6218c1b6.html&quot;&gt;timeit的详细介绍点这里&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Python" scheme="https://vonsdite.cn/categories/Python/"/>
    
      <category term="性能测试" scheme="https://vonsdite.cn/categories/Python/%E6%80%A7%E8%83%BD%E6%B5%8B%E8%AF%95/"/>
    
    
      <category term="Python" scheme="https://vonsdite.cn/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>python timeti模块使用</title>
    <link href="https://vonsdite.cn/posts/6218c1b6.html"/>
    <id>https://vonsdite.cn/posts/6218c1b6.html</id>
    <published>2018-12-05T15:50:42.000Z</published>
    <updated>2018-12-06T07:28:40.392Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Fri Dec 14 2018 21:02:56 GMT+0800 (中国标准时间) --><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>python可以使用<code>timeit</code>模块来测试小段代码的运行时间.<br><code>timeit</code>主要的函数有<code>timeit</code>和<code>repeat</code> (还有<code>default_timer</code>, 用法可见<a href="/posts/605d5daa.html#4-timeit-default-timer">文章</a>)</p><h1 id="timeit和repeat的实现"><a href="#timeit和repeat的实现" class="headerlink" title="timeit和repeat的实现"></a><code>timeit</code>和<code>repeat</code>的实现</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">timeit</span><span class="params">(stmt=<span class="string">"pass"</span>, setup=<span class="string">"pass"</span>, timer=default_timer,</span></span></span><br><span class="line"><span class="function"><span class="params">               number=default_number, globals=None)</span>:</span></span><br><span class="line">    <span class="string">"""Convenience function to create Timer object and call timeit method."""</span></span><br><span class="line">    <span class="keyword">return</span> Timer(stmt, setup, timer, globals).timeit(number)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">repeat</span><span class="params">(stmt=<span class="string">"pass"</span>, setup=<span class="string">"pass"</span>, timer=default_timer,</span></span></span><br><span class="line"><span class="function"><span class="params">               repeat=default_repeat, number=default_number, globals=None)</span>:</span></span><br><span class="line">    <span class="string">"""Convenience function to create Timer object and call repeat method."""</span></span><br><span class="line">    <span class="keyword">return</span> Timer(stmt, setup, timer, globals).repeat(repeat, number)</span><br></pre></td></tr></table></figure><a id="more"></a><p>在上面的代码中可见, 无论是<code>timeit</code>还是<code>repeat</code>都是先 生成<code>Timer</code>对象, 然后调用了<code>Timer</code>对象的<code>timeit</code>或<code>repeat</code>函数。</p><h2 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h2><ol><li><p><strong><code>stmt</code></strong>: 用于传入要测试时间的代码, 可以直接接受<strong>字符串的表达式</strong>, 也可以接受<strong>单个变量</strong>, 也可以接受<strong>函数</strong>。<br><strong>PS:</strong> <strong>传入函数</strong>时要使用参数<code>setup</code>导入函数 <img src="/images/ExclamationMark.png" alt=""></p></li><li><p><strong><code>setup</code></strong>: 传入stmt的<strong>运行环境</strong>, 比如stmt中使用到的<strong>参数、变量, 要导入的模块</strong>等。可以写一行语句, 也可以写多行语句, 写多行语句时要用<strong>分号;</strong>隔开语句。</p></li><li><p><strong><code>number</code></strong>: 要测试的代码的<strong>运行次数</strong>, 默认<strong>100000次</strong>, 对于耗时的代码, 运行太多次会比较慢, 此时建议自己修改一下运行次数</p></li><li><strong><code>repeat</code></strong>: 指<strong>测试要重复几次</strong>, 每次的结果构成列表返回, <strong>默认3次</strong>。</li></ol><h2 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h2><p>在使用timeit模块时, 有两种方式</p><ol><li>直接使用<code>timeit.timeit()</code>、<code>tiemit.repeat()</code></li><li>先用<code>timeit.Timer()</code>来生成一个<strong>Timer对象</strong>, 然后再用Timer对象用<code>timeit()</code>和<code>repeat()</code>函数, 相对灵活一些。</li></ol><h2 id="repeat的优点"><a href="#repeat的优点" class="headerlink" title="repeat的优点"></a>repeat的优点</h2><p>可以多次重复测试, 并可以对测试所得的执行时间取<strong>最小值</strong>, <strong>平均值</strong>, <strong>最大值</strong>, 更方便分析。</p><h1 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h1><h2 id="例子1"><a href="#例子1" class="headerlink" title="例子1"></a>例子1</h2><p>测试一个<strong>列表推导式</strong> 比正常写<strong>for循环</strong>快多少<br></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> timeit</span><br><span class="line"></span><br><span class="line">foo = <span class="string">"""</span></span><br><span class="line"><span class="string">sum = []</span></span><br><span class="line"><span class="string">for i in range(1000):</span></span><br><span class="line"><span class="string">    sum.append(i)</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line">print(timeit.timeit(stmt=<span class="string">"[i for i in range(1000)]"</span>, number=<span class="number">100000</span>))         <span class="comment"># 传入的是字符串表达式</span></span><br><span class="line">print(timeit.timeit(stmt=foo, number=<span class="number">100000</span>))                            <span class="comment"># 传入的是变量</span></span><br><span class="line"><span class="comment"># 输出：</span></span><br><span class="line"><span class="comment"># 3.0182870961591375     </span></span><br><span class="line"><span class="comment"># 8.967388768466217</span></span><br></pre></td></tr></table></figure><p></p><h2 id="例子2"><a href="#例子2" class="headerlink" title="例子2"></a>例子2</h2><p>使用<code>timeit</code>来比较<strong>递归斐波那契</strong>和<strong>迭代斐波那契</strong>的时间效率差异</p><h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h3><p>代码中分别定义了<strong>两个函数</strong>,<br>要测试这两个函数, 需导入这两个函数,<br>即设置<code>setup = from __main__ import recursive_fibonacci</code>,<br>表明从<strong>当前运行的代码</strong>下导入这两个函数。<br>如果是其他模块的, 则要<code>import</code>别的模块进来</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> timeit</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">recursive_fibonacci</span><span class="params">(nth_item)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> nth_item == <span class="number">1</span> <span class="keyword">or</span> nth_item == <span class="number">2</span>:</span><br><span class="line">          <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">    <span class="keyword">elif</span> nth_item &lt;= <span class="number">0</span>:</span><br><span class="line">          <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> recursive_fibonacci(nth_item - <span class="number">1</span>) + recursive_fibonacci(nth_item - <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">loop_fibonacci</span><span class="params">(nth_item)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> nth_item == <span class="number">1</span> <span class="keyword">or</span> nth_item == <span class="number">2</span>:</span><br><span class="line">          <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">    <span class="keyword">elif</span> nth_item &lt;= <span class="number">0</span>:</span><br><span class="line">          <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    first_item, second_item = <span class="number">1</span>, <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> range(nth_item<span class="number">-2</span>):</span><br><span class="line">          first_item, second_item = second_item, first_item + second_item</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> second_item</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    print(</span><br><span class="line">          timeit.timeit(</span><br><span class="line">              stmt=<span class="string">"recursive_fibonacci(20)"</span>,</span><br><span class="line">              setup=<span class="string">"from __main__ import recursive_fibonacci"</span>, number=<span class="number">10000</span></span><br><span class="line">          )</span><br><span class="line">    )</span><br><span class="line">    print(</span><br><span class="line">          timeit.timeit(</span><br><span class="line">              stmt=<span class="string">"loop_fibonacci(20)"</span>,</span><br><span class="line">              setup=<span class="string">"from __main__ import loop_fibonacci"</span>,</span><br><span class="line">              number=<span class="number">10000</span></span><br><span class="line">          )</span><br><span class="line">    )</span><br></pre></td></tr></table></figure><h2 id="例子3"><a href="#例子3" class="headerlink" title="例子3"></a>例子3</h2><p><code>setup</code>参数的灵活使用, 设置<code>stmt</code>的<strong>运行环境</strong>的详细例子<br>涉及</p><ul><li>导入模块</li><li>变量定义</li><li>函数调用</li><li>多行写<code>setup</code>要加<strong>分号</strong><img src="/images/ExclamationMark.png" alt="">的方式</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> timeit</span><br><span class="line"></span><br><span class="line">x = <span class="string">"""</span></span><br><span class="line"><span class="string">say_hi.ParseFromString(p)</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line">y = <span class="string">"""</span></span><br><span class="line"><span class="string">simplejson.loads(x)</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line">print(</span><br><span class="line">    timeit.timeit(</span><br><span class="line">        stmt=x, </span><br><span class="line">        setup=<span class="string">"import say_hi_pb2;"</span></span><br><span class="line">            <span class="string">"say_hi = say_hi_pb2.SayHi();"</span></span><br><span class="line">            <span class="string">"say_hi.id = 13423;"</span></span><br><span class="line">            <span class="string">"say_hi.something = 'axiba';"</span></span><br><span class="line">            <span class="string">"say_hi.extra_info = 'xiba';"</span></span><br><span class="line">            <span class="string">"p =say_hi.SerializeToString()"</span>, </span><br><span class="line">            number=<span class="number">1000000</span></span><br><span class="line">    )</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">print(</span><br><span class="line">    timeit.timeit(</span><br><span class="line">        stmt=y, </span><br><span class="line">        setup=<span class="string">"import simplejson; "</span></span><br><span class="line">            <span class="string">"json=&#123;"</span></span><br><span class="line">            <span class="string">"'id': 13423,"</span></span><br><span class="line">            <span class="string">"'something': 'axiba',"</span></span><br><span class="line">            <span class="string">"'extra_info': 'xiba',"</span></span><br><span class="line">            <span class="string">"&#125;;"</span></span><br><span class="line">            <span class="string">"x = simplejson.dumps(json)"</span>, </span><br><span class="line">        number=<span class="number">1000000</span></span><br><span class="line">    )</span><br><span class="line">)</span><br></pre></td></tr></table></figure><h1 id="命令行调用timeit"><a href="#命令行调用timeit" class="headerlink" title="命令行调用timeit"></a>命令行调用timeit</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">python -m timeit [-n N] [-r N] [-s S] [-t] [-c] [-h] [statement...]</span><br><span class="line"></span><br><span class="line">-n N 执行指定语句的次数</span><br><span class="line">-r N 重复测量的次数(默认3次)</span><br><span class="line">-s S 指定初始化代码构建环境的导入语句(默认pass)</span><br><span class="line">python 3.3新增</span><br><span class="line">-t 使用time.time() (不推荐)</span><br><span class="line">-c 使用time.clock() (不推荐)</span><br><span class="line">-v 打印原始计时结果</span><br><span class="line">-h 帮助</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ python -m timeit <span class="string">'"-".join(str(n) for n in range(100))'</span></span><br><span class="line">loops, best of 3: 40.3 usec per loop</span><br><span class="line">$ python -m timeit <span class="string">'"-".join([str(n) for n in range(100)])'</span></span><br><span class="line">loops, best of 3: 33.4 usec per loop</span><br><span class="line">$ python -m timeit <span class="string">'"-".join(map(str, range(100)))'</span></span><br><span class="line">loops, best of 3: 25.2 usec per loop</span><br></pre></td></tr></table></figure><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Fri Dec 14 2018 21:02:56 GMT+0800 (中国标准时间) --&gt;&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;python可以使用&lt;code&gt;timeit&lt;/code&gt;模块来测试小段代码的运行时间.&lt;br&gt;&lt;code&gt;timeit&lt;/code&gt;主要的函数有&lt;code&gt;timeit&lt;/code&gt;和&lt;code&gt;repeat&lt;/code&gt; (还有&lt;code&gt;default_timer&lt;/code&gt;, 用法可见&lt;a href=&quot;/posts/605d5daa.html#4-timeit-default-timer&quot;&gt;文章&lt;/a&gt;)&lt;/p&gt;&lt;h1 id=&quot;timeit和repeat的实现&quot;&gt;&lt;a href=&quot;#timeit和repeat的实现&quot; class=&quot;headerlink&quot; title=&quot;timeit和repeat的实现&quot;&gt;&lt;/a&gt;&lt;code&gt;timeit&lt;/code&gt;和&lt;code&gt;repeat&lt;/code&gt;的实现&lt;/h1&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;timeit&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(stmt=&lt;span class=&quot;string&quot;&gt;&quot;pass&quot;&lt;/span&gt;, setup=&lt;span class=&quot;string&quot;&gt;&quot;pass&quot;&lt;/span&gt;, timer=default_timer,&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;params&quot;&gt;               number=default_number, globals=None)&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&quot;&quot;&quot;Convenience function to create Timer object and call timeit method.&quot;&quot;&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; Timer(stmt, setup, timer, globals).timeit(number)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;repeat&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(stmt=&lt;span class=&quot;string&quot;&gt;&quot;pass&quot;&lt;/span&gt;, setup=&lt;span class=&quot;string&quot;&gt;&quot;pass&quot;&lt;/span&gt;, timer=default_timer,&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;params&quot;&gt;               repeat=default_repeat, number=default_number, globals=None)&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&quot;&quot;&quot;Convenience function to create Timer object and call repeat method.&quot;&quot;&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; Timer(stmt, setup, timer, globals).repeat(repeat, number)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="Python" scheme="https://vonsdite.cn/categories/Python/"/>
    
      <category term="性能测试" scheme="https://vonsdite.cn/categories/Python/%E6%80%A7%E8%83%BD%E6%B5%8B%E8%AF%95/"/>
    
    
      <category term="Python" scheme="https://vonsdite.cn/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Hexo Next 加入评论功能gitalk</title>
    <link href="https://vonsdite.cn/posts/dd07da63.html"/>
    <id>https://vonsdite.cn/posts/dd07da63.html</id>
    <published>2018-12-05T10:30:20.000Z</published>
    <updated>2018-12-05T13:22:27.506Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Fri Dec 14 2018 21:02:55 GMT+0800 (中国标准时间) --><h1 id="Gitalk"><a href="#Gitalk" class="headerlink" title="Gitalk"></a>Gitalk</h1><p><code>Gitalk</code>: 一个基于 Github Issue 和 Preact 开发的评论插件<br>详情Demo可见:<a href="https://gitalk.github.io/" target="_blank" rel="noopener">https://gitalk.github.io/</a></p><h1 id="增加评论区"><a href="#增加评论区" class="headerlink" title="增加评论区"></a>增加评论区</h1><h2 id="注册OAuth-Application"><a href="#注册OAuth-Application" class="headerlink" title="注册OAuth Application"></a>注册OAuth Application</h2><a id="more"></a><p>在GitHub上注册新应用, 链接:<a href="https://github.com/settings/applications/new" target="_blank" rel="noopener">https://github.com/settings/applications/new</a></p><table><thead><tr><th>参数</th><th>说明</th></tr></thead><tbody><tr><td><code>Application name</code></td><td>应用名称, 可以任意填入</td></tr><tr><td><code>Homepage URL</code></td><td>网站URL, <strong>注意</strong>用https://开头, 开头如<a href="https://vonsdite.cn">https://vonsdite.cn</a></td></tr><tr><td><code>Application description</code></td><td>应用描述, 可以任意填入</td></tr><tr><td><code>Authorization callback URL</code></td><td>网站URL, <strong>注意</strong>用https://开头, 如<a href="https://vonsdite.cn">https://vonsdite.cn</a></td></tr></tbody></table><p><img src="/images/2018-12-05-18-39-47.png" alt=""></p><p>注册后记下<code>Client ID</code>和<code>Client Secret</code>, 后续要使用到<br><img src="/images/2018-12-05-18-48-20.png" alt=""></p><h2 id="md5-min-js"><a href="#md5-min-js" class="headerlink" title="md5.min.js"></a>md5.min.js</h2><p>在<code>themes\next\source\js\src\</code>目录下创建<code>md5.min.js</code>, 并添加如下内容:</p><p>加这个代码的<strong>原因是</strong>: 部分文章的评论区会报Error: Validation Failed, 具体原因是由于 Github 限制<strong>labels长度</strong>不能超过<strong>50</strong>引起的, 该问题解决方案来自Gitalk项目仓<a href="https://github.com/gitalk/gitalk/issues/102" target="_blank" rel="noopener">Issues 115</a>, 通过<strong>MD5</strong>加密ID来缩短<strong>labels长度</strong>。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">!<span class="function"><span class="keyword">function</span>(<span class="params">n</span>)</span>&#123;<span class="string">"use strict"</span>;<span class="function"><span class="keyword">function</span> <span class="title">t</span>(<span class="params">n,t</span>)</span>&#123;<span class="keyword">var</span> r=(<span class="number">65535</span>&amp;n)+(<span class="number">65535</span>&amp;t);<span class="keyword">return</span>(n&gt;&gt;<span class="number">16</span>)+(t&gt;&gt;<span class="number">16</span>)+(r&gt;&gt;<span class="number">16</span>)&lt;&lt;<span class="number">16</span>|<span class="number">65535</span>&amp;r&#125;<span class="function"><span class="keyword">function</span> <span class="title">r</span>(<span class="params">n,t</span>)</span>&#123;<span class="keyword">return</span> n&lt;&lt;t|n&gt;&gt;&gt;<span class="number">32</span>-t&#125;<span class="function"><span class="keyword">function</span> <span class="title">e</span>(<span class="params">n,e,o,u,c,f</span>)</span>&#123;<span class="keyword">return</span> t(r(t(t(e,n),t(u,f)),c),o)&#125;<span class="function"><span class="keyword">function</span> <span class="title">o</span>(<span class="params">n,t,r,o,u,c,f</span>)</span>&#123;<span class="keyword">return</span> e(t&amp;r|~t&amp;o,n,t,u,c,f)&#125;<span class="function"><span class="keyword">function</span> <span class="title">u</span>(<span class="params">n,t,r,o,u,c,f</span>)</span>&#123;<span class="keyword">return</span> e(t&amp;o|r&amp;~o,n,t,u,c,f)&#125;<span class="function"><span class="keyword">function</span> <span class="title">c</span>(<span class="params">n,t,r,o,u,c,f</span>)</span>&#123;<span class="keyword">return</span> e(t^r^o,n,t,u,c,f)&#125;<span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params">n,t,r,o,u,c,f</span>)</span>&#123;<span class="keyword">return</span> e(r^(t|~o),n,t,u,c,f)&#125;<span class="function"><span class="keyword">function</span> <span class="title">i</span>(<span class="params">n,r</span>)</span>&#123;n[r&gt;&gt;<span class="number">5</span>]|=<span class="number">128</span>&lt;&lt;r%<span class="number">32</span>,n[<span class="number">14</span>+(r+<span class="number">64</span>&gt;&gt;&gt;<span class="number">9</span>&lt;&lt;<span class="number">4</span>)]=r;<span class="keyword">var</span> e,i,a,d,h,l=<span class="number">1732584193</span>,g=<span class="number">-271733879</span>,v=<span class="number">-1732584194</span>,m=<span class="number">271733878</span>;<span class="keyword">for</span>(e=<span class="number">0</span>;e&lt;n.length;e+=<span class="number">16</span>)i=l,a=g,d=v,h=m,g=f(g=f(g=f(g=f(g=c(g=c(g=c(g=c(g=u(g=u(g=u(g=u(g=o(g=o(g=o(g=o(g,v=o(v,m=o(m,l=o(l,g,v,m,n[e],<span class="number">7</span>,<span class="number">-680876936</span>),g,v,n[e+<span class="number">1</span>],<span class="number">12</span>,<span class="number">-389564586</span>),l,g,n[e+<span class="number">2</span>],<span class="number">17</span>,<span class="number">606105819</span>),m,l,n[e+<span class="number">3</span>],<span class="number">22</span>,<span class="number">-1044525330</span>),v=o(v,m=o(m,l=o(l,g,v,m,n[e+<span class="number">4</span>],<span class="number">7</span>,<span class="number">-176418897</span>),g,v,n[e+<span class="number">5</span>],<span class="number">12</span>,<span class="number">1200080426</span>),l,g,n[e+<span class="number">6</span>],<span class="number">17</span>,<span class="number">-1473231341</span>),m,l,n[e+<span class="number">7</span>],<span class="number">22</span>,<span class="number">-45705983</span>),v=o(v,m=o(m,l=o(l,g,v,m,n[e+<span class="number">8</span>],<span class="number">7</span>,<span class="number">1770035416</span>),g,v,n[e+<span class="number">9</span>],<span class="number">12</span>,<span class="number">-1958414417</span>),l,g,n[e+<span class="number">10</span>],<span class="number">17</span>,<span class="number">-42063</span>),m,l,n[e+<span class="number">11</span>],<span class="number">22</span>,<span class="number">-1990404162</span>),v=o(v,m=o(m,l=o(l,g,v,m,n[e+<span class="number">12</span>],<span class="number">7</span>,<span class="number">1804603682</span>),g,v,n[e+<span class="number">13</span>],<span class="number">12</span>,<span class="number">-40341101</span>),l,g,n[e+<span class="number">14</span>],<span class="number">17</span>,<span class="number">-1502002290</span>),m,l,n[e+<span class="number">15</span>],<span class="number">22</span>,<span class="number">1236535329</span>),v=u(v,m=u(m,l=u(l,g,v,m,n[e+<span class="number">1</span>],<span class="number">5</span>,<span class="number">-165796510</span>),g,v,n[e+<span class="number">6</span>],<span class="number">9</span>,<span class="number">-1069501632</span>),l,g,n[e+<span class="number">11</span>],<span class="number">14</span>,<span class="number">643717713</span>),m,l,n[e],<span class="number">20</span>,<span class="number">-373897302</span>),v=u(v,m=u(m,l=u(l,g,v,m,n[e+<span class="number">5</span>],<span class="number">5</span>,<span class="number">-701558691</span>),g,v,n[e+<span class="number">10</span>],<span class="number">9</span>,<span class="number">38016083</span>),l,g,n[e+<span class="number">15</span>],<span class="number">14</span>,<span class="number">-660478335</span>),m,l,n[e+<span class="number">4</span>],<span class="number">20</span>,<span class="number">-405537848</span>),v=u(v,m=u(m,l=u(l,g,v,m,n[e+<span class="number">9</span>],<span class="number">5</span>,<span class="number">568446438</span>),g,v,n[e+<span class="number">14</span>],<span class="number">9</span>,<span class="number">-1019803690</span>),l,g,n[e+<span class="number">3</span>],<span class="number">14</span>,<span class="number">-187363961</span>),m,l,n[e+<span class="number">8</span>],<span class="number">20</span>,<span class="number">1163531501</span>),v=u(v,m=u(m,l=u(l,g,v,m,n[e+<span class="number">13</span>],<span class="number">5</span>,<span class="number">-1444681467</span>),g,v,n[e+<span class="number">2</span>],<span class="number">9</span>,<span class="number">-51403784</span>),l,g,n[e+<span class="number">7</span>],<span class="number">14</span>,<span class="number">1735328473</span>),m,l,n[e+<span class="number">12</span>],<span class="number">20</span>,<span class="number">-1926607734</span>),v=c(v,m=c(m,l=c(l,g,v,m,n[e+<span class="number">5</span>],<span class="number">4</span>,<span class="number">-378558</span>),g,v,n[e+<span class="number">8</span>],<span class="number">11</span>,<span class="number">-2022574463</span>),l,g,n[e+<span class="number">11</span>],<span class="number">16</span>,<span class="number">1839030562</span>),m,l,n[e+<span class="number">14</span>],<span class="number">23</span>,<span class="number">-35309556</span>),v=c(v,m=c(m,l=c(l,g,v,m,n[e+<span class="number">1</span>],<span class="number">4</span>,<span class="number">-1530992060</span>),g,v,n[e+<span class="number">4</span>],<span class="number">11</span>,<span class="number">1272893353</span>),l,g,n[e+<span class="number">7</span>],<span class="number">16</span>,<span class="number">-155497632</span>),m,l,n[e+<span class="number">10</span>],<span class="number">23</span>,<span class="number">-1094730640</span>),v=c(v,m=c(m,l=c(l,g,v,m,n[e+<span class="number">13</span>],<span class="number">4</span>,<span class="number">681279174</span>),g,v,n[e],<span class="number">11</span>,<span class="number">-358537222</span>),l,g,n[e+<span class="number">3</span>],<span class="number">16</span>,<span class="number">-722521979</span>),m,l,n[e+<span class="number">6</span>],<span class="number">23</span>,<span class="number">76029189</span>),v=c(v,m=c(m,l=c(l,g,v,m,n[e+<span class="number">9</span>],<span class="number">4</span>,<span class="number">-640364487</span>),g,v,n[e+<span class="number">12</span>],<span class="number">11</span>,<span class="number">-421815835</span>),l,g,n[e+<span class="number">15</span>],<span class="number">16</span>,<span class="number">530742520</span>),m,l,n[e+<span class="number">2</span>],<span class="number">23</span>,<span class="number">-995338651</span>),v=f(v,m=f(m,l=f(l,g,v,m,n[e],<span class="number">6</span>,<span class="number">-198630844</span>),g,v,n[e+<span class="number">7</span>],<span class="number">10</span>,<span class="number">1126891415</span>),l,g,n[e+<span class="number">14</span>],<span class="number">15</span>,<span class="number">-1416354905</span>),m,l,n[e+<span class="number">5</span>],<span class="number">21</span>,<span class="number">-57434055</span>),v=f(v,m=f(m,l=f(l,g,v,m,n[e+<span class="number">12</span>],<span class="number">6</span>,<span class="number">1700485571</span>),g,v,n[e+<span class="number">3</span>],<span class="number">10</span>,<span class="number">-1894986606</span>),l,g,n[e+<span class="number">10</span>],<span class="number">15</span>,<span class="number">-1051523</span>),m,l,n[e+<span class="number">1</span>],<span class="number">21</span>,<span class="number">-2054922799</span>),v=f(v,m=f(m,l=f(l,g,v,m,n[e+<span class="number">8</span>],<span class="number">6</span>,<span class="number">1873313359</span>),g,v,n[e+<span class="number">15</span>],<span class="number">10</span>,<span class="number">-30611744</span>),l,g,n[e+<span class="number">6</span>],<span class="number">15</span>,<span class="number">-1560198380</span>),m,l,n[e+<span class="number">13</span>],<span class="number">21</span>,<span class="number">1309151649</span>),v=f(v,m=f(m,l=f(l,g,v,m,n[e+<span class="number">4</span>],<span class="number">6</span>,<span class="number">-145523070</span>),g,v,n[e+<span class="number">11</span>],<span class="number">10</span>,<span class="number">-1120210379</span>),l,g,n[e+<span class="number">2</span>],<span class="number">15</span>,<span class="number">718787259</span>),m,l,n[e+<span class="number">9</span>],<span class="number">21</span>,<span class="number">-343485551</span>),l=t(l,i),g=t(g,a),v=t(v,d),m=t(m,h);<span class="keyword">return</span>[l,g,v,m]&#125;<span class="function"><span class="keyword">function</span> <span class="title">a</span>(<span class="params">n</span>)</span>&#123;<span class="keyword">var</span> t,r=<span class="string">""</span>,e=<span class="number">32</span>*n.length;<span class="keyword">for</span>(t=<span class="number">0</span>;t&lt;e;t+=<span class="number">8</span>)r+=<span class="built_in">String</span>.fromCharCode(n[t&gt;&gt;<span class="number">5</span>]&gt;&gt;&gt;t%<span class="number">32</span>&amp;<span class="number">255</span>);<span class="keyword">return</span> r&#125;<span class="function"><span class="keyword">function</span> <span class="title">d</span>(<span class="params">n</span>)</span>&#123;<span class="keyword">var</span> t,r=[];<span class="keyword">for</span>(r[(n.length&gt;&gt;<span class="number">2</span>)<span class="number">-1</span>]=<span class="keyword">void</span> <span class="number">0</span>,t=<span class="number">0</span>;t&lt;r.length;t+=<span class="number">1</span>)r[t]=<span class="number">0</span>;<span class="keyword">var</span> e=<span class="number">8</span>*n.length;<span class="keyword">for</span>(t=<span class="number">0</span>;t&lt;e;t+=<span class="number">8</span>)r[t&gt;&gt;<span class="number">5</span>]|=(<span class="number">255</span>&amp;n.charCodeAt(t/<span class="number">8</span>))&lt;&lt;t%<span class="number">32</span>;<span class="keyword">return</span> r&#125;<span class="function"><span class="keyword">function</span> <span class="title">h</span>(<span class="params">n</span>)</span>&#123;<span class="keyword">return</span> a(i(d(n),<span class="number">8</span>*n.length))&#125;<span class="function"><span class="keyword">function</span> <span class="title">l</span>(<span class="params">n,t</span>)</span>&#123;<span class="keyword">var</span> r,e,o=d(n),u=[],c=[];<span class="keyword">for</span>(u[<span class="number">15</span>]=c[<span class="number">15</span>]=<span class="keyword">void</span> <span class="number">0</span>,o.length&gt;<span class="number">16</span>&amp;&amp;(o=i(o,<span class="number">8</span>*n.length)),r=<span class="number">0</span>;r&lt;<span class="number">16</span>;r+=<span class="number">1</span>)u[r]=<span class="number">909522486</span>^o[r],c[r]=<span class="number">1549556828</span>^o[r];<span class="keyword">return</span> e=i(u.concat(d(t)),<span class="number">512</span>+<span class="number">8</span>*t.length),a(i(c.concat(e),<span class="number">640</span>))&#125;<span class="function"><span class="keyword">function</span> <span class="title">g</span>(<span class="params">n</span>)</span>&#123;<span class="keyword">var</span> t,r,e=<span class="string">""</span>;<span class="keyword">for</span>(r=<span class="number">0</span>;r&lt;n.length;r+=<span class="number">1</span>)t=n.charCodeAt(r),e+=<span class="string">"0123456789abcdef"</span>.charAt(t&gt;&gt;&gt;<span class="number">4</span>&amp;<span class="number">15</span>)+<span class="string">"0123456789abcdef"</span>.charAt(<span class="number">15</span>&amp;t);<span class="keyword">return</span> e&#125;<span class="function"><span class="keyword">function</span> <span class="title">v</span>(<span class="params">n</span>)</span>&#123;<span class="keyword">return</span> <span class="built_in">unescape</span>(<span class="built_in">encodeURIComponent</span>(n))&#125;<span class="function"><span class="keyword">function</span> <span class="title">m</span>(<span class="params">n</span>)</span>&#123;<span class="keyword">return</span> h(v(n))&#125;<span class="function"><span class="keyword">function</span> <span class="title">p</span>(<span class="params">n</span>)</span>&#123;<span class="keyword">return</span> g(m(n))&#125;<span class="function"><span class="keyword">function</span> <span class="title">s</span>(<span class="params">n,t</span>)</span>&#123;<span class="keyword">return</span> l(v(n),v(t))&#125;<span class="function"><span class="keyword">function</span> <span class="title">C</span>(<span class="params">n,t</span>)</span>&#123;<span class="keyword">return</span> g(s(n,t))&#125;<span class="function"><span class="keyword">function</span> <span class="title">A</span>(<span class="params">n,t,r</span>)</span>&#123;<span class="keyword">return</span> t?r?s(t,n):C(t,n):r?m(n):p(n)&#125;<span class="string">"function"</span>==<span class="keyword">typeof</span> define&amp;&amp;define.amd?define(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;<span class="keyword">return</span> A&#125;):<span class="string">"object"</span>==<span class="keyword">typeof</span> <span class="built_in">module</span>&amp;&amp;<span class="built_in">module</span>.exports?<span class="built_in">module</span>.exports=A:n.md5=A&#125;(<span class="keyword">this</span>);</span><br></pre></td></tr></table></figure><h2 id="新建gitalk-swig"><a href="#新建gitalk-swig" class="headerlink" title="新建gitalk.swig"></a>新建gitalk.swig</h2><p>在站点目录下, <code>themes/next/layout/_third-party/comments/</code>下新建<code>gitalk.swig</code>文件, 并添加如下内容</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&#123;% if page.comments &amp;&amp; theme.gitalk.enable %&#125;</span><br><span class="line">  &lt;link rel=&quot;stylesheet&quot; href=&quot;https://unpkg.com/gitalk/dist/gitalk.css&quot;&gt;</span><br><span class="line">  &lt;script src=&quot;https://unpkg.com/gitalk/dist/gitalk.min.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">  &lt;script src=&quot;/js/src/md5.min.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">   &lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line">        var gitalk = new Gitalk(&#123;</span><br><span class="line">          clientID: &apos;&#123;&#123; theme.gitalk.ClientID &#125;&#125;&apos;,</span><br><span class="line">          clientSecret: &apos;&#123;&#123; theme.gitalk.ClientSecret &#125;&#125;&apos;,</span><br><span class="line">          repo: &apos;&#123;&#123; theme.gitalk.repo &#125;&#125;&apos;,</span><br><span class="line">          owner: &apos;&#123;&#123; theme.gitalk.githubID &#125;&#125;&apos;,</span><br><span class="line">          admin: [&apos;&#123;&#123; theme.gitalk.adminUser &#125;&#125;&apos;],</span><br><span class="line">          id: md5(location.pathname),</span><br><span class="line">          distractionFreeMode: &apos;&#123;&#123; theme.gitalk.distractionFreeMode &#125;&#125;&apos;</span><br><span class="line">        &#125;)</span><br><span class="line">        gitalk.render(&apos;gitalk-container&apos;)           </span><br><span class="line">       &lt;/script&gt;</span><br><span class="line">&#123;% endif %&#125;</span><br></pre></td></tr></table></figure><h2 id="修改comments-swig"><a href="#修改comments-swig" class="headerlink" title="修改comments.swig"></a>修改comments.swig</h2><p>修改<code>themes/next/layout/_partials/comments.swig</code>, 添加内容如下, (在倒数第二个<code>endif</code>前):<br><img src="/images/2018-12-05-18-53-21.png" alt=""></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#123;% elseif theme.gitalk.enable %&#125;</span><br><span class="line"> &lt;div id=&quot;gitalk-container&quot;&gt;&lt;/div&gt;</span><br></pre></td></tr></table></figure><h2 id="修改index-swig"><a href="#修改index-swig" class="headerlink" title="修改index.swig"></a>修改index.swig</h2><p>修改<code>themes/next/layout/_third-party/comments/index.swig</code>, 在最后一行添加内容:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% include &apos;gitalk.swig&apos; %&#125;</span><br></pre></td></tr></table></figure><h2 id="新建gitalk-styl"><a href="#新建gitalk-styl" class="headerlink" title="新建gitalk.styl"></a>新建gitalk.styl</h2><p>在<code>themes/next/source/css/_common/components/third-party/</code>目录下新建<code>gitalk.styl</code>, 并添加如下内容:</p><figure class="highlight styl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.gt-header</span> <span class="selector-tag">a</span>, <span class="selector-class">.gt-comments</span> <span class="selector-tag">a</span>, <span class="selector-class">.gt-popup</span> a</span><br><span class="line">  <span class="attribute">border-bottom</span>: none;</span><br><span class="line"><span class="selector-class">.gt-container</span> <span class="selector-class">.gt-popup</span> <span class="selector-class">.gt-action</span><span class="selector-class">.is--active</span>:before</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">0.7em</span>;</span><br></pre></td></tr></table></figure><h2 id="修改third-party-styl"><a href="#修改third-party-styl" class="headerlink" title="修改third-party.styl"></a>修改third-party.styl</h2><p>修改<code>themes/next/source/css/_common/components/third-party/third-party.styl</code>, 在最后一行上添加内容:</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">@import "gitalk";</span><br></pre></td></tr></table></figure><h2 id="修改主题配置文件-config-yml"><a href="#修改主题配置文件-config-yml" class="headerlink" title="修改主题配置文件_config.yml"></a>修改主题配置文件_config.yml</h2><p>在主题配置文件<code>themes/next/_config.yml</code>中添加如下内容:<br></p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">gitalk:</span></span><br><span class="line"><span class="attr">  enable:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">  githubID:</span> <span class="string">github帐号</span>           <span class="comment"># 例：vonsdite   注意必须小写 </span></span><br><span class="line"><span class="attr">  repo:</span> <span class="string">仓库名称</span>                 <span class="comment"># 例：vonsdite.github.io</span></span><br><span class="line"><span class="attr">  ClientID:</span> <span class="string">Client</span> <span class="string">ID</span>           <span class="comment"># 上文注册 OAuth Application后得到的值</span></span><br><span class="line"><span class="attr">  ClientSecret:</span> <span class="string">Client</span> <span class="string">Secret</span>   <span class="comment"># 上文注册 OAuth Application后得到的值</span></span><br><span class="line"><span class="attr">  adminUser:</span> <span class="string">github帐号</span>         <span class="comment"># 指定可初始化评论账户, 例：vonsdite   注意必须小写 </span></span><br><span class="line"><span class="attr">  distractionFreeMode:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><p></p><p>以上就是<code>Next</code>中添加<strong>gitalk评论</strong>的配置。</p><h2 id="开启评论"><a href="#开启评论" class="headerlink" title="开启评论"></a>开启评论</h2><p>博客上传到GitHub上后, 打开页面<strong>进入某一篇文章</strong><br>此时会看到如下<br><img src="/images/2018-12-05-20-17-12.png" alt=""></p><p>如果上述配置均无误, 点击<strong>使用GitHub登录</strong>就会建立一个评论区(实际上是在你的Github博客仓库下开了一个<strong>Issue</strong>)</p><h1 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h1><p>如果你某一篇文章不想有评论功能, 你可以在文章的<code>font-matter</code>中加入 <code>comments: false</code></p><p><img src="/images/2018-12-05-21-19-05.png" alt=""></p><p>因为加入了评论功能, 在<code>标签</code>、<code>分类</code>页面都会有个评论区, 所以应到相应页面的<code>index.md</code>的<code>font-matter</code>中加入 <code>comments: false</code></p><p><strong>并修改站点目录下<code>scaffolds</code>的<code>page.md</code>模板</strong>, 因为创建<code>page</code>都会<strong>使用到该模板</strong>, 而页面不需要有评论区<br></p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">title:</span> <span class="string">&#123;&#123;</span> <span class="string">title</span> <span class="string">&#125;&#125;</span></span><br><span class="line"><span class="attr">date:</span> <span class="string">&#123;&#123;</span> <span class="string">date</span> <span class="string">&#125;&#125;</span></span><br><span class="line"><span class="attr">type:</span> </span><br><span class="line"><span class="attr">comments:</span> <span class="literal">false</span></span><br><span class="line"><span class="meta">---</span></span><br></pre></td></tr></table></figure><p></p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Fri Dec 14 2018 21:02:55 GMT+0800 (中国标准时间) --&gt;&lt;h1 id=&quot;Gitalk&quot;&gt;&lt;a href=&quot;#Gitalk&quot; class=&quot;headerlink&quot; title=&quot;Gitalk&quot;&gt;&lt;/a&gt;Gitalk&lt;/h1&gt;&lt;p&gt;&lt;code&gt;Gitalk&lt;/code&gt;: 一个基于 Github Issue 和 Preact 开发的评论插件&lt;br&gt;详情Demo可见:&lt;a href=&quot;https://gitalk.github.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://gitalk.github.io/&lt;/a&gt;&lt;/p&gt;&lt;h1 id=&quot;增加评论区&quot;&gt;&lt;a href=&quot;#增加评论区&quot; class=&quot;headerlink&quot; title=&quot;增加评论区&quot;&gt;&lt;/a&gt;增加评论区&lt;/h1&gt;&lt;h2 id=&quot;注册OAuth-Application&quot;&gt;&lt;a href=&quot;#注册OAuth-Application&quot; class=&quot;headerlink&quot; title=&quot;注册OAuth Application&quot;&gt;&lt;/a&gt;注册OAuth Application&lt;/h2&gt;
    
    </summary>
    
      <category term="Hexo" scheme="https://vonsdite.cn/categories/Hexo/"/>
    
      <category term="Next" scheme="https://vonsdite.cn/categories/Hexo/Next/"/>
    
    
      <category term="Hexo" scheme="https://vonsdite.cn/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title>Hexo Next主题的TOC设置成不是逐级展开</title>
    <link href="https://vonsdite.cn/posts/6c0dbfd2.html"/>
    <id>https://vonsdite.cn/posts/6c0dbfd2.html</id>
    <published>2018-12-05T07:44:11.000Z</published>
    <updated>2018-12-05T08:07:49.029Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Fri Dec 14 2018 21:02:55 GMT+0800 (中国标准时间) --><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>使用<code>Hexo</code> + <code>Next</code> 主题编写文章时, <code>Next</code>主题会自动给文章生成<code>TOC</code>目录, 如图<br><img src="/images/2018-12-05-15-57-19.png" alt=""></p><a id="more"></a><p><img src="/images/2018-12-05-15-57-37.png" alt=""></p><p>只有当你下拉浏览到相应的<strong>目录级</strong>时, <code>TOC</code>目录才会展开, 这<strong>不方便</strong>别人<strong>一次性</strong>看到所有的目录</p><p><br></p><p>如果想最开始打开文章一次性就把<code>TOC</code>目录全部展开, 可进行如下的修改<br>打开站点目录下的<code>themes/next/source/css/_common/components/sidebar/sidebar-toc.styl</code></p><p>找到如下的代码<br></p><figure class="highlight styl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.post-toc</span> <span class="selector-class">.nav</span> <span class="selector-class">.nav-child</span> &#123; <span class="attribute">display</span>: none; &#125;</span><br></pre></td></tr></table></figure><p></p><p>修改为<br></p><figure class="highlight styl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.post-toc</span> <span class="selector-class">.nav</span> <span class="selector-class">.nav-child</span> &#123; <span class="attribute">display</span>: block; &#125;</span><br></pre></td></tr></table></figure><p></p><p>这样既可完成想要的功能</p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Fri Dec 14 2018 21:02:55 GMT+0800 (中国标准时间) --&gt;&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;使用&lt;code&gt;Hexo&lt;/code&gt; + &lt;code&gt;Next&lt;/code&gt; 主题编写文章时, &lt;code&gt;Next&lt;/code&gt;主题会自动给文章生成&lt;code&gt;TOC&lt;/code&gt;目录, 如图&lt;br&gt;&lt;img src=&quot;/images/2018-12-05-15-57-19.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Hexo" scheme="https://vonsdite.cn/categories/Hexo/"/>
    
      <category term="Next" scheme="https://vonsdite.cn/categories/Hexo/Next/"/>
    
    
      <category term="Hexo" scheme="https://vonsdite.cn/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title>python 代码运行计时函数比较</title>
    <link href="https://vonsdite.cn/posts/605d5daa.html"/>
    <id>https://vonsdite.cn/posts/605d5daa.html</id>
    <published>2018-12-04T10:23:44.000Z</published>
    <updated>2018-12-04T17:23:47.653Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Fri Dec 14 2018 21:02:56 GMT+0800 (中国标准时间) --><h1 id="计时函数"><a href="#计时函数" class="headerlink" title="计时函数"></a>计时函数</h1><p>计算python某个程序或者代码块的<strong>运行时间</strong>, 可以使用如下方法</p><table><thead><tr><th>方法</th><th>说明</th></tr></thead><tbody><tr><td><a href="/posts/605d5daa.html#1-datetime-datetime-now">datetime.datetime.now()</a></td><td>该方法包含了其他程序使用CPU的时间, <strong>不推荐</strong></td></tr><tr><td><a href="/posts/605d5daa.html#2-time-time">time.time()</a></td><td><code>Unix</code>系统下, 建议使用</td></tr><tr><td><a href="/posts/605d5daa.html#3-time-clock">time.clock()</a></td><td><code>Windows</code>系统下, 建议使用</td></tr><tr><td><a href="/posts/605d5daa.html#4-timeit-default-timer">timeit.default_timer()</a></td><td>跨平台使用, <strong>最推荐</strong><img src="/images/recommend.png" alt=""></td></tr></tbody></table><a id="more"></a><p><img src="/images/2018-12-05-01-08-07.png" alt=""></p><blockquote><p><code>time.clock()</code>返回的是处理器时间, 而因为<strong>Unix</strong>中<strong>jiffy</strong>的缘故, 所以精度不会太高<br>究竟是使用<code>time.clock()</code>, 还是使用<code>time.time()</code>, 由平台来决定<br>总概来讲, 在<strong>Unix系统</strong>中, 建议使用<code>time.time()</code>,<br>在<strong>Windows系统</strong>中, 建议使用<code>time.clock()</code>.<br>要实现跨平台的精度性, 使用<code>timeit</code>来代替<code>time</code>.</p></blockquote><h2 id="1-datetime-datetime-now"><a href="#1-datetime-datetime-now" class="headerlink" title="1.datetime.datetime.now"></a>1.datetime.datetime.now</h2><p>该方法包含了其他程序使用CPU的时间<br><strong>不推荐</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test_datetime</span><span class="params">()</span>:</span></span><br><span class="line">    start = datetime.datetime.now()</span><br><span class="line">    time.sleep(<span class="number">100</span>)</span><br><span class="line">    end = datetime.datetime.now()</span><br><span class="line">    print(<span class="string">"test datetime():"</span>, <span class="string">"%fms"</span> % (float((end - start).microseconds) / <span class="number">1000</span>))</span><br></pre></td></tr></table></figure><h2 id="2-time-time"><a href="#2-time-time" class="headerlink" title="2.time.time"></a>2.time.time</h2><p>该方法包含了其他程序使用CPU的时间, 返回值是浮点数<br><strong>Unix系统下推荐</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test_time</span><span class="params">()</span>:</span></span><br><span class="line">    start = time.time()</span><br><span class="line">    time.sleep(<span class="number">100</span>)</span><br><span class="line">    end = time.time()</span><br><span class="line">    print(<span class="string">"test time():"</span>, <span class="string">"%fms"</span> % ((end - start) * <span class="number">1000</span>))</span><br></pre></td></tr></table></figure><h2 id="3-time-clock"><a href="#3-time-clock" class="headerlink" title="3.time.clock"></a>3.time.clock</h2><p>只计算程序运行CPU的时间<br><strong>Windows系统下推荐</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test_clock</span><span class="params">()</span>:</span></span><br><span class="line">    start = time.clock()</span><br><span class="line">    time.sleep(<span class="number">100</span>)</span><br><span class="line">    end = time.clock()</span><br><span class="line">    print(<span class="string">"test clock():"</span>, <span class="string">"%fms"</span> % ((end - start) * <span class="number">1000</span>))</span><br></pre></td></tr></table></figure><h2 id="4-timeit-default-timer"><a href="#4-timeit-default-timer" class="headerlink" title="4.timeit.default_timer"></a>4.timeit.default_timer</h2><p><strong>实现跨平台</strong>的精度性</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test_timeit</span><span class="params">()</span>:</span></span><br><span class="line">    start = timeit.default_timer()</span><br><span class="line">    time.sleep(<span class="number">100</span>)</span><br><span class="line">    end = timeit.default_timer()</span><br><span class="line">    print(<span class="string">"test timeit():"</span>, <span class="string">"%fms"</span> % ((end - start) * <span class="number">1000</span>))</span><br></pre></td></tr></table></figure><h2 id="测试代码"><a href="#测试代码" class="headerlink" title="测试代码"></a>测试代码</h2><p>结果如图:<br><img src="/images/2018-12-04-21-09-26.png" alt=""></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> timeit</span><br><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line"></span><br><span class="line">SLEEP_TIME = <span class="number">0.001</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test_datetime</span><span class="params">()</span>:</span></span><br><span class="line">    start = datetime.datetime.now()</span><br><span class="line">    time.sleep(SLEEP_TIME)</span><br><span class="line">    end = datetime.datetime.now()</span><br><span class="line">    print(<span class="string">"test datetime():"</span>, <span class="string">"%fms"</span> % (float((end - start).microseconds) / <span class="number">1000</span>))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test_time</span><span class="params">()</span>:</span></span><br><span class="line">    start = time.time()</span><br><span class="line">    time.sleep(SLEEP_TIME)</span><br><span class="line">    end = time.time()</span><br><span class="line">    print(<span class="string">"test time():"</span>, <span class="string">"%fms"</span> % ((end - start) * <span class="number">1000</span>))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test_clock</span><span class="params">()</span>:</span></span><br><span class="line">    start = time.clock()</span><br><span class="line">    time.sleep(SLEEP_TIME)</span><br><span class="line">    end = time.clock()</span><br><span class="line">    print(<span class="string">"test clock():"</span>, <span class="string">"%fms"</span> % ((end - start) * <span class="number">1000</span>))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test_timeit</span><span class="params">()</span>:</span></span><br><span class="line">    start = timeit.default_timer()</span><br><span class="line">    time.sleep(SLEEP_TIME)</span><br><span class="line">    end = timeit.default_timer()</span><br><span class="line">    print(<span class="string">"test timeit():"</span>, <span class="string">"%fms"</span> % ((end - start) * <span class="number">1000</span>))</span><br><span class="line">    </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    test_datetime()</span><br><span class="line">    test_time()</span><br><span class="line">    test_clock()</span><br><span class="line">    test_timeit()</span><br></pre></td></tr></table></figure><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Fri Dec 14 2018 21:02:56 GMT+0800 (中国标准时间) --&gt;&lt;h1 id=&quot;计时函数&quot;&gt;&lt;a href=&quot;#计时函数&quot; class=&quot;headerlink&quot; title=&quot;计时函数&quot;&gt;&lt;/a&gt;计时函数&lt;/h1&gt;&lt;p&gt;计算python某个程序或者代码块的&lt;strong&gt;运行时间&lt;/strong&gt;, 可以使用如下方法&lt;/p&gt;&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;方法&lt;/th&gt;&lt;th&gt;说明&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;&lt;a href=&quot;/posts/605d5daa.html#1-datetime-datetime-now&quot;&gt;datetime.datetime.now()&lt;/a&gt;&lt;/td&gt;&lt;td&gt;该方法包含了其他程序使用CPU的时间, &lt;strong&gt;不推荐&lt;/strong&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;a href=&quot;/posts/605d5daa.html#2-time-time&quot;&gt;time.time()&lt;/a&gt;&lt;/td&gt;&lt;td&gt;&lt;code&gt;Unix&lt;/code&gt;系统下, 建议使用&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;a href=&quot;/posts/605d5daa.html#3-time-clock&quot;&gt;time.clock()&lt;/a&gt;&lt;/td&gt;&lt;td&gt;&lt;code&gt;Windows&lt;/code&gt;系统下, 建议使用&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;a href=&quot;/posts/605d5daa.html#4-timeit-default-timer&quot;&gt;timeit.default_timer()&lt;/a&gt;&lt;/td&gt;&lt;td&gt;跨平台使用, &lt;strong&gt;最推荐&lt;/strong&gt;&lt;img src=&quot;/images/recommend.png&quot; alt=&quot;&quot;&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
    
    </summary>
    
      <category term="Python" scheme="https://vonsdite.cn/categories/Python/"/>
    
    
      <category term="Python" scheme="https://vonsdite.cn/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>ATL MFC的CThreadPool</title>
    <link href="https://vonsdite.cn/posts/2182c76b.html"/>
    <id>https://vonsdite.cn/posts/2182c76b.html</id>
    <published>2018-12-03T07:14:12.000Z</published>
    <updated>2018-12-03T07:21:32.975Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Fri Dec 14 2018 21:02:55 GMT+0800 (中国标准时间) --><h1 id="CThreadPool"><a href="#CThreadPool" class="headerlink" title="CThreadPool"></a>CThreadPool</h1><p>MFC提供了一个叫做<code>CThreadPool</code> 的类，这是一个模板类，基于完成端口开发的一个线程池。</p><h2 id="以下是CThreadPool的使用介绍"><a href="#以下是CThreadPool的使用介绍" class="headerlink" title="以下是CThreadPool的使用介绍"></a>以下是CThreadPool的使用介绍</h2><p>主要的伪代码如下<br><strong>线程池要操作的任务通过实现CTaskBase的DoTask函数来完成</strong></p><a id="more"></a><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"CWorker.h"</span> <span class="comment">// 包含头文件</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> THREADPOOL_SIZE 5</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 实例化线程池对象，CWorker是自己定义的Worker类， MSDN中定义了它的原型，它必须包含下面</span></span><br><span class="line"><span class="comment">// 所列的几个函数Initialize,Execute,Terminate；具体Worker定义见下面代码</span></span><br><span class="line">CThreadPool&lt;CWorker&gt; threadPool; </span><br><span class="line"></span><br><span class="line">threadPool.Initialize(<span class="literal">NULL</span>, THREADPOOL_SIZE);<span class="comment">// 初始化线程池</span></span><br><span class="line">CTaskBase *pTask = <span class="literal">NULL</span>;</span><br><span class="line">pTask = <span class="keyword">new</span> CTask();<span class="comment">// 创建任务</span></span><br><span class="line">threadPool.QueueRequest((CParseWorker::RequestType) pTask); <span class="comment">// 执行线程池任务</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">CThreadPool 调用Initialize，调用此方法来初始化线程池。</span></span><br><span class="line"><span class="comment">HRESULT Initialize(</span></span><br><span class="line"><span class="comment">    void* pvWorkerParam = NULL,</span></span><br><span class="line"><span class="comment">    int nNumThreads = 0,</span></span><br><span class="line"><span class="comment">    DWORD dwStackSize = 0,</span></span><br><span class="line"><span class="comment">    HANDLE hCompletion = INVALID_HANDLE_VALUE) throw();</span></span><br><span class="line"><span class="comment">参数</span></span><br><span class="line"><span class="comment">pvWorkerParam</span></span><br><span class="line"><span class="comment">辅助参数传递给辅助线程对象Initialize， Execute，和Terminate方法。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">nNumThreads</span></span><br><span class="line"><span class="comment">请求的池中的线程数。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">如果nNumThreads是负数，其绝对值的数值将乘以中要获取的线程总数的计算机的处理器数。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">如果nNumThreads为零，ATLS_DEFAULT_THREADSPERPROC 将乘以中要获取的线程总数的计算机的处理器数。 </span></span><br><span class="line"><span class="comment">默认值为每个处理器的 2 个线程。 如有必要，可以包括 atlutil.h 之前定义此符号自己正整数值。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">dwStackSize</span></span><br><span class="line"><span class="comment">在池中每个线程堆栈大小。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">hCompletion</span></span><br><span class="line"><span class="comment">若要将与完成端口相关联的对象的句柄。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">返回值</span></span><br><span class="line"><span class="comment">返回成功，则为 S_OK 或失败时的错误 HRESULT。</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p><code>CWoker.h</code></p><details><summary>展开代码</summary><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> once</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;atlutil.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CTaskBase</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CTask</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CWorker</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">typedef</span> DWORD_PTR RequestType;</span><br><span class="line"></span><br><span class="line">    CWorker();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> BOOL <span class="title">Initialize</span><span class="params">(<span class="keyword">void</span> *pvParam)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">Terminate</span><span class="params">(<span class="keyword">void</span>* <span class="comment">/*pvParam*/</span>)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Execute</span><span class="params">(RequestType dw, <span class="keyword">void</span> *pvParam, OVERLAPPED* pOverlapped)</span> <span class="title">throw</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> BOOL <span class="title">GetWorkerData</span><span class="params">(DWORD <span class="comment">/*dwParam*/</span>, <span class="keyword">void</span> ** <span class="comment">/*ppvData*/</span>)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line">    DWORDm_dwExecs;</span><br><span class="line">    LONGm_lId;</span><br><span class="line">&#125;; <span class="comment">// CWorker</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CTaskBase</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">DoTask</span><span class="params">(<span class="keyword">void</span> *pvParam, OVERLAPPED *pOverlapped)</span></span>=<span class="number">0</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CTask</span> :</span> <span class="keyword">public</span> CTaskBase</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">DoTask</span><span class="params">(<span class="keyword">void</span> *pvParam, OVERLAPPED *pOverlapped)</span></span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><br><br></details><p><code>CWorker.cpp</code></p><details><summary>展开代码</summary><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"CWorker.h"</span></span></span><br><span class="line"></span><br><span class="line">LONG g_lCurrId = <span class="number">-1</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> CTask::DoTask(<span class="keyword">void</span> *pvParam, OVERLAPPED *pOverlapped)</span><br><span class="line">&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">CWorker::CWorker() : m_dwExecs( <span class="number">0</span> )</span><br><span class="line">&#123;</span><br><span class="line">    m_lId = InterlockedIncrement( &amp;g_lCurrId );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">BOOL CWorker::Initialize(<span class="keyword">void</span> *pvParam)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> TRUE;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> CWorker::Terminate(<span class="keyword">void</span>* <span class="comment">/*pvParam*/</span>)</span><br><span class="line">&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> CWorker::Execute(RequestType dw, <span class="keyword">void</span> *pvParam, OVERLAPPED* pOverlapped) <span class="keyword">throw</span>()</span><br><span class="line">&#123;</span><br><span class="line">    CTaskBase* pTask = (CTaskBase*)(DWORD_PTR)dw;</span><br><span class="line">    pTask-&gt;DoTask(pvParam, pOverlapped);</span><br><span class="line">    m_dwExecs++;</span><br><span class="line">    <span class="keyword">delete</span> pTask;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">BOOL CWorker::GetWorkerData(DWORD <span class="comment">/*dwParam*/</span>, <span class="keyword">void</span> ** <span class="comment">/*ppvData*/</span>)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> FALSE;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><br></details><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Fri Dec 14 2018 21:02:55 GMT+0800 (中国标准时间) --&gt;&lt;h1 id=&quot;CThreadPool&quot;&gt;&lt;a href=&quot;#CThreadPool&quot; class=&quot;headerlink&quot; title=&quot;CThreadPool&quot;&gt;&lt;/a&gt;CThreadPool&lt;/h1&gt;&lt;p&gt;MFC提供了一个叫做&lt;code&gt;CThreadPool&lt;/code&gt; 的类，这是一个模板类，基于完成端口开发的一个线程池。&lt;/p&gt;&lt;h2 id=&quot;以下是CThreadPool的使用介绍&quot;&gt;&lt;a href=&quot;#以下是CThreadPool的使用介绍&quot; class=&quot;headerlink&quot; title=&quot;以下是CThreadPool的使用介绍&quot;&gt;&lt;/a&gt;以下是CThreadPool的使用介绍&lt;/h2&gt;&lt;p&gt;主要的伪代码如下&lt;br&gt;&lt;strong&gt;线程池要操作的任务通过实现CTaskBase的DoTask函数来完成&lt;/strong&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="C/C++" scheme="https://vonsdite.cn/categories/C-C/"/>
    
      <category term="MFC" scheme="https://vonsdite.cn/categories/C-C/MFC/"/>
    
    
      <category term="C/C++" scheme="https://vonsdite.cn/tags/C-C/"/>
    
  </entry>
  
  <entry>
    <title>C/C++ 各种计时函数比较</title>
    <link href="https://vonsdite.cn/posts/18ab89cc.html"/>
    <id>https://vonsdite.cn/posts/18ab89cc.html</id>
    <published>2018-12-03T07:10:28.000Z</published>
    <updated>2018-12-04T06:53:02.956Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Fri Dec 14 2018 21:02:55 GMT+0800 (中国标准时间) --><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>目前有各种计时函数,</p><ol><li>一般的处理都是先调用计时函数, 记下当前时间<code>start</code></li><li>然后运行自己的代码</li><li>再调用计时函数, 记下处理后的时间<code>end</code></li><li>再<code>end</code>和<code>start</code>做差, 就可以得到程序的执行时间</li></ol><p>但是各种计时函数的<strong>精度不一样</strong>.</p><table><thead><tr><th>序号</th><th>函数</th><th>类型</th><th>精度级别</th><th>时间</th></tr></thead><tbody><tr><td>1</td><td><a href="/posts/18ab89cc.html#time">time</a></td><td>C系统调用</td><td>低</td><td>&lt;1s</td></tr><tr><td>2</td><td><a href="/posts/18ab89cc.html#clock">clcok</a> <img src="/images/recommend.png" alt=""><em>windows, linux均可用, 推荐</em></td><td>C系统调用</td><td>低</td><td>&lt;10ms</td></tr><tr><td>3</td><td><a href="/posts/18ab89cc.html#timeGetTime">timeGetTime</a></td><td>Windows API</td><td>中</td><td>&lt;1ms</td></tr><tr><td>4</td><td><a href="/posts/18ab89cc.html#QueryPerformanceCounter">QueryPerformanceCounter</a> <img src="/images/recommend.png" alt=""><em>windows下最好的方法</em></td><td>Windows API</td><td>高</td><td>&lt;0.1ms</td></tr><tr><td>5</td><td><a href="/posts/18ab89cc.html#GetTickCount">GetTickCount</a></td><td>Windows API</td><td>中</td><td>&lt;1ms</td></tr><tr><td>6</td><td><a href="/posts/18ab89cc.html#RDTSC">RDTSC</a> (实际不可用)</td><td>指令</td><td>高</td><td>&lt;0.1ms</td></tr><tr><td>7</td><td><a href="/posts/18ab89cc.html#gettimeofday">gettimeofday</a> <img src="/images/recommend.png" alt=""><em>linux下最好的方法</em></td><td>linux环境下C系统调用</td><td>高</td><td>&lt;0.1ms</td></tr></tbody></table><a id="more"></a><h1 id="time"><a href="#time" class="headerlink" title="time"></a>time</h1><p><code>time()</code>获取当前的系统时间, 返回的结果是一个<code>time_t</code>类型, 其值表示从”<code>CUT(Coordinated Universal Time)</code>时间1970年1月1日00:00:00(称为UNIX系统的Epoch时间)”到”当前时刻的<strong>秒数</strong>“.</p><p><strong>精度</strong>: 低, &lt;1s</p><p>调用Sleep(50), 让程序暂停50ms, 测得运行时间为 0ms, 表明精度的低<br><img src="/images/2018-12-04-11-41-53.png" alt=""></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;time.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SLEEP_TIME 50</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// test time()</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">TestTime</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">time_t</span> start, end;</span><br><span class="line">start = time(<span class="literal">NULL</span>);</span><br><span class="line">Sleep(<span class="number">50</span>);</span><br><span class="line">end = time(<span class="literal">NULL</span>);</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"Sleep("</span> &lt;&lt; SLEEP_TIME &lt;&lt; <span class="string">") :"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"Test time(): "</span> &lt;&lt; (end - start) * <span class="number">1000</span> &lt;&lt; <span class="string">"ms"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="clock"><a href="#clock" class="headerlink" title="clock"></a>clock</h1><p><code>clock()</code>函数返回从”开启这个程序进程”到”程序中调用<code>clock()</code>函数”时之间的<strong>CPU时钟计时单元(clock tick)数</strong>, 在MSDN中称之为<strong>挂钟时间(wal-clock)</strong><br>常量<code>CLOCKS_PER_SEC</code>, 它用来表示一秒钟会有多少个时钟计时单元</p><p><strong>精度</strong>: 低, &lt;10ms<br><img src="/images/2018-12-04-11-47-52.png" alt=""><br></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;time.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SLEEP_TIME 50</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// test clock()</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">TestClock</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">clock_t</span> start, end;</span><br><span class="line">start = clock();</span><br><span class="line">Sleep(<span class="number">50</span>);</span><br><span class="line">end = clock();</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"Sleep("</span> &lt;&lt; SLEEP_TIME &lt;&lt; <span class="string">") :"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; fixed  &lt;&lt; setprecision(<span class="number">17</span>) &lt;&lt; <span class="string">"Test clock(): "</span> &lt;&lt; ((<span class="keyword">double</span>)end - start) / CLOCKS_PER_SEC * <span class="number">1000</span> &lt;&lt; <span class="string">"ms"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><h1 id="timeGetTime"><a href="#timeGetTime" class="headerlink" title="timeGetTime"></a>timeGetTime</h1><p><code>timeGetTime()</code>函数以<strong>毫秒级</strong>的系统时间. 该时间为从系统开启算起所经过的时间, 是<code>windows api</code></p><p><strong>精度</strong>: 中, &lt;1ms<br><img src="/images/2018-12-04-11-53-59.png" alt=""><br></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;windows.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SLEEP_TIME 50</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> comment( lib,<span class="meta-string">"winmm.lib"</span> )</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// test timeGetTime()</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">TestTimeGetTime</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">DWORD start, end;</span><br><span class="line">start = timeGetTime();</span><br><span class="line">Sleep(<span class="number">50</span>);</span><br><span class="line">end = timeGetTime();</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"Sleep("</span> &lt;&lt; SLEEP_TIME &lt;&lt; <span class="string">") :"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; fixed &lt;&lt; setprecision(<span class="number">17</span>) &lt;&lt; <span class="string">"Test timeGetTime(): "</span> &lt;&lt; ((<span class="keyword">double</span>)end - start) / <span class="number">1000</span> * <span class="number">1000</span> &lt;&lt; <span class="string">"ms"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><h1 id="QueryPerformanceCounter"><a href="#QueryPerformanceCounter" class="headerlink" title="QueryPerformanceCounter"></a>QueryPerformanceCounter</h1><p><code>QueryPerformanceCounter()</code>这个函数返回高精确度性能计数器的值, 它可以以<strong>微秒</strong>为单位计时. 但是<code>QueryPerformanceCounter()</code>确切的精确计时的最小单位是与系统有关的, 所以, 必须要查询系统以得到<code>QueryPerformanceCounter()</code>返回的嘀哒声的频率. <code>QueryPerformanceFrequency()</code>提供了这个频率值, 返回每秒嘀哒声的个数.</p><p><strong>精度:</strong> 高, &lt;0.1ms<br><img src="/images/2018-12-04-14-07-14.png" alt=""><br></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;windows.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SLEEP_TIME 50</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// test QueryPerformanceCounter()</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">TestQueryPerformanceCounter</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">LARGE_INTEGER start, end, tc;</span><br><span class="line">QueryPerformanceFrequency(&amp;tc);</span><br><span class="line">QueryPerformanceCounter(&amp;start);</span><br><span class="line">Sleep(<span class="number">50</span>);</span><br><span class="line">QueryPerformanceCounter(&amp;end);</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"Sleep("</span> &lt;&lt; SLEEP_TIME &lt;&lt; <span class="string">") :"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; fixed &lt;&lt; setprecision(<span class="number">17</span>) &lt;&lt; <span class="string">"Test QueryPerformanceCounter(): "</span> &lt;&lt; ((<span class="keyword">double</span>)end.QuadPart - start.QuadPart) / tc.QuadPart * <span class="number">1000</span> &lt;&lt; <span class="string">"ms"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><h1 id="GetTickCount"><a href="#GetTickCount" class="headerlink" title="GetTickCount"></a>GetTickCount</h1><p><code>GetTickCount()</code>返回(retrieve)从操作系统启动到现在所经过(elapsed)的<strong>毫秒数</strong>, 它的返回值是DWORD</p><p><strong>精度:</strong> 中, &lt;1ms<br><img src="/images/2018-12-04-14-11-43.png" alt=""><br></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;windows.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SLEEP_TIME 50</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// test GetTickCount()</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">TestGetTickCount</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">DWORD start, end;</span><br><span class="line">start = GetTickCount();</span><br><span class="line">Sleep(<span class="number">50</span>);</span><br><span class="line">end = GetTickCount();</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"Sleep("</span> &lt;&lt; SLEEP_TIME &lt;&lt; <span class="string">") :"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; fixed &lt;&lt; setprecision(<span class="number">17</span>) &lt;&lt; <span class="string">"Test GetTickCount(): "</span> &lt;&lt; ((<span class="keyword">double</span>)end - start) / <span class="number">1000</span> * <span class="number">1000</span> &lt;&lt; <span class="string">"ms"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><h1 id="RDTSC"><a href="#RDTSC" class="headerlink" title="RDTSC"></a>RDTSC</h1><p><code>RDTSC</code>指令, 在<strong>Intel Pentium</strong>以上级别的CPU中, 有一个称为”时间戳(Time Stamp)”的部件, 它以64位无符号整型数的格式, 记录了自CPU上电以来所经过的时钟周期数。由于目前的<strong>CPU主频都非常高</strong>, 因此这个部件可以达到<strong>纳秒级</strong>的计时精度。这个精确性是上述几种方法所无法比拟的. 在Pentium以上的CPU中, 提供了一条机器指令RDTSC(Read Time Stamp Counter)来读取这个时间戳的数字, 并将其保存在EDX:EAX寄存器对中. 由于EDX:EAX寄存器对恰好是Win32平台下C++语言保存函数返回值的寄存器, 所以我们可以把这条指令看成是一个普通的函数调用, 因为RDTSC不被C++的内嵌汇编器直接支持, 所以我们要用_emit伪指令直接嵌入该指令的机器码形式0X0F、0X31</p><h2 id="然而真相"><a href="#然而真相" class="headerlink" title="然而真相"></a>然而真相</h2><p>多核时代<strong>不宜再用</strong> x86 的 RDTSC 指令测试指令周期和时间</p><ol><li><strong>不能保证</strong>同一块主板上每个核的 TSC 是同步的；</li><li>CPU 的<strong>时钟频率可能变化</strong>, 例如笔记本电脑的节能功能；</li><li><strong>乱序执行</strong>导致 RDTSC 测得的周期数不准, 这个问题从 Pentium Pro 时代就存在。</li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SLEEP_TIME 50</span></span><br><span class="line"><span class="comment">// test RDTSC</span></span><br><span class="line"><span class="comment">// 多核时代不宜再用 x86 的 RDTSC 指令测试指令周期和时间</span></span><br><span class="line"><span class="comment">// 1. 不能保证同一块主板上每个核的 TSC 是同步的；</span></span><br><span class="line"><span class="comment">// 2. CPU 的时钟频率可能变化, 例如笔记本电脑的节能功能；</span></span><br><span class="line"><span class="comment">// 3. 乱序执行导致 RDTSC 测得的周期数不准, 这个问题从 Pentium Pro 时代就存在。</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">inline</span> <span class="keyword">unsigned</span> __<span class="function">int64 <span class="title">GetCycleCount</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">__asm</span><br><span class="line">&#123;</span><br><span class="line">_emit <span class="number">0x3F</span>;</span><br><span class="line">_emit <span class="number">0x31</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 我的CPU频率</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FREQUENCY (2.6*(1&lt;&lt;30))  </span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">TestRDTSC</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">unsigned</span> __int64 start, end;</span><br><span class="line">start = GetCycleCount();</span><br><span class="line">Sleep(<span class="number">50</span>);</span><br><span class="line">end = GetCycleCount();</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"Sleep("</span> &lt;&lt; SLEEP_TIME &lt;&lt; <span class="string">") :"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; fixed &lt;&lt; setprecision(<span class="number">17</span>) &lt;&lt; <span class="string">"Test RDTSC(): "</span> &lt;&lt; ((<span class="keyword">double</span>)end - start) / FREQUENCY * <span class="number">1000</span> &lt;&lt; <span class="string">"ms"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="gettimeofday"><a href="#gettimeofday" class="headerlink" title="gettimeofday"></a>gettimeofday</h1><p><code>gettimeofday()</code> linux环境下的计时函数, <code>int gettimeofday(struct timeval* tv , struct timezone* tz)</code>, <code>gettimeofday()</code>会把目前的时间有<code>tv</code>所指的结构返回, 当地时区的信息则放到<code>tz</code>所指的结构中.</p><p><strong>精度:</strong> 高, &lt;0.1ms</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SLEEP_TIME 50</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// test gettimeofday()</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// timeval结构定义为:</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">timeval</span> &#123;</span></span><br><span class="line"><span class="keyword">long</span> tv_sec;  <span class="comment">// 秒</span></span><br><span class="line"><span class="keyword">long</span> tv_usec; <span class="comment">// 微秒</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//timezone 结构定义为:</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">timezone</span> &#123;</span></span><br><span class="line"><span class="keyword">int</span> tz_minuteswest; <span class="comment">// 和Greenwich 时间差了多少分钟</span></span><br><span class="line"><span class="keyword">int</span> tz_dsttime;<span class="comment">// 日光节约时间的状态</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">TestGetTimeOfDay</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">timeval start, end;</span><br><span class="line"><span class="keyword">double</span> timeuse;</span><br><span class="line">gettimeofday(&amp;start, <span class="literal">NULL</span>);</span><br><span class="line">    Sleep(<span class="number">50</span>);</span><br><span class="line">gettimefoday(&amp;end, <span class="literal">NULL</span>);</span><br><span class="line">timeuse = end.tv_sec - start.tv_sec + (end.tv_usec - start.tv_usec) / <span class="number">50000.0</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"Sleep("</span> &lt;&lt; SLEEP_TIME &lt;&lt; <span class="string">") :"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; fixed &lt;&lt; setprecision(<span class="number">17</span>) &lt;&lt; <span class="string">"Test gettimeofday(): "</span> &lt;&lt; timeuse * <span class="number">1000</span> &lt;&lt; <span class="string">"ms"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Fri Dec 14 2018 21:02:55 GMT+0800 (中国标准时间) --&gt;&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;目前有各种计时函数,&lt;/p&gt;&lt;ol&gt;&lt;li&gt;一般的处理都是先调用计时函数, 记下当前时间&lt;code&gt;start&lt;/code&gt;&lt;/li&gt;&lt;li&gt;然后运行自己的代码&lt;/li&gt;&lt;li&gt;再调用计时函数, 记下处理后的时间&lt;code&gt;end&lt;/code&gt;&lt;/li&gt;&lt;li&gt;再&lt;code&gt;end&lt;/code&gt;和&lt;code&gt;start&lt;/code&gt;做差, 就可以得到程序的执行时间&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;但是各种计时函数的&lt;strong&gt;精度不一样&lt;/strong&gt;.&lt;/p&gt;&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;序号&lt;/th&gt;&lt;th&gt;函数&lt;/th&gt;&lt;th&gt;类型&lt;/th&gt;&lt;th&gt;精度级别&lt;/th&gt;&lt;th&gt;时间&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;1&lt;/td&gt;&lt;td&gt;&lt;a href=&quot;/posts/18ab89cc.html#time&quot;&gt;time&lt;/a&gt;&lt;/td&gt;&lt;td&gt;C系统调用&lt;/td&gt;&lt;td&gt;低&lt;/td&gt;&lt;td&gt;&amp;lt;1s&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;2&lt;/td&gt;&lt;td&gt;&lt;a href=&quot;/posts/18ab89cc.html#clock&quot;&gt;clcok&lt;/a&gt; &lt;img src=&quot;/images/recommend.png&quot; alt=&quot;&quot;&gt;&lt;em&gt;windows, linux均可用, 推荐&lt;/em&gt;&lt;/td&gt;&lt;td&gt;C系统调用&lt;/td&gt;&lt;td&gt;低&lt;/td&gt;&lt;td&gt;&amp;lt;10ms&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;3&lt;/td&gt;&lt;td&gt;&lt;a href=&quot;/posts/18ab89cc.html#timeGetTime&quot;&gt;timeGetTime&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Windows API&lt;/td&gt;&lt;td&gt;中&lt;/td&gt;&lt;td&gt;&amp;lt;1ms&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;4&lt;/td&gt;&lt;td&gt;&lt;a href=&quot;/posts/18ab89cc.html#QueryPerformanceCounter&quot;&gt;QueryPerformanceCounter&lt;/a&gt; &lt;img src=&quot;/images/recommend.png&quot; alt=&quot;&quot;&gt;&lt;em&gt;windows下最好的方法&lt;/em&gt;&lt;/td&gt;&lt;td&gt;Windows API&lt;/td&gt;&lt;td&gt;高&lt;/td&gt;&lt;td&gt;&amp;lt;0.1ms&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;5&lt;/td&gt;&lt;td&gt;&lt;a href=&quot;/posts/18ab89cc.html#GetTickCount&quot;&gt;GetTickCount&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Windows API&lt;/td&gt;&lt;td&gt;中&lt;/td&gt;&lt;td&gt;&amp;lt;1ms&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;6&lt;/td&gt;&lt;td&gt;&lt;a href=&quot;/posts/18ab89cc.html#RDTSC&quot;&gt;RDTSC&lt;/a&gt; (实际不可用)&lt;/td&gt;&lt;td&gt;指令&lt;/td&gt;&lt;td&gt;高&lt;/td&gt;&lt;td&gt;&amp;lt;0.1ms&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;7&lt;/td&gt;&lt;td&gt;&lt;a href=&quot;/posts/18ab89cc.html#gettimeofday&quot;&gt;gettimeofday&lt;/a&gt; &lt;img src=&quot;/images/recommend.png&quot; alt=&quot;&quot;&gt;&lt;em&gt;linux下最好的方法&lt;/em&gt;&lt;/td&gt;&lt;td&gt;linux环境下C系统调用&lt;/td&gt;&lt;td&gt;高&lt;/td&gt;&lt;td&gt;&amp;lt;0.1ms&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
    
    </summary>
    
      <category term="C/C++" scheme="https://vonsdite.cn/categories/C-C/"/>
    
    
      <category term="C/C++" scheme="https://vonsdite.cn/tags/C-C/"/>
    
  </entry>
  
  <entry>
    <title>windows计算目录大小 递归和线程池两种实现</title>
    <link href="https://vonsdite.cn/posts/62aadf3b.html"/>
    <id>https://vonsdite.cn/posts/62aadf3b.html</id>
    <published>2018-12-03T06:36:08.000Z</published>
    <updated>2018-12-03T07:25:25.978Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Fri Dec 14 2018 21:02:56 GMT+0800 (中国标准时间) --><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>windows下文件夹目录大小没有直接获取的方法，一般直接使用<strong>递归</strong>的方式来计算，或者使用<strong>多线程</strong>提高并发度计算。</p><p>以下举的例子是<strong>计算目标目录大小以及目标目录下所有子目录大小</strong>的例子, 不是计算<strong>单一目录</strong>大小的例子</p><p><code>ThreadPool.h</code>的实现来源于: <a href="https://github.com/log4cplus/Threadpool" target="_blank" rel="noopener">https://github.com/log4cplus/Threadpool</a></p><a id="more"></a><h1 id="效果比较"><a href="#效果比较" class="headerlink" title="效果比较"></a>效果比较</h1><p><strong>PS:</strong> 输出的上部分是递归方式, 下部分是线程池方式</p><p>线程池的池大小为1时, 耗时略多于普通递归(因为线程的一些额外开销)<br><img src="/images/2018-12-03-14-58-18.png" alt=""></p><p>池的大小适当增大, 可以有效的提高效率(但池过于大, 也会造成效率降低)<br><img src="/images/2018-12-03-14-58-27.png" alt=""><img src="/images/2018-12-03-15-01-24.png" alt=""><img src="/images/2018-12-03-15-01-30.png" alt=""><img src="/images/2018-12-03-15-01-36.png" alt=""><img src="/images/2018-12-03-15-01-42.png" alt=""></p><h1 id="实现的代码"><a href="#实现的代码" class="headerlink" title="实现的代码"></a>实现的代码</h1><p><code>ThreadPool.h</code></p><details><summary>展开代码</summary><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// -*- C++ -*-</span></span><br><span class="line"><span class="comment">// Copyright (c) 2012-2015 Jakob Progsch</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// This software is provided 'as-is', without any express or implied</span></span><br><span class="line"><span class="comment">// warranty. In no event will the authors be held liable for any damages</span></span><br><span class="line"><span class="comment">// arising from the use of this software.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Permission is granted to anyone to use this software for any purpose,</span></span><br><span class="line"><span class="comment">// including commercial applications, and to alter it and redistribute it</span></span><br><span class="line"><span class="comment">// freely, subject to the following restrictions:</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//    1. The origin of this software must not be misrepresented; you must not</span></span><br><span class="line"><span class="comment">//    claim that you wrote the original software. If you use this software</span></span><br><span class="line"><span class="comment">//    in a product, an acknowledgment in the product documentation would be</span></span><br><span class="line"><span class="comment">//    appreciated but is not required.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//    2. Altered source versions must be plainly marked as such, and must not be</span></span><br><span class="line"><span class="comment">//    misrepresented as being the original software.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//    3. This notice may not be removed or altered from any source</span></span><br><span class="line"><span class="comment">//    distribution.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Modified for log4cplus, copyright (c) 2014-2015 Václav Zeman.</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> THREAD_POOL_H_7ea1ee6b_4f17_4c09_b76b_3d44e102400c</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> THREAD_POOL_H_7ea1ee6b_4f17_4c09_b76b_3d44e102400c</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;memory&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;thread&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;mutex&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;condition_variable&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;future&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;atomic&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;functional&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdexcept&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cassert&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ThreadPool</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">explicit</span> <span class="title">ThreadPool</span><span class="params">(<span class="built_in">std</span>::<span class="keyword">size_t</span> threads</span></span></span><br><span class="line"><span class="function"><span class="params">= (<span class="built_in">std</span>::max)(<span class="number">2u</span>, <span class="built_in">std</span>::thread::hardware_concurrency()))</span></span>;</span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">F</span>, <span class="title">class</span>... <span class="title">Args</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">auto</span> <span class="title">enqueue</span>(<span class="title">F</span>&amp;&amp; <span class="title">f</span>, <span class="title">Args</span>&amp;&amp;... <span class="title">args</span>)</span></span><br><span class="line"><span class="class">-&gt;<span class="title">std</span>:</span>:future&lt;<span class="keyword">typename</span> <span class="built_in">std</span>::result_of&lt;F(Args...)&gt;::type&gt;;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">wait_until_empty</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">wait_until_nothing_in_flight</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">set_queue_size_limit</span><span class="params">(<span class="built_in">std</span>::<span class="keyword">size_t</span> limit)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">set_pool_size</span><span class="params">(<span class="built_in">std</span>::<span class="keyword">size_t</span> limit)</span></span>;</span><br><span class="line">~ThreadPool();</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">emplace_back_worker</span><span class="params">(<span class="built_in">std</span>::<span class="keyword">size_t</span> worker_number)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// need to keep track of threads so we can join them</span></span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">vector</span>&lt; <span class="built_in">std</span>::thread &gt; workers;</span><br><span class="line"><span class="comment">// target pool size</span></span><br><span class="line"><span class="built_in">std</span>::<span class="keyword">size_t</span> pool_size;</span><br><span class="line"><span class="comment">// the task queue</span></span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">queue</span>&lt; <span class="built_in">std</span>::function&lt;<span class="keyword">void</span>()&gt; &gt; tasks;</span><br><span class="line"><span class="comment">// queue length limit</span></span><br><span class="line"><span class="built_in">std</span>::<span class="keyword">size_t</span> max_queue_size = <span class="number">100000</span>;</span><br><span class="line"><span class="comment">// stop signal</span></span><br><span class="line"><span class="keyword">bool</span> stop = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// synchronization</span></span><br><span class="line"><span class="built_in">std</span>::mutex queue_mutex;</span><br><span class="line"><span class="built_in">std</span>::condition_variable condition_producers;</span><br><span class="line"><span class="built_in">std</span>::condition_variable condition_consumers;</span><br><span class="line"></span><br><span class="line"><span class="built_in">std</span>::mutex in_flight_mutex;</span><br><span class="line"><span class="built_in">std</span>::condition_variable in_flight_condition;</span><br><span class="line"><span class="built_in">std</span>::atomic&lt;<span class="built_in">std</span>::<span class="keyword">size_t</span>&gt; in_flight;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">handle_in_flight_decrement</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">ThreadPool &amp; tp;</span><br><span class="line"></span><br><span class="line">handle_in_flight_decrement(ThreadPool &amp; tp_)</span><br><span class="line">: tp(tp_)</span><br><span class="line">&#123; &#125;</span><br><span class="line"></span><br><span class="line">~handle_in_flight_decrement()</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">std</span>::<span class="keyword">size_t</span> prev</span><br><span class="line">= <span class="built_in">std</span>::atomic_fetch_sub_explicit(&amp;tp.in_flight,</span><br><span class="line"><span class="built_in">std</span>::<span class="keyword">size_t</span>(<span class="number">1</span>),</span><br><span class="line"><span class="built_in">std</span>::memory_order_acq_rel);</span><br><span class="line"><span class="keyword">if</span> (prev == <span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">std</span>::unique_lock&lt;<span class="built_in">std</span>::mutex&gt; guard(tp.in_flight_mutex);</span><br><span class="line">tp.in_flight_condition.notify_all();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// the constructor just launches some amount of workers</span></span><br><span class="line"><span class="keyword">inline</span> ThreadPool::ThreadPool(<span class="built_in">std</span>::<span class="keyword">size_t</span> threads)</span><br><span class="line">: pool_size(threads)</span><br><span class="line">, in_flight(<span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="built_in">std</span>::<span class="keyword">size_t</span> i = <span class="number">0</span>; i != threads; ++i)</span><br><span class="line">emplace_back_worker(i);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// add new work item to the pool</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">F</span>, <span class="title">class</span>... <span class="title">Args</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">auto</span> <span class="title">ThreadPool</span>:</span>:enqueue(F&amp;&amp; f, Args&amp;&amp;... args)</span><br><span class="line">-&gt; <span class="built_in">std</span>::future&lt;<span class="keyword">typename</span> <span class="built_in">std</span>::result_of&lt;F(Args...)&gt;::type&gt;</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">using</span> return_type = <span class="keyword">typename</span> <span class="built_in">std</span>::result_of&lt;F(Args...)&gt;::type;</span><br><span class="line"></span><br><span class="line"><span class="keyword">auto</span> task = <span class="built_in">std</span>::make_shared&lt; <span class="built_in">std</span>::packaged_task&lt;return_type()&gt; &gt;(</span><br><span class="line"><span class="built_in">std</span>::bind(<span class="built_in">std</span>::forward&lt;F&gt;(f), <span class="built_in">std</span>::forward&lt;Args&gt;(args)...)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="built_in">std</span>::future&lt;return_type&gt; res = task-&gt;get_future();</span><br><span class="line"></span><br><span class="line"><span class="built_in">std</span>::unique_lock&lt;<span class="built_in">std</span>::mutex&gt; lock(queue_mutex);</span><br><span class="line"><span class="keyword">if</span> (tasks.size() &gt;= max_queue_size)</span><br><span class="line"><span class="comment">// wait for the queue to empty or be stopped</span></span><br><span class="line">condition_producers.wait(lock,</span><br><span class="line">[<span class="keyword">this</span>]</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> tasks.size() &lt; max_queue_size</span><br><span class="line">|| stop;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// don't allow enqueueing after stopping the pool</span></span><br><span class="line"><span class="keyword">if</span> (stop)</span><br><span class="line"><span class="keyword">throw</span> <span class="built_in">std</span>::runtime_error(<span class="string">"enqueue on stopped ThreadPool"</span>);</span><br><span class="line"></span><br><span class="line">tasks.emplace([task]() &#123; (*task)(); &#125;);</span><br><span class="line"><span class="built_in">std</span>::atomic_fetch_add_explicit(&amp;in_flight,</span><br><span class="line"><span class="built_in">std</span>::<span class="keyword">size_t</span>(<span class="number">1</span>),</span><br><span class="line"><span class="built_in">std</span>::memory_order_relaxed);</span><br><span class="line">condition_consumers.notify_one();</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// the destructor joins all threads</span></span><br><span class="line"><span class="keyword">inline</span> ThreadPool::~ThreadPool()</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">std</span>::unique_lock&lt;<span class="built_in">std</span>::mutex&gt; lock(queue_mutex);</span><br><span class="line">stop = <span class="literal">true</span>;</span><br><span class="line">condition_consumers.notify_all();</span><br><span class="line">condition_producers.notify_all();</span><br><span class="line">pool_size = <span class="number">0</span>;</span><br><span class="line">condition_consumers.wait(lock, [<span class="keyword">this</span>] &#123; <span class="keyword">return</span> <span class="keyword">this</span>-&gt;workers.empty(); &#125;);</span><br><span class="line">assert(in_flight == <span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">inline</span> <span class="keyword">void</span> ThreadPool::wait_until_empty()</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">std</span>::unique_lock&lt;<span class="built_in">std</span>::mutex&gt; lock(<span class="keyword">this</span>-&gt;queue_mutex);</span><br><span class="line"><span class="keyword">this</span>-&gt;condition_producers.wait(lock,</span><br><span class="line">[<span class="keyword">this</span>] &#123; <span class="keyword">return</span> <span class="keyword">this</span>-&gt;tasks.empty(); &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">inline</span> <span class="keyword">void</span> ThreadPool::wait_until_nothing_in_flight()</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">std</span>::unique_lock&lt;<span class="built_in">std</span>::mutex&gt; lock(<span class="keyword">this</span>-&gt;in_flight_mutex);</span><br><span class="line"><span class="keyword">this</span>-&gt;in_flight_condition.wait(lock,</span><br><span class="line">[<span class="keyword">this</span>] &#123; <span class="keyword">return</span> <span class="keyword">this</span>-&gt;in_flight == <span class="number">0</span>; &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">inline</span> <span class="keyword">void</span> ThreadPool::set_queue_size_limit(<span class="built_in">std</span>::<span class="keyword">size_t</span> limit)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">std</span>::unique_lock&lt;<span class="built_in">std</span>::mutex&gt; lock(<span class="keyword">this</span>-&gt;queue_mutex);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (stop)</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">std</span>::<span class="keyword">size_t</span> <span class="keyword">const</span> old_limit = max_queue_size;</span><br><span class="line">max_queue_size = (<span class="built_in">std</span>::max)(limit, <span class="built_in">std</span>::<span class="keyword">size_t</span>(<span class="number">1</span>));</span><br><span class="line"><span class="keyword">if</span> (old_limit &lt; max_queue_size)</span><br><span class="line">condition_producers.notify_all();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">inline</span> <span class="keyword">void</span> ThreadPool::set_pool_size(<span class="built_in">std</span>::<span class="keyword">size_t</span> limit)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (limit &lt; <span class="number">1</span>)</span><br><span class="line">limit = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">std</span>::unique_lock&lt;<span class="built_in">std</span>::mutex&gt; lock(<span class="keyword">this</span>-&gt;queue_mutex);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (stop)</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">pool_size = limit;</span><br><span class="line"><span class="built_in">std</span>::<span class="keyword">size_t</span> <span class="keyword">const</span> old_size = <span class="keyword">this</span>-&gt;workers.size();</span><br><span class="line"><span class="keyword">if</span> (pool_size &gt; old_size)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">// create new worker threads</span></span><br><span class="line"><span class="keyword">for</span> (<span class="built_in">std</span>::<span class="keyword">size_t</span> i = old_size; i != pool_size; ++i)</span><br><span class="line">emplace_back_worker(i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (pool_size &lt; old_size)</span><br><span class="line"><span class="comment">// notify all worker threads to start downsizing</span></span><br><span class="line"><span class="keyword">this</span>-&gt;condition_consumers.notify_all();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">inline</span> <span class="keyword">void</span> ThreadPool::emplace_back_worker(<span class="built_in">std</span>::<span class="keyword">size_t</span> worker_number)</span><br><span class="line">&#123;</span><br><span class="line">workers.emplace_back(</span><br><span class="line">[<span class="keyword">this</span>, worker_number]</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (;;)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">std</span>::function&lt;<span class="keyword">void</span>()&gt; task;</span><br><span class="line"><span class="keyword">bool</span> notify;</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">std</span>::unique_lock&lt;<span class="built_in">std</span>::mutex&gt; lock(<span class="keyword">this</span>-&gt;queue_mutex);</span><br><span class="line"><span class="keyword">this</span>-&gt;condition_consumers.wait(lock,</span><br><span class="line">[<span class="keyword">this</span>, worker_number] &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">this</span>-&gt;stop || !<span class="keyword">this</span>-&gt;tasks.empty()</span><br><span class="line">|| pool_size &lt; worker_number + <span class="number">1</span>; &#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// deal with downsizing of thread pool or shutdown</span></span><br><span class="line"><span class="keyword">if</span> ((<span class="keyword">this</span>-&gt;stop &amp;&amp; <span class="keyword">this</span>-&gt;tasks.empty())</span><br><span class="line">|| (!<span class="keyword">this</span>-&gt;stop &amp;&amp; pool_size &lt; worker_number + <span class="number">1</span>))</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">std</span>::thread &amp; last_thread = <span class="keyword">this</span>-&gt;workers.back();</span><br><span class="line"><span class="built_in">std</span>::thread::id this_id = <span class="built_in">std</span>::this_thread::get_id();</span><br><span class="line"><span class="keyword">if</span> (this_id == last_thread.get_id())</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">// highest number thread exits, resizes the workers</span></span><br><span class="line"><span class="comment">// vector, and notifies others</span></span><br><span class="line">last_thread.detach();</span><br><span class="line"><span class="keyword">this</span>-&gt;workers.pop_back();</span><br><span class="line"><span class="keyword">this</span>-&gt;condition_consumers.notify_all();</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (!<span class="keyword">this</span>-&gt;tasks.empty())</span><br><span class="line">&#123;</span><br><span class="line">task = <span class="built_in">std</span>::move(<span class="keyword">this</span>-&gt;tasks.front());</span><br><span class="line"><span class="keyword">this</span>-&gt;tasks.pop();</span><br><span class="line">notify = <span class="keyword">this</span>-&gt;tasks.size() + <span class="number">1</span> == max_queue_size</span><br><span class="line">|| <span class="keyword">this</span>-&gt;tasks.empty();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">handle_in_flight_decrement guard(*<span class="keyword">this</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (notify)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">std</span>::unique_lock&lt;<span class="built_in">std</span>::mutex&gt; lock(<span class="keyword">this</span>-&gt;queue_mutex);</span><br><span class="line">condition_producers.notify_all();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">task();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span> <span class="comment">// THREAD_POOL_H_7ea1ee6b_4f17_4c09_b76b_3d44e102400c</span></span></span><br></pre></td></tr></table></figure><br><br></details><p><code>GetDirectorySize.cpp</code></p><details><summary>展开代码</summary><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unordered_map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;mutex&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;windows.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;time.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"ThreadPool.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> UNICODE</span></span><br><span class="line"><span class="keyword">typedef</span> wstring tstring;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">else</span></span></span><br><span class="line"><span class="keyword">typedef</span> <span class="built_in">string</span> tstring;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> POOL_SIZE 1000</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">unordered_map</span>&lt;tstring, ULONGLONG&gt; mapDirSize_simple;<span class="comment">// 递归的map表</span></span><br><span class="line"><span class="built_in">unordered_map</span>&lt;tstring, ULONGLONG&gt; mapDirSize;<span class="comment">// 线程池的map表</span></span><br><span class="line"><span class="built_in">std</span>::mutex mtx;</span><br><span class="line"><span class="function">ThreadPool <span class="title">pool</span><span class="params">(POOL_SIZE)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 根据文件的高32位和低32位求出文件的大小</span></span><br><span class="line"><span class="function">ULONGLONG <span class="title">GetFileSize</span><span class="params">(ULONGLONG high, ULONGLONG low)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> ((high &lt;&lt; <span class="number">32</span>) | low);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 去掉中所有的 "/"  "\" ":" </span></span><br><span class="line"><span class="function">tstring <span class="title">ClearPathFormat</span><span class="params">(tstring path)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">size_t</span> pos = <span class="number">0</span>;</span><br><span class="line">tstring clear1 = TEXT(<span class="string">"/"</span>);</span><br><span class="line">tstring clear2 = TEXT(<span class="string">"\\"</span>);</span><br><span class="line">tstring clear3 = TEXT(<span class="string">":"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> ((pos = path.find(clear1)) != tstring::npos)</span><br><span class="line">&#123;</span><br><span class="line">path.replace(pos, clear1.length(), <span class="string">""</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> ((pos = path.find(clear2)) != tstring::npos)</span><br><span class="line">&#123;</span><br><span class="line">path.replace(pos, clear2.length(), <span class="string">""</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> ((pos = path.find(clear3)) != tstring::npos)</span><br><span class="line">&#123;</span><br><span class="line">path.replace(pos, clear3.length(), <span class="string">""</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> path;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 简单递归得目录大小</span></span><br><span class="line"><span class="function">ULONGLONG <span class="title">SimpleGetDirectorySize</span><span class="params">(<span class="built_in">vector</span>&lt;tstring&gt; vecParentPath, tstring lpDirName)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">ULONGLONG nDirSize = <span class="number">0</span>;<span class="comment">// 文件夹大小</span></span><br><span class="line">tstring strDirName = lpDirName;</span><br><span class="line">strDirName += TEXT(<span class="string">"/*.*"</span>);<span class="comment">// 目录名字</span></span><br><span class="line"></span><br><span class="line">HANDLE hFile;</span><br><span class="line">WIN32_FIND_DATA pNextInfo;</span><br><span class="line">hFile = FindFirstFile(strDirName.c_str(), &amp;pNextInfo);</span><br><span class="line"><span class="keyword">if</span> (INVALID_HANDLE_VALUE == hFile)</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">vector</span>&lt;tstring&gt; copyVecParent = vecParentPath;</span><br><span class="line">copyVecParent.push_back(ClearPathFormat(lpDirName));</span><br><span class="line"><span class="keyword">while</span> (FindNextFile(hFile, &amp;pNextInfo))</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">// 跳过 "." ".." 两个目录</span></span><br><span class="line"><span class="keyword">if</span> (!<span class="built_in">strcmp</span>(pNextInfo.cFileName, <span class="string">"."</span>) || !<span class="built_in">strcmp</span>(pNextInfo.cFileName, <span class="string">".."</span>))</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (pNextInfo.dwFileAttributes &amp; FILE_ATTRIBUTE_DIRECTORY)</span><br><span class="line">&#123;<span class="comment">// 目录, 递归下去加</span></span><br><span class="line">tstring strTmp = lpDirName;</span><br><span class="line">strTmp += TEXT(<span class="string">"/"</span>);</span><br><span class="line">strTmp += pNextInfo.cFileName;</span><br><span class="line">SimpleGetDirectorySize(copyVecParent, strTmp.c_str());</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;<span class="comment">// 文件</span></span><br><span class="line">nDirSize += GetFileSize(pNextInfo.nFileSizeHigh, pNextInfo.nFileSizeLow);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (nDirSize)</span><br><span class="line">&#123;</span><br><span class="line">mapDirSize_simple[ClearPathFormat(lpDirName)] += nDirSize;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> parent : vecParentPath)</span><br><span class="line">&#123;</span><br><span class="line">mapDirSize_simple[parent] += nDirSize;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> mapDirSize_simple[ClearPathFormat(lpDirName)];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 计算目录大小</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">CalcDirectoySize</span><span class="params">(<span class="built_in">vector</span>&lt;tstring&gt; vecParentPath, tstring strOwnPath)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">ULONGLONG nCurrentSize = <span class="number">0</span>;</span><br><span class="line">tstring strDirName = strOwnPath;</span><br><span class="line">strDirName += TEXT(<span class="string">"/*.*"</span>);<span class="comment">// 目录名字</span></span><br><span class="line"></span><br><span class="line">HANDLE hFile;</span><br><span class="line">WIN32_FIND_DATA pNextInfo;</span><br><span class="line">hFile = FindFirstFile(strDirName.c_str(), &amp;pNextInfo);</span><br><span class="line"><span class="keyword">if</span> (INVALID_HANDLE_VALUE == hFile)</span><br><span class="line"><span class="keyword">return</span> ;</span><br><span class="line"></span><br><span class="line"><span class="built_in">vector</span>&lt;tstring&gt; copyVecParent = vecParentPath;</span><br><span class="line">copyVecParent.push_back(ClearPathFormat(strOwnPath));</span><br><span class="line"><span class="keyword">while</span> (FindNextFile(hFile, &amp;pNextInfo))</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">// 跳过 "." ".." 两个目录</span></span><br><span class="line"><span class="keyword">if</span> (!<span class="built_in">strcmp</span>(pNextInfo.cFileName, <span class="string">"."</span>) || !<span class="built_in">strcmp</span>(pNextInfo.cFileName, <span class="string">".."</span>))</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (pNextInfo.dwFileAttributes &amp; FILE_ATTRIBUTE_DIRECTORY)</span><br><span class="line">&#123;<span class="comment">// 目录</span></span><br><span class="line">tstring strTmp = strOwnPath;</span><br><span class="line">strTmp += TEXT(<span class="string">"/"</span>);</span><br><span class="line">strTmp += pNextInfo.cFileName;</span><br><span class="line">mtx.lock();</span><br><span class="line">pool.enqueue(CalcDirectoySize, copyVecParent, strTmp);</span><br><span class="line">mtx.unlock();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;<span class="comment">// 文件</span></span><br><span class="line">nCurrentSize += GetFileSize(pNextInfo.nFileSizeHigh, pNextInfo.nFileSizeLow);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (nCurrentSize)</span><br><span class="line">&#123;</span><br><span class="line">mtx.lock();</span><br><span class="line">mapDirSize[ClearPathFormat(strOwnPath)] += nCurrentSize;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> parent : vecParentPath)</span><br><span class="line">&#123;</span><br><span class="line">mapDirSize[parent] += nCurrentSize;</span><br><span class="line">&#125;</span><br><span class="line">mtx.unlock();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">GetDirectorySize</span><span class="params">(tstring strDirName)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">vector</span>&lt;tstring&gt; vecEmpty;</span><br><span class="line">mtx.lock();</span><br><span class="line">pool.enqueue(CalcDirectoySize, vecEmpty, strDirName);</span><br><span class="line">mtx.unlock();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">tstring strDirName = TEXT(<span class="string">"c:\\Windows"</span>);</span><br><span class="line"></span><br><span class="line">LARGE_INTEGER t1, t2, tc;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 递归计算目录大小</span></span><br><span class="line">QueryPerformanceFrequency(&amp;tc);</span><br><span class="line">QueryPerformanceCounter(&amp;t1);</span><br><span class="line"><span class="built_in">vector</span>&lt;tstring&gt; vecEmpty;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; strDirName &lt;&lt; <span class="string">" size: "</span>&lt;&lt; (<span class="keyword">double</span>)SimpleGetDirectorySize(vecEmpty, strDirName.c_str()) / (<span class="number">1</span> &lt;&lt; <span class="number">30</span>) &lt;&lt; <span class="string">"GB"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">QueryPerformanceCounter(&amp;t2);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"Use Time:%fs\n"</span>, (t2.QuadPart - t1.QuadPart)*<span class="number">1.0</span> / tc.QuadPart);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用线程池计算目录大小</span></span><br><span class="line">QueryPerformanceFrequency(&amp;tc);</span><br><span class="line">QueryPerformanceCounter(&amp;t1);</span><br><span class="line">GetDirectorySize(strDirName);</span><br><span class="line">pool.wait_until_nothing_in_flight();</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; strDirName &lt;&lt; <span class="string">" size: "</span> &lt;&lt; (<span class="keyword">double</span>)mapDirSize[ClearPathFormat(strDirName)] / (<span class="number">1</span> &lt;&lt; <span class="number">30</span>) &lt;&lt; <span class="string">"GB"</span> &lt;&lt; <span class="string">"\t-&gt; with pool size: "</span> &lt;&lt; POOL_SIZE &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">QueryPerformanceCounter(&amp;t2);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"Use Time:%fs\n"</span>, (t2.QuadPart - t1.QuadPart)*<span class="number">1.0</span> / tc.QuadPart);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><br></details><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Fri Dec 14 2018 21:02:56 GMT+0800 (中国标准时间) --&gt;&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;windows下文件夹目录大小没有直接获取的方法，一般直接使用&lt;strong&gt;递归&lt;/strong&gt;的方式来计算，或者使用&lt;strong&gt;多线程&lt;/strong&gt;提高并发度计算。&lt;/p&gt;&lt;p&gt;以下举的例子是&lt;strong&gt;计算目标目录大小以及目标目录下所有子目录大小&lt;/strong&gt;的例子, 不是计算&lt;strong&gt;单一目录&lt;/strong&gt;大小的例子&lt;/p&gt;&lt;p&gt;&lt;code&gt;ThreadPool.h&lt;/code&gt;的实现来源于: &lt;a href=&quot;https://github.com/log4cplus/Threadpool&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://github.com/log4cplus/Threadpool&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="C/C++" scheme="https://vonsdite.cn/categories/C-C/"/>
    
    
      <category term="C/C++" scheme="https://vonsdite.cn/tags/C-C/"/>
    
  </entry>
  
  <entry>
    <title>Js使用xpath和selector定位元素</title>
    <link href="https://vonsdite.cn/posts/cb216d2c.html"/>
    <id>https://vonsdite.cn/posts/cb216d2c.html</id>
    <published>2018-11-27T16:21:27.000Z</published>
    <updated>2018-11-27T16:29:19.009Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Fri Dec 14 2018 21:02:55 GMT+0800 (中国标准时间) --><h1 id="Js根据xpath定位元素"><a href="#Js根据xpath定位元素" class="headerlink" title="Js根据xpath定位元素"></a>Js根据xpath定位元素</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">find_element_by_xpath</span>(<span class="params">STR_XPATH</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> xresult = <span class="built_in">document</span>.evaluate(STR_XPATH, <span class="built_in">document</span>, <span class="literal">null</span>, XPathResult.ANY_TYPE, <span class="literal">null</span>);</span><br><span class="line">    <span class="keyword">var</span> xnodes = [];</span><br><span class="line">    <span class="keyword">var</span> xres;</span><br><span class="line">    <span class="keyword">while</span> (xres = xresult.iterateNext()) &#123;</span><br><span class="line">        xnodes.push(xres);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> xnodes;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><a id="more"></a><h1 id="使用selector定位元素"><a href="#使用selector定位元素" class="headerlink" title="使用selector定位元素"></a>使用selector定位元素</h1><p><code>querySelector</code>和<code>querySelectorAll</code>方法是<strong>W3C Selectors API</strong>规范中定义的。<br>他们的作用是根据<strong>CSS 选择器</strong>规范，便捷定位文档中指定元素。<br>目前几乎主流浏览器均支持了他们。包括 IE8(含) 以上版本、 Firefox、 Chrome、Safari、Opera。</p><p><code>querySelector</code> 和 <code>querySelectorAll</code> 在规范中定义了如下接口：<br></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span> dom &#123;</span><br><span class="line">    [Supplemental, NoInterfaceObject] interface NodeSelector &#123; </span><br><span class="line">        Element querySelector( <span class="keyword">in</span> DOMString selectors);</span><br><span class="line">        NodeList querySelectorAll( <span class="keyword">in</span> DOMString selectors); </span><br><span class="line">    &#125;;</span><br><span class="line">    Document implements NodeSelector;</span><br><span class="line">    DocumentFragment implements NodeSelector;</span><br><span class="line">    Element implements NodeSelector; </span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p></p><p>从接口定义可以看到<code>Document</code>、<code>DocumentFragment</code>、<code>Element</code>都实现了<code>NodeSelector</code>接口。<br>即这三种类型的元素都拥有者两个方法。<br><code>querySelector</code>和<code>querySelectorAll</code>的参数须是符合<strong>css selector</strong>的字符串。<br>不同的是<code>querySelector</code>返回的是一个对象，<code>querySelectorAll</code>返回的一个集合(<code>NodeList</code>)</p><h2 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h2><p>获取页面属性为test的元素：<br></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">document</span>.getElementById(<span class="string">"test"</span>);</span><br><span class="line"><span class="comment">//or</span></span><br><span class="line"><span class="built_in">document</span>.querySelector(<span class="string">"#test"</span>);</span><br><span class="line"><span class="comment">//or</span></span><br><span class="line"><span class="built_in">document</span>.querySelectorAll(<span class="string">"#test"</span>)[<span class="number">0</span>];</span><br></pre></td></tr></table></figure><p></p><p>获取页面class属性为’red’的元素:<br></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">document</span>.getElementsByClassName(<span class="string">'red'</span>)</span><br><span class="line"><span class="comment">//or</span></span><br><span class="line"><span class="built_in">document</span>.querySelector(<span class="string">'.red'</span>)</span><br><span class="line"><span class="comment">//or</span></span><br><span class="line"><span class="built_in">document</span>.querySelectorAll(<span class="string">'.red'</span>)</span><br></pre></td></tr></table></figure><p></p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Fri Dec 14 2018 21:02:55 GMT+0800 (中国标准时间) --&gt;&lt;h1 id=&quot;Js根据xpath定位元素&quot;&gt;&lt;a href=&quot;#Js根据xpath定位元素&quot; class=&quot;headerlink&quot; title=&quot;Js根据xpath定位元素&quot;&gt;&lt;/a&gt;Js根据xpath定位元素&lt;/h1&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;find_element_by_xpath&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;STR_XPATH&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; xresult = &lt;span class=&quot;built_in&quot;&gt;document&lt;/span&gt;.evaluate(STR_XPATH, &lt;span class=&quot;built_in&quot;&gt;document&lt;/span&gt;, &lt;span class=&quot;literal&quot;&gt;null&lt;/span&gt;, XPathResult.ANY_TYPE, &lt;span class=&quot;literal&quot;&gt;null&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; xnodes = [];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; xres;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt; (xres = xresult.iterateNext()) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        xnodes.push(xres);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; xnodes;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="Javascript" scheme="https://vonsdite.cn/categories/Javascript/"/>
    
    
      <category term="Javascript" scheme="https://vonsdite.cn/tags/Javascript/"/>
    
  </entry>
  
  <entry>
    <title>浏览器/Chrome 在console控制台导入js文件</title>
    <link href="https://vonsdite.cn/posts/f979bc0f.html"/>
    <id>https://vonsdite.cn/posts/f979bc0f.html</id>
    <published>2018-11-27T16:05:51.000Z</published>
    <updated>2018-11-27T16:20:28.708Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Fri Dec 14 2018 21:02:56 GMT+0800 (中国标准时间) --><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>有时候需要在浏览器的<code>console</code>上<strong>运行代码</strong>, 当需要<strong>引入别的js文件</strong>时, 就可以如下操作:</p><a id="more"></a><p>例子, 比如导入 <code>jquery-1.4.min.js</code><br></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> importJs=<span class="built_in">document</span>.createElement(<span class="string">'script'</span>);</span><br><span class="line">importJs.setAttribute(<span class="string">"type"</span>,<span class="string">"text/javascript"</span>);</span><br><span class="line">importJs.setAttribute(<span class="string">"src"</span>, <span class="string">'http://ajax.microsoft.com/ajax/jquery/jquery-1.4.min.js'</span>);</span><br><span class="line"><span class="built_in">document</span>.getElementsByTagName(<span class="string">"head"</span>)[<span class="number">0</span>].appendChild(importJs);</span><br></pre></td></tr></table></figure><p></p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Fri Dec 14 2018 21:02:56 GMT+0800 (中国标准时间) --&gt;&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;有时候需要在浏览器的&lt;code&gt;console&lt;/code&gt;上&lt;strong&gt;运行代码&lt;/strong&gt;, 当需要&lt;strong&gt;引入别的js文件&lt;/strong&gt;时, 就可以如下操作:&lt;/p&gt;
    
    </summary>
    
      <category term="Javascript" scheme="https://vonsdite.cn/categories/Javascript/"/>
    
      <category term="Console" scheme="https://vonsdite.cn/categories/Javascript/Console/"/>
    
    
      <category term="Javascript" scheme="https://vonsdite.cn/tags/Javascript/"/>
    
  </entry>
  
  <entry>
    <title>Hexo Next自定义是否显示TOC的自动编号</title>
    <link href="https://vonsdite.cn/posts/c6c725f5.html"/>
    <id>https://vonsdite.cn/posts/c6c725f5.html</id>
    <published>2018-11-25T02:15:27.000Z</published>
    <updated>2018-12-05T07:38:41.782Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Fri Dec 14 2018 21:02:55 GMT+0800 (中国标准时间) --><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>有时候写文章, 我们会习惯性地加上编号, 有时候又不想加上编号, 这个时候就需要自定义是否显示编号了。</p><p>效果如图:<br><img src="/images/2018-11-25-10-19-00.png" alt=""></p><a id="more"></a><h1 id="设置"><a href="#设置" class="headerlink" title="设置"></a>设置</h1><p>进入站点文件夹下<code>themes/next/layout/_macro/sidebar.swig</code>, 找到如下的代码<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;% if page.toc_number === undefined %&#125;</span><br><span class="line">    &#123;% set toc = toc(page.content, &#123; &quot;class&quot;: &quot;nav&quot;, list_number: theme.toc.number &#125;) %&#125;</span><br><span class="line">&#123;% else %&#125;</span><br><span class="line">    &#123;% set toc = toc(page.content, &#123; &quot;class&quot;: &quot;nav&quot;, list_number: page.toc_number &#125;) %&#125;</span><br><span class="line">&#123;% endif %&#125;</span><br></pre></td></tr></table></figure><p></p><p>发现代码的逻辑是：</p><ol><li>先判断文章的<code>front-matter</code>是否定义了<code>toc_number</code></li><li>无则会使用主题配置文件中的<code>toc_number</code></li></ol><p>而<code>toc_number</code>是一个<strong>布尔值</strong>, 表明是否要给文章的toc列表编号<br>所以只要在<strong>不需要加编号</strong>的文章的<code>front-matter</code>加上 <code>toc_number: false</code>即可<br><img src="/images/2018-11-25-10-22-28.png" alt=""></p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Fri Dec 14 2018 21:02:55 GMT+0800 (中国标准时间) --&gt;&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;有时候写文章, 我们会习惯性地加上编号, 有时候又不想加上编号, 这个时候就需要自定义是否显示编号了。&lt;/p&gt;&lt;p&gt;效果如图:&lt;br&gt;&lt;img src=&quot;/images/2018-11-25-10-19-00.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Hexo" scheme="https://vonsdite.cn/categories/Hexo/"/>
    
      <category term="Next" scheme="https://vonsdite.cn/categories/Hexo/Next/"/>
    
    
      <category term="Hexo" scheme="https://vonsdite.cn/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title>Hexo 添加sitemap优化seo</title>
    <link href="https://vonsdite.cn/posts/f6d1cfff.html"/>
    <id>https://vonsdite.cn/posts/f6d1cfff.html</id>
    <published>2018-11-24T16:21:58.000Z</published>
    <updated>2018-11-25T02:13:43.106Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Fri Dec 14 2018 21:02:55 GMT+0800 (中国标准时间) --><h1 id="添加sitemap"><a href="#添加sitemap" class="headerlink" title="添加sitemap"></a>添加sitemap</h1><h4 id="1-使用命令行cmd进入站点文件夹"><a href="#1-使用命令行cmd进入站点文件夹" class="headerlink" title="1. 使用命令行cmd进入站点文件夹"></a>1. 使用命令行<code>cmd</code>进入<strong>站点文件夹</strong></h4><h4 id="2-输入以下两条命令"><a href="#2-输入以下两条命令" class="headerlink" title="2. 输入以下两条命令"></a>2. 输入以下两条命令</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-generator-sitemap --save</span><br><span class="line">npm install hexo-generator-baidu-sitemap --save</span><br></pre></td></tr></table></figure><h4 id="3-在站点配置文件-config-yml加入如下的配置"><a href="#3-在站点配置文件-config-yml加入如下的配置" class="headerlink" title="3. 在站点配置文件_config.yml加入如下的配置"></a>3. 在<strong>站点配置文件</strong><code>_config.yml</code>加入如下的配置</h4><p><code>sitemap</code>是给google的站点地图, <code>baidusitemap</code>是给百度的站点地图</p><a id="more"></a><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># sitemap</span></span><br><span class="line"><span class="attr">sitemap:</span></span><br><span class="line"><span class="attr">  path:</span> <span class="string">sitemap.xml</span></span><br><span class="line"><span class="attr">baidusitemap:</span></span><br><span class="line"><span class="attr">  path:</span> <span class="string">baidusitemap.xml</span></span><br></pre></td></tr></table></figure><p>修改后, 输入命令<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo g</span><br><span class="line">hexo s</span><br></pre></td></tr></table></figure><p></p><p>即可查看到站点地图的信息或者在<code>public</code>中看到<strong>sitemap.xml</strong>和<strong>baidusitemap.xml</strong></p><p><img src="/images/2018-11-25-00-30-35.png" alt=""><br><img src="/images/2018-11-25-00-30-54.png" alt=""></p><h4 id="4-将sitemap提交"><a href="#4-将sitemap提交" class="headerlink" title="4. 将sitemap提交"></a>4. 将sitemap提交</h4><p>在<code>google search console</code>提交你的<code>sitemap.xml</code><br><img src="/images/2018-11-25-00-33-04.png" alt=""></p><p>在<code>百度搜索资源平台</code>-<code>数据引入</code>-<code>链接提交</code>-页面底部<code>自动提交</code>-<code>sitemap</code>提交sitemap地址<br><img src="/images/2018-11-25-00-42-29.png" alt=""></p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Fri Dec 14 2018 21:02:55 GMT+0800 (中国标准时间) --&gt;&lt;h1 id=&quot;添加sitemap&quot;&gt;&lt;a href=&quot;#添加sitemap&quot; class=&quot;headerlink&quot; title=&quot;添加sitemap&quot;&gt;&lt;/a&gt;添加sitemap&lt;/h1&gt;&lt;h4 id=&quot;1-使用命令行cmd进入站点文件夹&quot;&gt;&lt;a href=&quot;#1-使用命令行cmd进入站点文件夹&quot; class=&quot;headerlink&quot; title=&quot;1. 使用命令行cmd进入站点文件夹&quot;&gt;&lt;/a&gt;1. 使用命令行&lt;code&gt;cmd&lt;/code&gt;进入&lt;strong&gt;站点文件夹&lt;/strong&gt;&lt;/h4&gt;&lt;h4 id=&quot;2-输入以下两条命令&quot;&gt;&lt;a href=&quot;#2-输入以下两条命令&quot; class=&quot;headerlink&quot; title=&quot;2. 输入以下两条命令&quot;&gt;&lt;/a&gt;2. 输入以下两条命令&lt;/h4&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;npm install hexo-generator-sitemap --save&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;npm install hexo-generator-baidu-sitemap --save&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h4 id=&quot;3-在站点配置文件-config-yml加入如下的配置&quot;&gt;&lt;a href=&quot;#3-在站点配置文件-config-yml加入如下的配置&quot; class=&quot;headerlink&quot; title=&quot;3. 在站点配置文件_config.yml加入如下的配置&quot;&gt;&lt;/a&gt;3. 在&lt;strong&gt;站点配置文件&lt;/strong&gt;&lt;code&gt;_config.yml&lt;/code&gt;加入如下的配置&lt;/h4&gt;&lt;p&gt;&lt;code&gt;sitemap&lt;/code&gt;是给google的站点地图, &lt;code&gt;baidusitemap&lt;/code&gt;是给百度的站点地图&lt;/p&gt;
    
    </summary>
    
      <category term="Hexo" scheme="https://vonsdite.cn/categories/Hexo/"/>
    
    
      <category term="Hexo" scheme="https://vonsdite.cn/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title>vscode 常用快捷键</title>
    <link href="https://vonsdite.cn/posts/317f5687.html"/>
    <id>https://vonsdite.cn/posts/317f5687.html</id>
    <published>2018-11-24T08:42:11.000Z</published>
    <updated>2018-11-24T09:07:58.978Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Fri Dec 14 2018 21:02:56 GMT+0800 (中国标准时间) --><h1 id="Vscode查看所有的快捷键"><a href="#Vscode查看所有的快捷键" class="headerlink" title="Vscode查看所有的快捷键"></a>Vscode查看所有的快捷键</h1><p><img src="/images/2018-11-24-16-44-37.png" alt=""></p><h1 id="查看修改过的快捷键"><a href="#查看修改过的快捷键" class="headerlink" title="查看修改过的快捷键"></a>查看修改过的快捷键</h1><p>Vscode可以查看用户自己修改过的快捷键, 在搜索框键入<code>@source:user</code>即可</p><a id="more"></a><p><img src="/images/2018-11-24-16-44-52.png" alt=""></p><h1 id="Vscode常用快捷键"><a href="#Vscode常用快捷键" class="headerlink" title="Vscode常用快捷键"></a>Vscode常用快捷键</h1><table><thead><tr><th>按键</th><th>功能</th></tr></thead><tbody><tr><td><code>Ctrl + K,Ctrl + C</code> 或 <code>Ctrl + /</code></td><td>单行注释</td></tr><tr><td><code>Ctrl + K, Ctrl + U</code></td><td>取消单行注释</td></tr><tr><td><code>Alt + Shift + A</code></td><td>多行注释</td></tr><tr><td><code>Ctrl + Shift + P</code>或<code>F1</code></td><td>显示命令面板 Show Command Palette</td></tr><tr><td><code>Ctrl + P</code></td><td>快速打开 Quick Open</td></tr><tr><td><code>Ctrl + Shift + N</code></td><td>新窗口/实例 New window/instance</td></tr><tr><td><code>Ctrl + Shift + W</code></td><td>关闭窗口/实例 Close window/instance</td></tr><tr><td><code>Ctrl + W</code></td><td>关闭单个窗口</td></tr><tr><td><code>Ctrl + X</code></td><td>剪切行（空选定） Cut line (empty selection)</td></tr><tr><td><code>Ctrl + C</code></td><td>复制行（空选定）Copy line (empty selection)</td></tr><tr><td><code>Alt + ↑ / ↓</code></td><td>向上/向下移动行 Move line up/down</td></tr><tr><td><code>Shift + Alt + ↓ / ↑</code></td><td>向上/向下复制行 Copy line up/down</td></tr><tr><td><code>Ctrl + Shift + K</code></td><td>删除行 Delete line</td></tr><tr><td><code>Ctrl + Enter</code></td><td>在下面插入行 Insert line below</td></tr><tr><td><code>Ctrl + Shift + Enter</code></td><td>在上面插入行 Insert line above</td></tr><tr><td><code>Ctrl + Shift + \</code></td><td>跳到匹配的括号 Jump to matching bracket</td></tr><tr><td><code>Ctrl + ] / [</code></td><td>缩进/缩进行 Indent/outdent line</td></tr><tr><td><code>Home</code></td><td>转到行首 Go to beginning of line</td></tr><tr><td><code>End</code></td><td>转到行尾 Go to end of line</td></tr><tr><td><code>Ctrl + Home</code></td><td>转到文件开头 Go to beginning of file</td></tr><tr><td><code>Ctrl + End</code></td><td>转到文件末尾 Go to end of file</td></tr><tr><td><code>Ctrl + ↑ / ↓</code></td><td>向上/向下滚动行 Scroll line up/down</td></tr><tr><td><code>Alt + PgUp / PgDown</code></td><td>向上/向下滚动页面 Scroll page up/down</td></tr><tr><td><code>Ctrl + Shift + [</code></td><td>折叠（折叠）区域 Fold (collapse) region</td></tr><tr><td><code>Ctrl + Shift + ]</code></td><td>展开（未折叠）区域 Unfold (uncollapse) region</td></tr><tr><td><code>Ctrl + K Ctrl + [</code></td><td>折叠（未折叠）所有子区域 Fold (collapse) all subregions</td></tr><tr><td><code>Ctrl + K Ctrl + ]</code></td><td>展开（未折叠）所有子区域 Unfold (uncollapse) all subregions</td></tr><tr><td><code>Ctrl + K Ctrl + 0</code></td><td>折叠（折叠）所有区域 Fold (collapse) all regions</td></tr><tr><td><code>Ctrl + K Ctrl + J</code></td><td>展开（未折叠）所有区域 Unfold (uncollapse) all regions</td></tr><tr><td><code>Alt + Z</code></td><td>切换换行 Toggle word wrap</td></tr><tr><td><code>Ctrl + T</code></td><td>显示所有符号 Show all Symbols</td></tr><tr><td><code>Ctrl + G</code></td><td>转到行… Go to Line…</td></tr><tr><td><code>Ctrl + P</code></td><td>转到文件… Go to File…</td></tr><tr><td><code>Ctrl + Shift + O</code></td><td>转到符号… Go to Symbol…</td></tr><tr><td><code>Ctrl + Shift + M</code></td><td>显示问题面板 Show Problems panel</td></tr><tr><td><code>F8</code></td><td>转到下一个错误或警告 Go to next error or warning</td></tr><tr><td><code>Shift + F8</code></td><td>转到上一个错误或警告 Go to previous error or warning</td></tr><tr><td><code>Ctrl + Shift + Tab</code></td><td>导航编辑器组历史记录 Navigate editor group history</td></tr><tr><td><code>Alt + ←/→</code></td><td>返回/前进 Go back / forward</td></tr><tr><td><code>Ctrl + M</code></td><td>切换选项卡移动焦点 Toggle Tab moves focus</td></tr><tr><td><code>Ctrl + F</code></td><td>查找 Find</td></tr><tr><td><code>Ctrl + H</code></td><td>替换 Replace</td></tr><tr><td><code>F3 / Shift + F3</code></td><td>查找下一个/上一个 Find next/previous</td></tr><tr><td><code>Alt + Enter</code></td><td>选择查找匹配的所有出现 Select all occurences of Find match</td></tr><tr><td><code>Ctrl + D</code></td><td>将选择添加到下一个查找匹配 Add selection to next Find match</td></tr><tr><td><code>Ctrl + K Ctrl + D</code></td><td>将最后一个选择移至下一个查找匹配项 Move last selection to next Find match</td></tr><tr><td><code>Alt + C / R / W</code></td><td>切换区分大小写/正则表达式/整个词 Toggle case-sensitive / regex / whole word</td></tr><tr><td><code>Alt + 单击</code></td><td>插入光标 Insert cursor</td></tr><tr><td><code>Ctrl + Alt + ↑/↓</code></td><td>在上/下插入光标 Insert cursor above / below</td></tr><tr><td><code>Ctrl + U</code></td><td>撤消上一个光标操作 Undo last cursor operation</td></tr><tr><td><code>Shift + Alt + I</code></td><td>在选定的每一行的末尾插入光标 Insert cursor at end of each line selected</td></tr><tr><td><code>Ctrl + I</code></td><td>选择当前行 Select current line</td></tr><tr><td><code>Ctrl + Shift + L</code></td><td>选择当前选择的所有出现 Select all occurrences of current selection</td></tr><tr><td><code>Ctrl + F2</code></td><td>选择当前字的所有出现 Select all occurrences of current word</td></tr><tr><td><code>Shift + Alt + →</code></td><td>展开选择 Expand selection</td></tr><tr><td><code>Shift + Alt + ←</code></td><td>缩小选择 Shrink selection</td></tr><tr><td><code>Shift + Alt + （拖动鼠标）</code></td><td>列（框）选择 Column (box) selection</td></tr><tr><td><code>Ctrl + Shift + Alt +（箭头键）</code></td><td>列（框）选择 Column (box) selection</td></tr><tr><td><code>Ctrl + Shift + Alt + PgUp / PgDown</code></td><td>列（框）选择页上/下 Column (box) selection page up/down</td></tr><tr><td><code>Ctrl + space</code></td><td>触发建议 Trigger suggestion</td></tr><tr><td><code>Ctrl + Shift + Space</code></td><td>触发器参数提示 Trigger parameter hints</td></tr><tr><td><code>Tab</code></td><td>Emmet 展开缩写 Emmet expand abbreviation</td></tr><tr><td><code>Shift + Alt + F</code></td><td>格式化文档 Format document</td></tr><tr><td><code>Ctrl + K Ctrl + F</code></td><td>格式选定区域 Format selection</td></tr><tr><td><code>F12</code></td><td>转到定义 Go to Definition</td></tr><tr><td><code>Alt + F12</code></td><td>Peek定义 Peek Definition</td></tr><tr><td><code>Ctrl + K F12</code></td><td>打开定义到边 Open Definition to the side</td></tr><tr><td><code>Ctrl + .</code></td><td>快速解决 Quick Fix</td></tr><tr><td><code>Shift + F12</code></td><td>显示引用 Show References</td></tr><tr><td><code>F2</code></td><td>重命名符号 Rename Symbol</td></tr><tr><td><code>Ctrl + Shift + . /，</code></td><td>替换为下一个/上一个值 Replace with next/previous value</td></tr><tr><td><code>Ctrl + K Ctrl + X</code></td><td>修剪尾随空格 Trim trailing whitespace</td></tr><tr><td><code>Ctrl + K M</code></td><td>更改文件语言 Change file language</td></tr><tr><td><code>Ctrl + F4, Ctrl + W</code></td><td>关闭编辑器 Close editor</td></tr><tr><td><code>Ctrl + K F</code></td><td>关闭文件夹 Close folder</td></tr><tr><td><code>Ctrl + \</code></td><td>拆分编辑器 Split editor</td></tr><tr><td><code>Ctrl + 1 / 2 / 3</code></td><td>聚焦到第1，第2或第3编辑器组 Focus into 1st, 2nd or 3rd editor group</td></tr><tr><td><code>Ctrl + K Ctrl + ←/→</code></td><td>聚焦到上一个/下一个编辑器组 Focus into previous/next editor group</td></tr><tr><td><code>Ctrl + Shift + PgUp / PgDown</code></td><td>向左/向右移动编辑器 Move editor left/right</td></tr><tr><td><code>Ctrl + K ← / →</code></td><td>移动活动编辑器组 Move active editor group</td></tr><tr><td><code>Ctrl + N</code></td><td>新文件 New File</td></tr><tr><td><code>Ctrl + O</code></td><td>打开文件… Open File…</td></tr><tr><td><code>Ctrl + S</code></td><td>保存 Save</td></tr><tr><td><code>Ctrl + Shift + S</code></td><td>另存为… Save As…</td></tr><tr><td><code>Ctrl + K S</code></td><td>全部保存 Save All</td></tr><tr><td><code>Ctrl + F4</code></td><td>关闭 Close</td></tr><tr><td><code>Ctrl + K Ctrl + W</code></td><td>关闭所有 Close All</td></tr><tr><td><code>Ctrl + Shift + T</code></td><td>重新打开关闭的编辑器 Reopen closed editor</td></tr><tr><td><code>Ctrl + K</code></td><td>输入保持打开 Enter Keep Open</td></tr><tr><td><code>Ctrl + Tab</code></td><td>打开下一个 Open next</td></tr><tr><td><code>Ctrl + Shift + Tab</code></td><td>打开上一个 Open previous</td></tr><tr><td><code>Ctrl + K P</code></td><td>复制活动文件的路径 Copy path of active file</td></tr><tr><td><code>Ctrl + K R</code></td><td>显示资源管理器中的活动文件 Reveal active file in Explorer</td></tr><tr><td><code>Ctrl + K O</code></td><td>显示新窗口/实例中的活动文件 Show active file in new window/instance</td></tr><tr><td><code>F11</code></td><td>切换全屏 Toggle full screen</td></tr><tr><td><code>Shift + Alt + 1</code></td><td>切换编辑器布局 Toggle editor layout</td></tr><tr><td><code>Ctrl + = / -</code></td><td>放大/缩小 Zoom in/out</td></tr><tr><td><code>Ctrl + B</code></td><td>切换侧栏可见性 Toggle Sidebar visibility</td></tr><tr><td><code>Ctrl + Shift + E</code></td><td>显示浏览器/切换焦点 Show Explorer / Toggle focus</td></tr><tr><td><code>Ctrl + Shift + F</code></td><td>显示搜索 Show Search</td></tr><tr><td><code>Ctrl + Shift + G</code></td><td>显示Git Show Git</td></tr><tr><td><code>Ctrl + Shift + D</code></td><td>显示调试 Show Debug</td></tr><tr><td><code>Ctrl + Shift + X</code></td><td>显示扩展 Show Extensions</td></tr><tr><td><code>Ctrl + Shift + H</code></td><td>替换文件 Replace in files</td></tr><tr><td><code>Ctrl + Shift + J</code></td><td>切换搜索详细信息 Toggle Search details</td></tr><tr><td><code>Ctrl + Shift + C</code></td><td>打开新命令提示符/终端 Open new command prompt/terminal</td></tr><tr><td><code>Ctrl + Shift + U</code></td><td>显示输出面板 Show Output panel</td></tr><tr><td><code>Ctrl + Shift + V</code></td><td>切换Markdown预览 Toggle Markdown preview</td></tr><tr><td><code>Ctrl + K V</code></td><td>从旁边打开Markdown预览 Open Markdown preview to the side</td></tr><tr><td><code>F9</code></td><td>切换断点 Toggle breakpoint</td></tr><tr><td><code>F5</code></td><td>开始/继续 Start/Continue</td></tr><tr><td><code>Shift + F5</code></td><td>停止 Stop</td></tr><tr><td><code>F11 / Shift + F11</code></td><td>下一步/上一步 Step into/out</td></tr><tr><td><code>F10</code></td><td>跳过 Step over</td></tr><tr><td><code>Ctrl + K Ctrl + I</code></td><td>显示悬停 Show hover</td></tr><tr><td><code>Ctrl + `</code></td><td>显示集成终端 Show integrated terminal</td></tr><tr><td><code>Ctrl + Shift + `</code></td><td>创建新终端 Create new terminal</td></tr><tr><td><code>Ctrl + Shift + C</code></td><td>复制选定 Copy selection</td></tr><tr><td><code>Ctrl + Shift + V</code></td><td>粘贴到活动端子 Paste into active terminal</td></tr><tr><td><code>Ctrl + ↑ / ↓</code></td><td>向上/向下滚动 Scroll up/down</td></tr><tr><td><code>Shift + PgUp / PgDown</code></td><td>向上/向下滚动页面 Scroll page up/down</td></tr><tr><td><code>Ctrl + Home / End</code></td><td>滚动到顶部/底部 Scroll to top/bottom</td></tr></tbody></table><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Fri Dec 14 2018 21:02:56 GMT+0800 (中国标准时间) --&gt;&lt;h1 id=&quot;Vscode查看所有的快捷键&quot;&gt;&lt;a href=&quot;#Vscode查看所有的快捷键&quot; class=&quot;headerlink&quot; title=&quot;Vscode查看所有的快捷键&quot;&gt;&lt;/a&gt;Vscode查看所有的快捷键&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;/images/2018-11-24-16-44-37.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;&lt;h1 id=&quot;查看修改过的快捷键&quot;&gt;&lt;a href=&quot;#查看修改过的快捷键&quot; class=&quot;headerlink&quot; title=&quot;查看修改过的快捷键&quot;&gt;&lt;/a&gt;查看修改过的快捷键&lt;/h1&gt;&lt;p&gt;Vscode可以查看用户自己修改过的快捷键, 在搜索框键入&lt;code&gt;@source:user&lt;/code&gt;即可&lt;/p&gt;
    
    </summary>
    
      <category term="Vscode" scheme="https://vonsdite.cn/categories/Vscode/"/>
    
    
      <category term="Vscode" scheme="https://vonsdite.cn/tags/Vscode/"/>
    
  </entry>
  
  <entry>
    <title>vscode python环境配置</title>
    <link href="https://vonsdite.cn/posts/8caab64.html"/>
    <id>https://vonsdite.cn/posts/8caab64.html</id>
    <published>2018-11-24T08:04:38.000Z</published>
    <updated>2018-11-24T08:36:37.894Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Fri Dec 14 2018 21:02:56 GMT+0800 (中国标准时间) --><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>Vscode Python <strong>Windows</strong>环境配置</p><ol><li><p>安装<strong>Vscode</strong></p></li><li><p>安装Vscode插件<strong>Python</strong><br><img src="/images/2018-11-24-16-09-13.png" alt=""></p></li><li><p>安装<a href="https://www.python.org/" target="_blank" rel="noopener">Python3</a></p></li></ol><a id="more"></a><h1 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h1><p>启动Python项目的<strong>工作区</strong>, 例如<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mkdir hello</span><br><span class="line"><span class="built_in">cd</span> hello</span><br><span class="line">code .</span><br></pre></td></tr></table></figure><p></p><h2 id="选择Python解析器"><a href="#选择Python解析器" class="headerlink" title="选择Python解析器"></a>选择Python解析器</h2><p>按下<code>ctrl</code>+<code>shift</code>+<code>p</code> 调出命令面板, 键入<code>python: select interpreter</code>, 选择该Python项目的Python解析器</p><p>与在<code>settings.json</code>的工作区中设置<code>python.pythonPath</code>相同<br></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"python.pythonPath"</span>: <span class="string">"E:\\python\\python.exe"</span>,</span><br></pre></td></tr></table></figure><p></p><h2 id="运行Python程序"><a href="#运行Python程序" class="headerlink" title="运行Python程序"></a>运行Python程序</h2><p><img src="/images/2018-11-24-16-17-14.png" alt=""></p><p><img src="/images/2018-11-24-16-17-28.png" alt=""></p><h2 id="配置Python调试器"><a href="#配置Python调试器" class="headerlink" title="配置Python调试器"></a>配置Python调试器</h2><ol><li><p>先设置断点<br><img src="/images/2018-11-24-16-20-10.png" alt=""></p></li><li><p>点击左侧的<strong>调试</strong><br><img src="/images/2018-11-24-16-20-46.png" alt=""></p></li><li><p>点击小齿轮设置<code>launch.json</code>(会自动生成<code>launch.json</code>模板, 下拉框选第一个<code>Python: Current File (Integrated Terminal)</code>就好了)</p></li></ol><p><img src="/images/2018-11-24-16-21-12.png" alt=""></p><p><img src="/images/2018-11-24-16-21-32.png" alt=""></p><p>如果想在调试的时候, 让程序停在程序运行前, 可以再<code>launch.json</code>中加入<code>stopOnEntry: true</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="string">"name"</span>: <span class="string">"Python: Current File (Integrated Terminal)"</span>,</span><br><span class="line">    <span class="string">"type"</span>: <span class="string">"python"</span>,</span><br><span class="line">    <span class="string">"request"</span>: <span class="string">"launch"</span>,</span><br><span class="line">    <span class="string">"program"</span>: <span class="string">"$&#123;file&#125;"</span>,</span><br><span class="line">    <span class="string">"console"</span>: <span class="string">"integratedTerminal"</span>,</span><br><span class="line">    <span class="string">"stopOnEntry"</span>: true</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><ol start="4"><li>然后按<code>f5</code>即可进行<strong>调试</strong>(可以单步调试等等, 更多细节可以看 <a href="https://code.visualstudio.com/docs/python/debugging" target="_blank" rel="noopener">python调试</a>)</li></ol><p><img src="/images/2018-11-24-16-25-18.png" alt=""></p><h2 id="安装linting"><a href="#安装linting" class="headerlink" title="安装linting"></a>安装linting</h2><p>Linting突出了Python源代码中的语法和风格错误</p><ol><li><p>先使用命令行, 键入如下命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install pylint</span><br></pre></td></tr></table></figure></li><li><p>然后在工作区的<code>settings.json</code>加入如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"python.linting.pylintEnabled"</span>: true,</span><br><span class="line"><span class="string">"python.linting.enabled"</span>: true,</span><br></pre></td></tr></table></figure></li><li><p>效果图<br><img src="/images/2018-11-24-16-29-40.png" alt=""></p></li></ol><p>更多细节查看<a href="https://code.visualstudio.com/docs/python/linting" target="_blank" rel="noopener">Linting Python in Visual Studio Code</a></p><h2 id="单元测试"><a href="#单元测试" class="headerlink" title="单元测试"></a>单元测试</h2><p>可以使用python内建的<code>unittest</code>, 或者<code>pytest</code>或者<code>nose</code>(自行安装即可)</p><p><strong>例子:</strong><br>比如使用<code>unittest</code>, 则在工作区的<code>settings.json</code>加入如下:<br></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"python.unitTest.unittestEnabled"</span>: true,</span><br><span class="line"><span class="string">"python.unitTest.pyTestEnabled"</span>: false,</span><br><span class="line"><span class="string">"python.unitTest.nosetestsEnabled"</span>: false,</span><br></pre></td></tr></table></figure><p></p><ol><li><p>创建<code>inc_dec.py</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">increment</span><span class="params">(x)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> x + <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">decrement</span><span class="params">(x)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> x - <span class="number">1</span></span><br></pre></td></tr></table></figure></li><li><p>创建<code>test1.py</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> unittest</span><br><span class="line"><span class="keyword">import</span> inc_dec</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test_TestIncrementDecrement</span><span class="params">(unittest.TestCase)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_increment</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.assertEquals(inc_dec.increment(<span class="number">3</span>), <span class="number">4</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_decrement</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.assertEquals(inc_dec.decrement(<span class="number">3</span>), <span class="number">4</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    unittest.main()</span><br></pre></td></tr></table></figure></li><li><p>当使用<code>unittest</code>时, vscode看起来会是这样的(emmm, 单级工作区才能这样看到, 太多文件夹貌似不行…)</p></li></ol><p><img src="/images/2018-11-24-16-34-14.png" alt=""></p><p>更多单元测试细节可查看<a href="https://code.visualstudio.com/docs/python/unit-testing" target="_blank" rel="noopener">Python unit tests in Visual Studio Code</a></p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Fri Dec 14 2018 21:02:56 GMT+0800 (中国标准时间) --&gt;&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;Vscode Python &lt;strong&gt;Windows&lt;/strong&gt;环境配置&lt;/p&gt;&lt;ol&gt;&lt;li&gt;&lt;p&gt;安装&lt;strong&gt;Vscode&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;安装Vscode插件&lt;strong&gt;Python&lt;/strong&gt;&lt;br&gt;&lt;img src=&quot;/images/2018-11-24-16-09-13.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;安装&lt;a href=&quot;https://www.python.org/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Python3&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;
    
    </summary>
    
      <category term="Vscode" scheme="https://vonsdite.cn/categories/Vscode/"/>
    
      <category term="Python配置" scheme="https://vonsdite.cn/categories/Vscode/Python%E9%85%8D%E7%BD%AE/"/>
    
    
      <category term="Vscode" scheme="https://vonsdite.cn/tags/Vscode/"/>
    
  </entry>
  
  <entry>
    <title>vscode C/C++编译运行环境搭建</title>
    <link href="https://vonsdite.cn/posts/7552b9cf.html"/>
    <id>https://vonsdite.cn/posts/7552b9cf.html</id>
    <published>2018-11-24T03:46:38.000Z</published>
    <updated>2018-11-24T07:36:52.591Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Fri Dec 14 2018 21:02:56 GMT+0800 (中国标准时间) --><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>本文将介绍<strong>Vscode</strong><code>C/C++</code>编译运行环境的在<code>Windows</code>下的搭建, 共介绍<strong>2种方案</strong><br>推荐使用前两种, 即可完成编译运行调试功能</p><ol><li>使用<strong>Vscode</strong>的<code>Tasks</code>功能来编译运行, 并使用<code>GDB</code>调试</li><li>使用<code>CodeRunner</code></li></ol><h1 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a>环境配置</h1><a id="more"></a><ol><li><p>安装<strong>Vscode</strong></p></li><li><p>安装<code>MinGW-w64</code>和<code>Clang</code></p></li></ol><p><a href="http://releases.llvm.org/download.html" target="_blank" rel="noopener">LLVM Download Page</a> 在此页面下载Clang:<br>选<strong>Pre-Built Binaries</strong>中的<strong>Clang for Windows (64-bit)</strong>, 不需要下.sig文件</p><p><a href="https://sourceforge.net/projects/mingw-w64/" target="_blank" rel="noopener">MinGW-w64 - for 32 and 64 bit Windows</a> 在此页面下载MinGW-w64</p><p><code>LLVM</code>下载好了以后安装, 添加环境变量时：选<strong>Add LLVM to the system PATH for all users</strong></p><p><code>MinGW</code> 安装时, <strong>Architecture</strong>选<strong>x86_64</strong>, 装好以后把东西全部复制到Clang的文件夹里去, 它们会<strong>无冲突合并</strong>。</p><p><strong>PS:</strong><br>为什么既要装Clang又要装MinGW, 是因为Clang没有头文件。<br>如果你安装了其他IDE需要注意把其他的MinGW从环境变量中去掉; 也可以自己把它们的编译器设为Clang</p><ol start="3"><li>安装Vscode插件<br>通过Vscode的<strong>扩展</strong>搜索并下载以下两个插件</li></ol><ul><li><strong>C/C++</strong> (第一个方案需要)</li><li><strong>Code Runner</strong> (第二个方案需要)</li></ul><ol start="4"><li>在<code>settings.json</code>中添加如下的配置:<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"editor.formatOnType"</span>: true,</span><br><span class="line"><span class="string">"editor.snippetSuggestions"</span>: <span class="string">"top"</span>,</span><br><span class="line"><span class="string">"C_Cpp.clang_format_sortIncludes"</span>: true,</span><br><span class="line"><span class="string">"C_Cpp.errorSquiggles"</span>: <span class="string">"Disabled"</span>,</span><br><span class="line"><span class="string">"C_Cpp.autocomplete"</span>: <span class="string">"Disabled"</span>,</span><br><span class="line"><span class="string">"clang.cflags"</span>: [</span><br><span class="line">    <span class="string">"--target=x86_64-w64-mingw"</span>,</span><br><span class="line">    <span class="string">"-std=c11"</span>,</span><br><span class="line">    <span class="string">"-Wall"</span></span><br><span class="line">],</span><br><span class="line"><span class="string">"clang.cxxflags"</span>: [</span><br><span class="line">    <span class="string">"--target=x86_64-w64-mingw"</span>,</span><br><span class="line">    <span class="string">"-std=c++17"</span>,</span><br><span class="line">    <span class="string">"-Wall"</span></span><br><span class="line">],</span><br></pre></td></tr></table></figure></li></ol><h1 id="方案一"><a href="#方案一" class="headerlink" title="方案一"></a>方案一</h1><h2 id="使用-Vscode-优秀的-Tasks-功能启用编译运行命令"><a href="#使用-Vscode-优秀的-Tasks-功能启用编译运行命令" class="headerlink" title="使用 Vscode 优秀的 Tasks 功能启用编译运行命令"></a>使用 Vscode 优秀的 Tasks 功能启用编译运行命令</h2><ol><li>打开C或者C/C++的工作区, 使用快捷键<code>ctrl</code>+<code>shift</code>+<code>p</code>, 键入<code>c/cpp: edit configurations</code>, 按<code>Enter</code>打开<code>c_cpp_properties.json</code><br>将以下的内容<strong>覆盖</strong>到<code>c_cpp_properties.json</code>中</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="string">"configurations"</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="string">"name"</span>: <span class="string">"MinGW"</span>,</span><br><span class="line">            <span class="string">"includePath"</span>: [</span><br><span class="line">                <span class="string">"$&#123;workspaceFolder&#125;"</span></span><br><span class="line">            ],</span><br><span class="line">            <span class="string">"browse"</span>: &#123;</span><br><span class="line">                <span class="string">"path"</span>: [</span><br><span class="line">                    <span class="string">"$&#123;workspaceFolder&#125;"</span></span><br><span class="line">                ],</span><br><span class="line">                <span class="string">"limitSymbolsToIncludedHeaders"</span>: true,</span><br><span class="line">                <span class="string">"databaseFilename"</span>: <span class="string">""</span></span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="string">"defines"</span>: [</span><br><span class="line">                <span class="string">"_DEBUG"</span>,</span><br><span class="line">                <span class="string">"UNICODE"</span>,</span><br><span class="line">                <span class="string">"_UNICODE"</span></span><br><span class="line">            ],</span><br><span class="line">            <span class="string">"compilerPath"</span>: <span class="string">"E:/LLVM/bin/gcc.exe"</span>,</span><br><span class="line">            <span class="string">"cStandard"</span>: <span class="string">"c11"</span>,</span><br><span class="line">            <span class="string">"cppStandard"</span>: <span class="string">"c++17"</span>,</span><br><span class="line">            <span class="string">"intelliSenseMode"</span>: <span class="string">"clang-x64"</span></span><br><span class="line">        &#125;</span><br><span class="line">    ],</span><br><span class="line">    <span class="string">"version"</span>: <span class="number">4</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>使用快捷键<code>ctrl</code>+<code>shift</code>+<code>p</code>, 键入<code>tasks: configure task</code>, 按<code>Enter</code>打开<code>task.json</code></li></ol><p>将以下的内容<strong>覆盖</strong>到<code>task.json</code>中<br></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line">// https://code.visualstudio.com/docs/editor/tasks</span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">"version"</span>: <span class="string">"2.0.0"</span>,</span><br><span class="line">    <span class="string">"tasks"</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="string">"label"</span>: <span class="string">"Build"</span>, // 任务名称, 与launch.json的preLaunchTask相对应</span><br><span class="line">            // 如果使用Clang编写C语言, 把command的值改成clang。</span><br><span class="line">            // <span class="string">"command"</span>: <span class="string">"clang"</span>,      // 编译c语言</span><br><span class="line">            // 如果使用MinGW, 编译C用gcc, 编译c++用g++, 并把-target和-fcolor那两条删去</span><br><span class="line">            <span class="string">"command"</span>: <span class="string">"clang++"</span>, // 要使用的编译器</span><br><span class="line">            <span class="string">"args"</span>: [</span><br><span class="line">                <span class="string">"$&#123;file&#125;"</span>,</span><br><span class="line">                <span class="string">"-o"</span>, // 指定输出文件名, 不加该参数则默认输出a.exe, Linux下默认a.out</span><br><span class="line">                <span class="string">"$&#123;fileDirname&#125;/$&#123;fileBasenameNoExtension&#125;.exe"</span>,</span><br><span class="line">                <span class="string">"-g"</span>, // 生成和调试有关的信息</span><br><span class="line">                <span class="string">"-Wall"</span>, // 开启额外警告</span><br><span class="line">                <span class="string">"-static-libgcc"</span>, // 静态链接</span><br><span class="line">                <span class="string">"-fcolor-diagnostics"</span>, // 彩色的错误信息？但貌似clang默认开启而gcc不接受此参数</span><br><span class="line">                <span class="string">"--target=x86_64-w64-mingw"</span>, // clang的默认target为msvc, 不加这一条就会找不到头文件；Linux下去掉这一条</span><br><span class="line">                <span class="string">"-std=c++17"</span> // C语言最新标准为c11, 或根据自己的需要进行修改</span><br><span class="line">            ], // 编译命令参数</span><br><span class="line">            <span class="string">"windows"</span>: &#123;</span><br><span class="line">                <span class="string">"args"</span>: [</span><br><span class="line">                    <span class="string">"$&#123;file&#125;"</span>,</span><br><span class="line">                    <span class="string">"-o"</span>, // 指定输出文件名, 不加该参数则默认输出a.exe, Linux下默认a.out</span><br><span class="line">                    <span class="string">"$&#123;fileDirname&#125;/$&#123;fileBasenameNoExtension&#125;.exe"</span>,</span><br><span class="line">                    <span class="string">"-g"</span>, // 生成和调试有关的信息</span><br><span class="line">                    <span class="string">"-Wall"</span>, // 开启额外警告</span><br><span class="line">                    <span class="string">"-static-libgcc"</span>, // 静态链接</span><br><span class="line">                    <span class="string">"-fcolor-diagnostics"</span>, // 彩色的错误信息？但貌似clang默认开启而gcc不接受此参数</span><br><span class="line">                    <span class="string">"--target=x86_64-w64-mingw"</span>, // clang的默认target为msvc, 不加这一条就会找不到头文件；Linux下去掉这一条</span><br><span class="line">                    <span class="string">"-std=c++17"</span> // C语言最新标准为c11, 或根据自己的需要进行修改</span><br><span class="line">                ]</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="string">"presentation"</span>: &#123;</span><br><span class="line">                <span class="string">"echo"</span>: false,</span><br><span class="line">                <span class="string">"reveal"</span>: <span class="string">"always"</span>, // 在“终端”中显示编译信息的策略, 可以为always, silent, never。具体参见VSC的文档</span><br><span class="line">                <span class="string">"focus"</span>: true,     // 设为true后可以使执行task时焦点聚集在终端, 但对编译c和c++来说, 设为true没有意义</span><br><span class="line">                <span class="string">"panel"</span>: <span class="string">"shared"</span> // 不同的文件的编译信息共享一个终端面板</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="string">"problemMatcher"</span>: &#123;</span><br><span class="line">                <span class="string">"owner"</span>: <span class="string">"cpp"</span>,</span><br><span class="line">                <span class="string">"fileLocation"</span>: <span class="string">"absolute"</span>,</span><br><span class="line">                <span class="string">"pattern"</span>: &#123;</span><br><span class="line">                    <span class="string">"regexp"</span>: <span class="string">"^(.*):(\\d+):(\\d+):\\s+(error):\\s+(.*)$"</span>,</span><br><span class="line">                    <span class="string">"file"</span>: <span class="number">1</span>,</span><br><span class="line">                    <span class="string">"line"</span>: <span class="number">2</span>,</span><br><span class="line">                    <span class="string">"column"</span>: <span class="number">3</span>,</span><br><span class="line">                    <span class="string">"severity"</span>: <span class="number">4</span>,</span><br><span class="line">                    <span class="string">"message"</span>: <span class="number">5</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="string">"label"</span>: <span class="string">"Run"</span>,</span><br><span class="line">            <span class="string">"type"</span>: <span class="string">"shell"</span>,</span><br><span class="line">            <span class="string">"dependsOn"</span>: <span class="string">"Build"</span>,</span><br><span class="line">            <span class="string">"command"</span>: <span class="string">"$&#123;fileDirname&#125;/$&#123;fileBasenameNoExtension&#125;.o"</span>,</span><br><span class="line">            <span class="string">"windows"</span>: &#123;</span><br><span class="line">                <span class="string">"command"</span>: <span class="string">"$&#123;fileDirname&#125;/$&#123;fileBasenameNoExtension&#125;.exe"</span></span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="string">"args"</span>: [],</span><br><span class="line">            <span class="string">"presentation"</span>: &#123;</span><br><span class="line">                <span class="string">"reveal"</span>: <span class="string">"always"</span>,</span><br><span class="line">                <span class="string">"focus"</span>: true</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="string">"problemMatcher"</span>: [],</span><br><span class="line">            <span class="string">"group"</span>: &#123;</span><br><span class="line">                <span class="string">"kind"</span>: <span class="string">"test"</span>,</span><br><span class="line">                <span class="string">"isDefault"</span>: true</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>这个json里写了两个配置, 一个<code>Build</code>, 一个<code>Run</code>。</p><ul><li><p><code>Build</code> 配置：</p><ul><li><code>&quot;command&quot;</code> 选编译器用的。写 C++ 就填 <code>clang++</code> , 写 C 就填 <code>clang</code></li><li><code>&quot;args&quot;</code> 编译参数。像是<code>${fileDirname}</code>和 <code>${fileBasenameNoExtension}</code>之类的是VS Code的<strong>预定义变量</strong>, 详见 <a href="https://code.visualstudio.com/docs/editor/variables-reference" target="_blank" rel="noopener">Variables Reference</a>。</li><li><code>&quot;presentation&quot;</code>详见<a href="https://code.visualstudio.com/docs/editor/tasks#_output-behavior" target="_blank" rel="noopener"> Tasks - Output behavior</a> 。</li><li><code>&quot;reveal&quot;</code> 控制内置终端面板是否跳出到前端。</li><li><code>&quot;focus&quot;</code> 焦点是否跳到面板。</li><li><code>&quot;echo&quot;</code>控制执行的命令是否输出。</li><li><code>&quot;problemMatcher&quot;</code>就 C 语言来说, 功能是将编译器输出的错误捕捉到VS Code的<strong> Problem Panel</strong> 上, 这个面板上的错误并不会及时更新, 每编译一次就更新一次。详见 <a href="https://code.visualstudio.com/docs/editor/tasks#_processing-task-output-with-problem-matchers" target="_blank" rel="noopener">Tasks - problem-matchers</a>。</li></ul></li><li><p><code>Run</code> 配置：</p><ul><li><code>&quot;dependsOn&quot;</code>先运行哪个任务, 这里就是先运行 <code>Build</code> 任务（先编译后运行）。</li><li><code>&quot;group&quot;</code>设置组, 这里设置为默认的test组。详见 <a href="https://code.visualstudio.com/docs/editor/tasks#_custom-tasks" target="_blank" rel="noopener">Tasks - custom-tasks</a>。</li></ul></li></ul><p>键位绑定<br>到窗口左下角点齿轮再点 「键盘快捷方式」<br><img src="/images/2018-11-24-15-19-11.png" alt=""></p><p>设置成<code>alt</code>+<code>f2</code>, 后续就可以使用这个快捷键来运行<code>c/c++</code>代码了<br><img src="/images/2018-11-24-15-19-38.png" alt=""></p><h2 id="配置GDB进行调试"><a href="#配置GDB进行调试" class="headerlink" title="配置GDB进行调试"></a>配置GDB进行调试</h2><p>因为安装了<code>c/c++</code>插件, 所以按<code>f5</code>即可进行调试</p><p>需配置<code>launch.json</code><br>使用快捷键<code>ctrl</code>+<code>shift</code>+<code>p</code>, 键入<code>debug: open launch.json</code>, 按<code>Enter</code>打开<code>launch.json</code></p><p>将以下的内容<strong>覆盖</strong>到<code>launch.json</code>中<br></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">// https://github.com/Microsoft/vscode-cpptools/blob/master/launch.md</span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">"version"</span>: <span class="string">"0.2.0"</span>,</span><br><span class="line">    <span class="string">"configurations"</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="string">"name"</span>: <span class="string">"(gdb) Launch"</span>, // 配置名称，将会在启动配置的下拉菜单中显示</span><br><span class="line">            <span class="string">"type"</span>: <span class="string">"cppdbg"</span>,       // 配置类型，这里只能为cppdbg</span><br><span class="line">            <span class="string">"request"</span>: <span class="string">"launch"</span>,    // 请求配置类型，可以为launch（启动）或attach（附加）</span><br><span class="line">            <span class="string">"program"</span>: <span class="string">"$&#123;fileDirname&#125;/$&#123;fileBasenameNoExtension&#125;.o"</span>,   // 将要进行调试的程序的路径</span><br><span class="line">            // <span class="string">"program"</span>: <span class="string">"$&#123;fileDirname&#125;/$&#123;fileBasenameNoExtension&#125;.exe"</span>, </span><br><span class="line">            <span class="string">"args"</span>: [],             // 程序调试时传递给程序的命令行参数，一般设为空即可</span><br><span class="line">            <span class="string">"stopAtEntry"</span>: true,   // 设为true时程序将暂停在程序入口处，我一般设置为true</span><br><span class="line">            <span class="string">"cwd"</span>: <span class="string">"$&#123;workspaceFolder&#125;"</span>, // 调试程序时的工作目录</span><br><span class="line">            <span class="string">"environment"</span>: [],     </span><br><span class="line">            //<span class="string">"externalConsole"</span>: true,    // 调试时是否显示控制台窗口，一般设置为true显示控制台</span><br><span class="line">            <span class="string">"internalConsoleOptions"</span>: <span class="string">"neverOpen"</span>, // 如果不设为neverOpen，调试时会跳到“调试控制台”选项卡，你应该不需要对gdb手动输命令吧？</span><br><span class="line">            <span class="string">"MIMode"</span>: <span class="string">"gdb"</span>,        // 指定连接的调试器，可以为gdb或lldb。但目前lldb在windows下没有预编译好的版本。</span><br><span class="line">            <span class="string">"windows"</span>: &#123;</span><br><span class="line">                <span class="string">"program"</span>: <span class="string">"$&#123;fileDirname&#125;/$&#123;fileBasenameNoExtension&#125;.exe"</span>,</span><br><span class="line">                <span class="string">"miDebuggerPath"</span>: <span class="string">"E:/LLVM/bin/gdb.exe"</span> // 调试器路径，Windows下后缀不能省略</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="string">"setupCommands"</span>: [      </span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="string">"description"</span>: <span class="string">"Enable pretty-printing for gdb"</span>,</span><br><span class="line">                    <span class="string">"text"</span>: <span class="string">"-enable-pretty-printing"</span>,</span><br><span class="line">                    <span class="string">"ignoreFailures"</span>: true</span><br><span class="line">                &#125;</span><br><span class="line">            ],</span><br><span class="line">            <span class="string">"preLaunchTask"</span>: <span class="string">"Build"</span> // 调试会话开始前执行的任务，一般为编译程序。与tasks.json的label相对应</span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><ul><li>配置简要说明：<ul><li>注意<code>&quot;windows&quot;</code>:下的 <code>&quot;miDebuggerPath&quot;</code>。要将其中的路径改为<strong>本机的GDB路径</strong>, 放在了前文<strong>合并后的clang</strong>的<strong>bin目录</strong>下。</li><li><code>&quot;preLaunchTask&quot;</code> 运行调试前先运行某个任务，这个<code>Build</code>任务就是前面<code>tasks.josn</code>里的那个。</li></ul></li></ul><h1 id="方案二"><a href="#方案二" class="headerlink" title="方案二"></a>方案二</h1><p>使用<strong>code runner</strong>(<strong>不推荐</strong>)</p><p><strong>缺陷:</strong></p><ol><li>不能进行调试</li><li>终端输入会溢出到程序外</li></ol><p><strong>使用:</strong><br>安装完<strong>Code Runner</strong>插件后, 在<code>settings.json</code>添加如下的配置:<br></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"code-runner.runInTerminal"</span>: true,</span><br><span class="line"><span class="string">"code-runner.executorMap"</span>: &#123;</span><br><span class="line">    <span class="string">"javascript"</span>: <span class="string">"node"</span>,</span><br><span class="line">    <span class="string">"java"</span>: <span class="string">"cd $dir &amp;&amp; javac \"$fileName\" &amp;&amp; java \"$fileNameWithoutExt\""</span>,</span><br><span class="line">    <span class="string">"c"</span>: <span class="string">"cd $dir &amp;&amp; clang \"$fileName\" -o \"$fileNameWithoutExt.exe\" -Wall -g -Og -static-libgcc -fcolor-diagnostics --target=x86_64-w64-mingw -std=c11 &amp;&amp; &amp;\"$dir$fileNameWithoutExt\""</span>,</span><br><span class="line">    <span class="string">"cpp"</span>: <span class="string">"cd $dir &amp;&amp; clang++ \"$fileName\" -o \"$fileNameWithoutExt.exe\" -Wall -g -Og -static-libgcc -fcolor-diagnostics --target=x86_64-w64-mingw -std=c++17 &amp;&amp; &amp;\"$dir$fileNameWithoutExt\""</span>,</span><br><span class="line">    <span class="string">"objective-c"</span>: <span class="string">"cd $dir &amp;&amp; gcc -framework Cocoa \"$fileName\" -o $fileNameWithoutExt &amp;&amp; &amp;\"$dir$fileNameWithoutExt\""</span>,</span><br><span class="line">    <span class="string">"php"</span>: <span class="string">"php"</span>,</span><br><span class="line">    <span class="string">"python"</span>: <span class="string">"python -u"</span>,</span><br><span class="line">    <span class="string">"perl"</span>: <span class="string">"perl"</span>,</span><br><span class="line">    <span class="string">"perl6"</span>: <span class="string">"perl6"</span>,</span><br><span class="line">    <span class="string">"ruby"</span>: <span class="string">"ruby"</span>,</span><br><span class="line">    <span class="string">"go"</span>: <span class="string">"go run"</span>,</span><br><span class="line">    <span class="string">"lua"</span>: <span class="string">"lua"</span>,</span><br><span class="line">    <span class="string">"groovy"</span>: <span class="string">"groovy"</span>,</span><br><span class="line">    <span class="string">"powershell"</span>: <span class="string">"powershell -ExecutionPolicy ByPass -File"</span>,</span><br><span class="line">    <span class="string">"bat"</span>: <span class="string">"cmd /c"</span>,</span><br><span class="line">    <span class="string">"shellscript"</span>: <span class="string">"bash"</span>,</span><br><span class="line">    <span class="string">"fsharp"</span>: <span class="string">"fsi"</span>,</span><br><span class="line">    <span class="string">"csharp"</span>: <span class="string">"scriptcs"</span>,</span><br><span class="line">    <span class="string">"vbscript"</span>: <span class="string">"cscript //Nologo"</span>,</span><br><span class="line">    <span class="string">"typescript"</span>: <span class="string">"ts-node"</span>,</span><br><span class="line">    <span class="string">"coffeescript"</span>: <span class="string">"coffee"</span>,</span><br><span class="line">    <span class="string">"scala"</span>: <span class="string">"scala"</span>,</span><br><span class="line">    <span class="string">"swift"</span>: <span class="string">"swift"</span>,</span><br><span class="line">    <span class="string">"julia"</span>: <span class="string">"julia"</span>,</span><br><span class="line">    <span class="string">"crystal"</span>: <span class="string">"crystal"</span>,</span><br><span class="line">    <span class="string">"ocaml"</span>: <span class="string">"ocaml"</span>,</span><br><span class="line">    <span class="string">"r"</span>: <span class="string">"Rscript"</span>,</span><br><span class="line">    <span class="string">"applescript"</span>: <span class="string">"osascript"</span>,</span><br><span class="line">    <span class="string">"clojure"</span>: <span class="string">"lein exec"</span>,</span><br><span class="line">    <span class="string">"haxe"</span>: <span class="string">"haxe --cwd $dirWithoutTrailingSlash --run $fileNameWithoutExt"</span>,</span><br><span class="line">    <span class="string">"rust"</span>: <span class="string">"cd $dir &amp;&amp; rustc \"$fileName\" &amp;&amp; &amp;\"$dir$fileNameWithoutExt\""</span>,</span><br><span class="line">    <span class="string">"racket"</span>: <span class="string">"racket"</span>,</span><br><span class="line">    <span class="string">"ahk"</span>: <span class="string">"autohotkey"</span>,</span><br><span class="line">    <span class="string">"autoit"</span>: <span class="string">"autoit3"</span>,</span><br><span class="line">    <span class="string">"dart"</span>: <span class="string">"dart"</span>,</span><br><span class="line">    <span class="string">"pascal"</span>: <span class="string">"cd $dir &amp;&amp; fpc \"$fileName\" &amp;&amp; &amp;\"$dir$fileNameWithoutExt\""</span>,</span><br><span class="line">    <span class="string">"d"</span>: <span class="string">"cd $dir &amp;&amp; dmd \"$fileName\" &amp;&amp; &amp;\"$dir$fileNameWithoutExt\""</span>,</span><br><span class="line">    <span class="string">"haskell"</span>: <span class="string">"runhaskell"</span>,</span><br><span class="line">    <span class="string">"nim"</span>: <span class="string">"nim compile --verbosity:0 --hints:off --run"</span></span><br><span class="line">&#125;,</span><br><span class="line"><span class="string">"code-runner.saveFileBeforeRun"</span>: true,</span><br><span class="line"><span class="string">"code-runner.preserveFocus"</span>: true,</span><br><span class="line"><span class="string">"code-runner.ignoreSelection"</span>: true</span><br></pre></td></tr></table></figure><p></p><p>然后使用<code>ctrl</code>+<code>alt</code>+<code>n</code>即可运行代码</p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Fri Dec 14 2018 21:02:56 GMT+0800 (中国标准时间) --&gt;&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;本文将介绍&lt;strong&gt;Vscode&lt;/strong&gt;&lt;code&gt;C/C++&lt;/code&gt;编译运行环境的在&lt;code&gt;Windows&lt;/code&gt;下的搭建, 共介绍&lt;strong&gt;2种方案&lt;/strong&gt;&lt;br&gt;推荐使用前两种, 即可完成编译运行调试功能&lt;/p&gt;&lt;ol&gt;&lt;li&gt;使用&lt;strong&gt;Vscode&lt;/strong&gt;的&lt;code&gt;Tasks&lt;/code&gt;功能来编译运行, 并使用&lt;code&gt;GDB&lt;/code&gt;调试&lt;/li&gt;&lt;li&gt;使用&lt;code&gt;CodeRunner&lt;/code&gt;&lt;/li&gt;&lt;/ol&gt;&lt;h1 id=&quot;环境配置&quot;&gt;&lt;a href=&quot;#环境配置&quot; class=&quot;headerlink&quot; title=&quot;环境配置&quot;&gt;&lt;/a&gt;环境配置&lt;/h1&gt;
    
    </summary>
    
      <category term="Vscode" scheme="https://vonsdite.cn/categories/Vscode/"/>
    
      <category term="C/C++配置" scheme="https://vonsdite.cn/categories/Vscode/C-C-%E9%85%8D%E7%BD%AE/"/>
    
    
      <category term="Vscode" scheme="https://vonsdite.cn/tags/Vscode/"/>
    
  </entry>
  
</feed>
