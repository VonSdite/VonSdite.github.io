<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Von Sdite</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://vonsdite.cn/"/>
  <updated>2019-02-15T05:28:10.741Z</updated>
  <id>https://vonsdite.cn/</id>
  
  <author>
    <name>Von Sdite</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Centos 安装aria2</title>
    <link href="https://vonsdite.cn/posts/35a3d1bf.html"/>
    <id>https://vonsdite.cn/posts/35a3d1bf.html</id>
    <published>2019-02-15T04:49:15.000Z</published>
    <updated>2019-02-15T05:28:10.741Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Fri Feb 15 2019 13:28:24 GMT+0800 (中国标准时间) --><h1 id="下载安装包">下载安装包</h1><p>到 <a href="https://pkgs.org/download/aria2" target="_blank" rel="noopener">https://pkgs.org/download/aria2</a> 找到你想要下载的版本(注意系统32位或64位)</p><a id="more"></a><ol><li>以64位为例, 我下载的是 aria2-1.16.4-1.el6.rf.x86_64.rpm版本</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget http://ftp.tu-chemnitz.de/pub/linux/dag/redhat/el6/en/x86_64/rpmforge/RPMS/aria2-1.16.4-1.el6.rf.x86_64.rpm</span><br></pre></td></tr></table></figure><ol start="2"><li>然后执行安装</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rpm -ivh aria2-1.16.4-1.el6.rf.x86_64.rpm</span><br></pre></td></tr></table></figure><p>发现报了如下的错误:<br><img src="/images/2019-02-15-13-18-28.png" alt=""><br><strong><a href="http://xn--libgnutls-4b7n39g820dhs9g5jvb.xn--solibnettle-804s.so" target="_blank" rel="noopener">缺少了依赖libgnutls.so和libnettle.so</a></strong></p><ol start="3"><li>可以在下载页面找到需要的依赖, 浏览器 <code>ctrl+f</code>搜索即可<br><img src="/images/2019-02-15-13-20-13.png" alt=""><br><img src="/images/2019-02-15-13-21-46.png" alt=""></li></ol><p>只要下载一个libgnutls.so和libnettle.so就可以了</p><ol start="4"><li>下载并安装错误所需的依赖</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">wget http://mirror.centos.org/centos/6/os/x86_64/Packages/gnutls-2.12.23-22.el6.x86_64.rpm</span><br><span class="line">rpm -ivh gnutls-2.12.23-22.el6.x86_64.rpm</span><br><span class="line">wget http://ftp.tu-chemnitz.de/pub/linux/dag/redhat/el6/en/x86_64/rpmforge/RPMS/nettle-2.2-1.el6.rf.x86_64.rpm</span><br><span class="line">rpm -ivh nettle-2.2-1.el6.rf.x86_64.rpm</span><br></pre></td></tr></table></figure><ol start="5"><li>安装aria2</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rpm -ivh aria2-1.16.4-1.el6.rf.x86_64.rpm</span><br></pre></td></tr></table></figure><ol start="6"><li>验证</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">aria2c --version</span><br></pre></td></tr></table></figure><p><img src="/images/2019-02-15-13-27-43.png" alt=""></p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Fri Feb 15 2019 13:28:24 GMT+0800 (中国标准时间) --&gt;&lt;h1 id=&quot;下载安装包&quot;&gt;下载安装包&lt;/h1&gt;&lt;p&gt;到 &lt;a href=&quot;https://pkgs.org/download/aria2&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://pkgs.org/download/aria2&lt;/a&gt; 找到你想要下载的版本(注意系统32位或64位)&lt;/p&gt;
    
    </summary>
    
      <category term="Linux" scheme="https://vonsdite.cn/categories/Linux/"/>
    
      <category term="aria2" scheme="https://vonsdite.cn/categories/Linux/aria2/"/>
    
    
      <category term="Linux" scheme="https://vonsdite.cn/tags/Linux/"/>
    
      <category term="Centos" scheme="https://vonsdite.cn/tags/Centos/"/>
    
      <category term="aria2" scheme="https://vonsdite.cn/tags/aria2/"/>
    
  </entry>
  
  <entry>
    <title>Centos6 安装高版本gcc 5.2</title>
    <link href="https://vonsdite.cn/posts/421ebfd.html"/>
    <id>https://vonsdite.cn/posts/421ebfd.html</id>
    <published>2019-02-15T04:21:18.000Z</published>
    <updated>2019-02-15T04:24:40.223Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Fri Feb 15 2019 12:49:27 GMT+0800 (中国标准时间) --><h1 id="前言">前言</h1><p>Centos的yum源安装的gcc最高版本为 <strong>4.4</strong>, 但很多软件编译都要求在<strong>4.8以上</strong>, 如nodejs、aria2</p><p>以下介绍安装<strong>5.2版本的gcc</strong></p><a id="more"></a><h1 id="安装">安装</h1><p>键入以下命令即可</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">wget https://copr.fedoraproject.org/coprs/hhorak/devtoolset-4-rebuild-bootstrap/repo/epel-6/hhorak-devtoolset-4-rebuild-bootstrap-epel-6.repo -O /etc/yum.repos.d/devtools-4.repo</span><br><span class="line">yum install devtoolset-4-gcc devtoolset-4-binutils devtoolset-4-gcc-c++ -y</span><br><span class="line">scl <span class="built_in">enable</span> devtoolset-4 bash</span><br><span class="line">gcc -v</span><br></pre></td></tr></table></figure><p><img src="/images/2019-02-15-12-24-10.png" alt=""></p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Fri Feb 15 2019 12:49:27 GMT+0800 (中国标准时间) --&gt;&lt;h1 id=&quot;前言&quot;&gt;前言&lt;/h1&gt;&lt;p&gt;Centos的yum源安装的gcc最高版本为 &lt;strong&gt;4.4&lt;/strong&gt;, 但很多软件编译都要求在&lt;strong&gt;4.8以上&lt;/strong&gt;, 如nodejs、aria2&lt;/p&gt;&lt;p&gt;以下介绍安装&lt;strong&gt;5.2版本的gcc&lt;/strong&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Linux" scheme="https://vonsdite.cn/categories/Linux/"/>
    
      <category term="C/C++" scheme="https://vonsdite.cn/categories/Linux/C-C/"/>
    
    
      <category term="C/C++" scheme="https://vonsdite.cn/tags/C-C/"/>
    
      <category term="Linux" scheme="https://vonsdite.cn/tags/Linux/"/>
    
      <category term="Centos" scheme="https://vonsdite.cn/tags/Centos/"/>
    
  </entry>
  
  <entry>
    <title>Centos 安装nodejs</title>
    <link href="https://vonsdite.cn/posts/aec2847c.html"/>
    <id>https://vonsdite.cn/posts/aec2847c.html</id>
    <published>2019-02-15T03:29:15.000Z</published>
    <updated>2019-02-15T04:11:22.292Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Fri Feb 15 2019 12:49:27 GMT+0800 (中国标准时间) --><h1 id="使用wget下载linux版本">使用wget下载Linux版本</h1><ol><li>到nodejs官网找到nodejs的版本 <code>https://nodejs.org/dist/</code>, 这里以<code>v8.0.0</code>为例<br><img src="/images/2019-02-15-12-01-55.png" alt=""><br>下载对象32位或者64位的版本</li><li>我的系统是64位的, 所以选择<code>node-v8.0.0-linux-x64.tar.xz</code>下载</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget https://nodejs.org/dist/v8.0.0/node-v8.0.0-linux-x64.tar.xz</span><br></pre></td></tr></table></figure><a id="more"></a><h1 id="解压">解压</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">tar -xf node-v8.0.0-linux-x64.tar.xz</span><br><span class="line">rm node-v8.0.0-linux-x64.tar.xz -f</span><br><span class="line">mv node-v8.0.0-linux-x64/ /usr/<span class="built_in">local</span>/node       <span class="comment"># 移动到/usr/local/node中</span></span><br></pre></td></tr></table></figure><p><img src="/images/2019-02-15-12-05-28.png" alt=""></p><h1 id="配置环境变量">配置环境变量</h1><p>打开配置文件,</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/profile</span><br></pre></td></tr></table></figure><p>在配置文件最后加入如下:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">export NODE_HOME=/usr/local/node</span><br><span class="line">export PATH=$PATH:$NODE_HOME/bin  </span><br><span class="line">export NODE_PATH=$NODE_HOME/lib/node_modules</span><br></pre></td></tr></table></figure><p>再使用命令使配置文件生效</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">source</span> /etc/profile</span><br></pre></td></tr></table></figure><h1 id="完成">完成</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">node -v</span><br></pre></td></tr></table></figure><p>使用命令查看nodejs版本号, 成功看到则表明配置成功</p><p><img src="/images/2019-02-15-12-11-21.png" alt=""></p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Fri Feb 15 2019 12:49:27 GMT+0800 (中国标准时间) --&gt;&lt;h1 id=&quot;使用wget下载linux版本&quot;&gt;使用wget下载Linux版本&lt;/h1&gt;&lt;ol&gt;&lt;li&gt;到nodejs官网找到nodejs的版本 &lt;code&gt;https://nodejs.org/dist/&lt;/code&gt;, 这里以&lt;code&gt;v8.0.0&lt;/code&gt;为例&lt;br&gt;&lt;img src=&quot;/images/2019-02-15-12-01-55.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;下载对象32位或者64位的版本&lt;/li&gt;&lt;li&gt;我的系统是64位的, 所以选择&lt;code&gt;node-v8.0.0-linux-x64.tar.xz&lt;/code&gt;下载&lt;/li&gt;&lt;/ol&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;wget https://nodejs.org/dist/v8.0.0/node-v8.0.0-linux-x64.tar.xz&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="Linux" scheme="https://vonsdite.cn/categories/Linux/"/>
    
      <category term="Nodejs" scheme="https://vonsdite.cn/categories/Linux/Nodejs/"/>
    
    
      <category term="Linux" scheme="https://vonsdite.cn/tags/Linux/"/>
    
      <category term="Centos" scheme="https://vonsdite.cn/tags/Centos/"/>
    
      <category term="Nodejs" scheme="https://vonsdite.cn/tags/Nodejs/"/>
    
  </entry>
  
  <entry>
    <title>Centos6 iptables防火墙设置 开放关闭端口</title>
    <link href="https://vonsdite.cn/posts/fb664bd6.html"/>
    <id>https://vonsdite.cn/posts/fb664bd6.html</id>
    <published>2019-02-14T04:46:06.000Z</published>
    <updated>2019-02-14T04:53:30.645Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Fri Feb 15 2019 12:49:27 GMT+0800 (中国标准时间) --><h1 id="开启端口">开启端口</h1><p><strong>方法1</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">/sbin/iptables -I INPUT -p tcp --dport 端口号 -j ACCEPT  # 写入修改</span><br><span class="line"></span><br><span class="line">/etc/init.d/iptables save                               # 保存修改</span><br><span class="line"></span><br><span class="line">service iptables restart                                # 重启防火墙, 修改生效</span><br></pre></td></tr></table></figure><a id="more"></a><p><strong>方法2</strong><br><code>vim /etc/sysconfig/iptables</code> 打开配置文件加入如下语句:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-A INPUT -p tcp -m state --state NEW -m tcp --dport 端口号 -j ACCEPT   # 重启防火墙, 修改完成</span><br></pre></td></tr></table></figure><h1 id="关闭端口">关闭端口</h1><p><strong>方法1</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">/sbin/iptables -I INPUT -p tcp --dport 端口号 -j DROP  # 写入修改</span><br><span class="line"></span><br><span class="line">/etc/init.d/iptables save                              # 保存修改</span><br><span class="line"></span><br><span class="line">service iptables restart                               # 重启防火墙, 修改生效</span><br></pre></td></tr></table></figure><p><strong>方法2</strong><br><code>vim /etc/sysconfig/iptables</code> 打开配置文件加入如下语句:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-A INPUT -p tcp -m state --state NEW -m tcp --dport 端口号 -j DROP   # 重启防火墙, 修改完成</span><br></pre></td></tr></table></figure><h1 id="查看端口状态">查看端口状态</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/etc/init.d/iptables status</span><br></pre></td></tr></table></figure><h1 id="防火墙启动-重启-关闭">防火墙启动、重启、关闭</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">service iptables start</span><br><span class="line"></span><br><span class="line">service iptables restart</span><br><span class="line"></span><br><span class="line">service iptables stop</span><br></pre></td></tr></table></figure><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Fri Feb 15 2019 12:49:27 GMT+0800 (中国标准时间) --&gt;&lt;h1 id=&quot;开启端口&quot;&gt;开启端口&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;方法1&lt;/strong&gt;&lt;/p&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;/sbin/iptables -I INPUT -p tcp --dport 端口号 -j ACCEPT  # 写入修改&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;/etc/init.d/iptables save                               # 保存修改&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;service iptables restart                                # 重启防火墙, 修改生效&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="Linux" scheme="https://vonsdite.cn/categories/Linux/"/>
    
      <category term="iptables" scheme="https://vonsdite.cn/categories/Linux/iptables/"/>
    
    
      <category term="Linux" scheme="https://vonsdite.cn/tags/Linux/"/>
    
      <category term="Centos" scheme="https://vonsdite.cn/tags/Centos/"/>
    
      <category term="iptables" scheme="https://vonsdite.cn/tags/iptables/"/>
    
  </entry>
  
  <entry>
    <title>WirelessMon使用介绍</title>
    <link href="https://vonsdite.cn/posts/bc66d1bf.html"/>
    <id>https://vonsdite.cn/posts/bc66d1bf.html</id>
    <published>2019-02-05T11:36:28.000Z</published>
    <updated>2019-02-05T14:34:24.283Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Fri Feb 15 2019 12:49:27 GMT+0800 (中国标准时间) --><h1 id="功能综述">功能综述</h1><p>WirelessMon是一款能够监测区域内无线网络信号实时信息的软件工具。它能够提供包括无线网络接入点状态、名称、信号强度、加密方式以及MAC地址等多种信息, 帮助用户掌握本地无线网络的详细状态。</p><p><strong>注:</strong> 在启用WirelessMon时需保证笔记本电脑的无线网卡处于开启状态, 此时该软件才能够搜索到周围的无线网络信号信息。</p><a id="more"></a><h1 id="主界面">主界面</h1><p><img src="/images/2019-02-05-22-16-14.png" alt=""><br>① 主界面的标签栏为&quot;Summary&quot;;<br>② 此框图为当前连接的无线接入点的详细信息, 用户可看到该无线接入点的各项信息;<br>③ 此框图可以查看到区域内所有的无线接入点, 并且实时更新。用户可以据此掌握本地所有无线接入点的信息;<br><strong>注:</strong> WirelessMon尚不支持WPA2-PSK加密方式, 因此也不能正确显示出WPA2-PSK加密方式接入点的加密类型。<br>④ 点击此处状态栏可以按照特定的信息对搜索到的无线接入点进行重新排列, 方便用户查找特定的无线接入点。例如:点击下图红框位置, 接入点列表将会按照信号强度由弱到强或由强到弱的顺序重新显示。<br><img src="/images/2019-02-05-22-16-25.png" alt=""></p><h1 id="连接设置">连接设置</h1><p>利用WirelessMon可直接连接上搜索到的无线接入点, 双击无线接入点名称后出现如下界面:<br>①<br>A. &quot;使用SSID连接&quot;表示计算机将连接到指定SSID的无线接入点, 也就是说, 若当前区域内有多个SSID相同的无线接入点, WirelessMon会自动切换到信号强度最好的无线接入点上;<br>B. &quot;使用MAC地址连接&quot;表示计算机只会连接到指定MAC的无线接入点, WirelessMon只会连接到此MAC地址的无线接入点上, 而不会进行自动切换;<br>②选择匹配的无线接入点&quot;验证方法&quot;及&quot;加密方法&quot;, 只有此两项均填写正确才能建立连接;<br>（<strong>注:</strong> WirelessMon的当前版本尚不支持连接到WPA2-PSK加密方式的接入点, 若希望接入此类接入点, 需首先关闭WirelessMon,利用笔记本电脑的无线连接接入到此无线接入点, 再开启WirelessMon。）<br>③ 根据&quot;加密方法&quot;填入此接入点的密码;<br>④ 点击&quot;连接&quot;接入选定的无线接入点。<br><img src="/images/2019-02-05-22-31-18.png" alt=""></p><h1 id="图形工具">图形工具</h1><p>WirelessMon自带有图形工具, 可以帮助用户掌握无线信号强度及信号稳定性, 具体操作步骤如下:<br>① 点击选中&quot;Graphs&quot;标签栏;<br>② 在&quot;选择图形&quot;下拉菜单中可以选择图表的格式, 不同的图表格式对应不同的横纵轴坐标, 方便用户直观了解所需信息。<br>③ 在&quot;选择来源&quot;下拉菜单中可以选择需要监测的无线信号, 即使计算机当前未连接此接入点, WirelessMon同样可以绘制出该接入点的无线信号信息。<br><img src="/images/2019-02-05-22-31-39.png" alt=""></p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Fri Feb 15 2019 12:49:27 GMT+0800 (中国标准时间) --&gt;&lt;h1 id=&quot;功能综述&quot;&gt;功能综述&lt;/h1&gt;&lt;p&gt;WirelessMon是一款能够监测区域内无线网络信号实时信息的软件工具。它能够提供包括无线网络接入点状态、名称、信号强度、加密方式以及MAC地址等多种信息, 帮助用户掌握本地无线网络的详细状态。&lt;/p&gt;&lt;p&gt;&lt;strong&gt;注:&lt;/strong&gt; 在启用WirelessMon时需保证笔记本电脑的无线网卡处于开启状态, 此时该软件才能够搜索到周围的无线网络信号信息。&lt;/p&gt;
    
    </summary>
    
      <category term="网络配置" scheme="https://vonsdite.cn/categories/%E7%BD%91%E7%BB%9C%E9%85%8D%E7%BD%AE/"/>
    
    
      <category term="网络配置" scheme="https://vonsdite.cn/tags/%E7%BD%91%E7%BB%9C%E9%85%8D%E7%BD%AE/"/>
    
  </entry>
  
  <entry>
    <title>无线信号RSSSI值</title>
    <link href="https://vonsdite.cn/posts/c1ebb0fc.html"/>
    <id>https://vonsdite.cn/posts/c1ebb0fc.html</id>
    <published>2019-02-03T12:12:40.000Z</published>
    <updated>2019-02-05T11:33:23.359Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Fri Feb 15 2019 12:49:28 GMT+0800 (中国标准时间) --><h1 id="概念">概念</h1><p>RSSI: <code>Received Signal Strength Indication</code><strong>接收的信号强度指示</strong>, 无线发送层的可选部分, 用来判定链接质量, 以及是否增大广播发送强度。</p><a id="more"></a><h1 id="为什么无线wifi信号是负值">为什么无线wifi信号是负值</h1><p>RSSI的值对应的单位是dbm。dbm(Decibel-milliwatts): 分贝毫瓦, 表示某一功率与1mw的相对关系, 数值x(dbm)与功率P(mw)的具体计算公式如下,<br><img src="/images/2019-02-05-19-07-39.png" alt=""></p><p>因为无线信号多为mW级别, 所以对它进行了极化, 转化为dBm而已, 不表示信号是负的。<strong>1mW就是0dBm, 小于1mW就是负数的dBm数</strong>。<br>无线wifi信号dbm值只在一种情况下为0, 那就是在理想状态下经过实验测量的结果, 一般我们认为dbm为0是其最大值, 意味着接收方把发射方发射的<strong>所有无线信号都接收到</strong>了, 即无线路由器发射多少功率, 接收的无线网卡就获得多少功率。当然这是在理想状态下测量的, 在实际中即使将无线网卡挨着无线路由器的发射天线也不会达到dbm为0的效果。所以说测量出来的dbm值都是负数, 不要盲目的认为负数就是信号不好。</p><p>接收的信号强度指示: RSSI只是信号强度的一个指示值！</p><p>可以看出0.5毫瓦约为-3dbm。所以RSSI并不是功率, db是分贝, 实际上常常用来表示信噪比的单位。上面的dbm是一个带用量纲(毫瓦)的两个功率的比值的表示方法。这下彻底明白了为什么RSSI的值对应的dbm值不具备物理意义了吧。</p><h1 id="关于db与dbm">关于dB与dBm</h1><p>dB是一个纯计数单位, dB = 10logX, 可以轻易把一个很大的数表示出来, 因为2倍就是3dB, 10倍就是10dB, 即2^n＝3*n dB, X = 1000000000000000= 10logX = 150 dB, 便于表达。</p><p>dBm是一个表示功率绝对值的单位, 计算公式为: 10lg功率值/1mW。例如: 如果发射功率为1mW, 按dBm单位进行折算后的值应为: 10 lg 1mW/1mW = 0dBm；对于40W的功率,则10 lg(40W/1mW)=46dBm。最常用的2W＝33dBm, 20W＝43dBm。<br>dBm与dBm之间的差值就可以用dB来表示。比如46dBm-43dBm=3dB, 表示40W功率是20W功率的2倍。</p><h1 id="误区-dbm值越小越好">误区: dbm值越小越好</h1><p>既然前面提到了dbm值都是负数, 所以很多人都认为dbm值越小越好。其实这个认知是错误的。正如前面所说dbm值最大是0, 而且是理想状态。那么越接近理想状态下的dbm值, 越说明无线路由器发射的功率都被无线网卡接收到了。因此dbm值应该越大越好, -50dbm说明接收到的无线信号要好于-70dbm。</p><h1 id="误区-dbm值越大越好">误区: dbm值越大越好</h1><p>又有很多朋友认为既然dbm值是0说明接收发送信号的效果最好, 那么我们就应该让企业无线网络各个地方的dbm值尽可能的大。实际上这个观点也是错误的, 虽然dbm值越大发送接收信号效果越好, 但是与此同时也需要我们为企业内部无线网络安装足够多的无线信号中继设备, 这比费用也是不小的。经过实验表明在XP系统无线信号扫描组件中显示为“非常好”状态时是可以满足网络传输要求的, 速度和稳定性都没有任何问题, 而这个“非常好”状态对应的dbm值为0到-50dbm。因此我们只需要保证企业内部无线网各个地方的dbm值不大于-50dbm即可, 这样建立的无线网就是一个高速稳定的网络。我们对于无线网络投入的性价比才会最高。</p><p>小提示：当然有的时候出于经费的考虑我们无法保证企业内部网络每个地方的dbm值都是0到-50dbm之间, 那么在测量时也要保证在0到-70dbm之间。因为当XP系统接收到的无线信号小于-70dbm则会出现传输不稳定, 速度缓慢的现象, 那样我们的无线网络就无法正常使用了。</p><h1 id="误区：接收功率小是因为传输受干扰">误区：接收功率小是因为传输受干扰</h1><p>众所周知无线路由器发射功率一般都是100mw, 还有更高的。那么为什么我们接收到的功率却如此之小呢？是因为传输过程中受到干扰比较大呢？下面我们拿接收到的信号为-50dbm即0.01μW为例进行介绍, 如果无线路由器发射功率为100mw, 而接收到的仅仅为0.01μW, 两者差别为10000000倍。<br>实际上这个是正常的传输, 就好象太阳发出的能量只有一亿分之一被地球接收到一样。接收功率肯定要远远小于发射功率。所以网络管理员在测量时比需担心, 只要你的信号强度大于-50dbm就可以没有任何问题的无线传输数据, 再退一步即使到了-70dbm也可以保证无线速度为54M进行传输。</p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Fri Feb 15 2019 12:49:28 GMT+0800 (中国标准时间) --&gt;&lt;h1 id=&quot;概念&quot;&gt;概念&lt;/h1&gt;&lt;p&gt;RSSI: &lt;code&gt;Received Signal Strength Indication&lt;/code&gt;&lt;strong&gt;接收的信号强度指示&lt;/strong&gt;, 无线发送层的可选部分, 用来判定链接质量, 以及是否增大广播发送强度。&lt;/p&gt;
    
    </summary>
    
      <category term="网络配置" scheme="https://vonsdite.cn/categories/%E7%BD%91%E7%BB%9C%E9%85%8D%E7%BD%AE/"/>
    
    
      <category term="网络配置" scheme="https://vonsdite.cn/tags/%E7%BD%91%E7%BB%9C%E9%85%8D%E7%BD%AE/"/>
    
  </entry>
  
  <entry>
    <title>无线wifi 2.4GHz 信道探讨</title>
    <link href="https://vonsdite.cn/posts/6d6f15c3.html"/>
    <id>https://vonsdite.cn/posts/6d6f15c3.html</id>
    <published>2019-02-03T11:10:06.000Z</published>
    <updated>2019-02-03T11:30:49.488Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Fri Feb 15 2019 12:49:28 GMT+0800 (中国标准时间) --><h1 id="前言">前言</h1><p>目前主流的无线WIFI网络设备不管是<code>802.11b/g</code>还是<code>802.11b/g/n</code>一般都支持13个信道。它们的中心频率虽然不同, 但是因为都占据一定的频率范围, 所以会有一些相互重叠的情况。</p><p>下面是常用的 2.4GHz(=2400MHz)频带的信道划分, 表中只列出信道的中心频率。</p><table><thead><tr><th>信道</th><th>中心频率</th></tr></thead><tbody><tr><td>1</td><td>2412MHz</td></tr><tr><td>2</td><td>2417MHz</td></tr><tr><td>3</td><td>2422MHz</td></tr><tr><td>4</td><td>2427MHz</td></tr><tr><td>5</td><td>2432MHz</td></tr><tr><td>6</td><td>2437MHz</td></tr><tr><td>7</td><td>2442MHz</td></tr><tr><td>8</td><td>2447MHz</td></tr><tr><td>9</td><td>2452MHz</td></tr><tr><td>10</td><td>2457MHz</td></tr><tr><td>11</td><td>2462MHz</td></tr><tr><td>12</td><td>2467MHz</td></tr><tr><td>13</td><td>2472MHz</td></tr></tbody></table><a id="more"></a><p>信道也称作通道(Channel)、频段, 是以无线信号(电磁波)作为传输载体的数据信号传送通道。无线网络(路由器、AP热点、电脑无线网卡)可在多个信道上运行。在无线信号覆盖范围内的各种无线网络设备应该尽量使用不同的信道, 以避免信号之间的干扰。</p><p>实际一共有14个信道, 但第14信道一般不用。每个信道的有效宽度是<code>20MHz</code>, 另外还有2MHz的强制隔离频带(类似于公路上的隔离带)。<br>即, 对于中心频率为 2412 MHz 的1信道, 其频率范围为 2401~2423MHz。</p><p>当然, 实际的电磁波谱使用规定因国家不同而有所差异, 以上只是举个例子。而且, <code>20MHz</code>的信道宽度也只是“有效带宽”, 因为实际上一个信道在其中心频率两侧有很宽的延展, 但是超过10MHz以外的部分强度很弱, 基本无用。</p><p>从下图很容易看到其中 <strong>1、6、11</strong> 这三个信道(红色标记)之间是<strong>完全没有交叠</strong>的, 也就是人们常说的三个不互相重叠的信道。每个信道<code>20MHz</code>带宽。图中也很容易看清楚其他各信道之间频谱重叠的情况。</p><p>另外, 如果设备支持, 除<strong>1、6、11</strong>三个一组互不干扰的信道外, 还有<strong>2、7、12</strong>; <strong>3、8、13</strong>; <strong>4、9、14</strong>三组互不干扰的信道。</p><p><img src="/images/2019-02-03-19-14-31.png" alt=""></p><p>现在新式的无线路由器都可以自动跳转信道了, 但是巧妇难为无米之炊, 设备多了, 还是会遭遇干扰。所以很多设备开始使用 5GHz 附近(5.15~5.85GHz)的频带。该频段在划分时, 每个信道与相邻信道都不发生重叠, 因而干扰较小。但是也有缺点: 5GHz 频率较高, 在空间传输时衰减较为严重, 因而如果距离稍远, 性能会严重降低。</p><h1 id="为什么wifi自动信道选到的信道多数在1-6-11">为什么WiFi自动信道选到的信道多数在1/6/11</h1><p><img src="/images/2019-02-03-19-21-33.png" alt=""></p><p>从图中, 我们很直观的看到, 在一个典型的应用环境下, 所有厂家的设备仿佛被某种力量牵引着, 把设备的信道都设在了1、6、11这三个信道。这是为什么呢？因为, 在WiFi的世界中, 有一条原则雷打不动, 那就是<strong>在信道范围内, 同一时刻, 只有一台设备可以发信号, 其他设备都需要等待</strong>。</p><p>我们知道, WiFi的原理是把数据载到电磁波上, 通过一定的算法来识别。那么, 问题来了, 如果空气中有两个设备同时发出WiFi数据, 他们所在的信道又一样, 这<strong>两束电磁波在空气中就会叠加(叠加原理), 从而变形</strong>, 变成无法识别的错误数据。</p><p><code>结论一: 因为WiFi是电磁波, 所以在同一个频率范围内, 某个时刻只能有一台设备工作, 否则就会出错</code>。</p><p>既然有上述特性, 那么, 靠大家自觉是不现实的。所以, WiFi的协议中给出了严谨的算法, 来保证遵守 WiFi 802.11协议的设备, 能够在相同的频率范围, 不冲突, 大家有秩序排队干活。因此, 为了让各个芯片厂家有据可循, WiFi协议对频率与信道的对 应做了规定, 举例来说: 1信道的中心频率是2.412GHz, 信道有效带宽是20MHz, 实际带宽是22MHz, 其中的2MHz带宽是隔离带, 防止某些厂商能力不足, 精度无法控制的刚刚好, 留点余量。如何直观的理解这个约定呢？如下所示:<br><img src="/images/2019-02-03-19-22-02.png" alt=""></p><p>从图中, 我们可以直观的看到, 每个信道的中心频率是多少, 它所能够覆盖的范围是多少。</p><p>简单解释有效频率的概念, 电磁波之所以能够传输数据, 是因为波的振幅, 频率等信息可以唯一确定一个矢量, 只要我们对这个矢量进行编解码, 就可以对应010101数据串。与网线传输数据类似, 网线传输数据时, 高电压表示0, 低电压表示1, 所以, 在网线上传输的数据, 就是一堆的高低高低高 低高低电压组合。用电磁波来传输数据有带宽的概念, 即1束波可以传1位数据, 还是2位数据, 还是3位数据, 是有讲究的。通常, 我们把这束波叫子载波, 一个子载波多了可以传3位数据, 即(001,110,010, 等等), 少了只能传1位数据, 如(1或者0), 那么, 同时能发出多少束子载波由有效带宽决定。在WiFi的协议中约定有效带宽是20MHz, 802.11N协议中, 有一种有效带宽是40MHz, 802.11AC协议中, 有一种有效带宽是80MHz。 可以直观的理解, <strong>有效带宽越宽, 单位时间传输的数据量就越大</strong>。</p><p>回到本话题, 我们知道有了有效带宽是20MHz, 那就要知道有效信道。所谓<strong>有效信道是工作时, 互不干扰的有效带宽所对应的的中心频率</strong>, 从上图可以看出, 有效信道的组合也就3种。</p><h2 id="原因">原因</h2><p>那么, 为什么业内都要有用1、6、11这种组合呢, 为啥不用其他两种组合, 中国支持1-13个信道; 欧洲支持1-13信道; 美国支持1-11信道; 日本支持1-14信道; 总的来看, 子集是1-11信道。因此, 把设备的自动信道设为1-6-11这三个信道, 是即安全, 又普遍且皆大欢喜的作法。</p><p><code>结论二: 信道设为1、6、11由有效信道而来, 并且, 从各个国家的法规出发, 选择1、6、11最稳妥。</code></p><h2 id="生活误区">生活误区</h2><p>由此可以引出一个我们日常生活中常见的误区:<br>小王问: “小明, 为啥我的路由器, 朋友的手机搜索不到呢？是不是我家路由器挫啊…”<br>答案: 查了一下信道, 发现他设了手动信道13, 然后先不问为什么设13, 直接告诉他, 小王啊, 你把信道设到1信道试试, 他按照小明的说法做了, 他朋友的手机果然搜到路由器。于是, 他很困惑, 丈二和尚摸不着头脑, 这是为什么呢？实际原因是他朋友的手机是国外行货, 比如美国货, 不支持12,13信道。</p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Fri Feb 15 2019 12:49:28 GMT+0800 (中国标准时间) --&gt;&lt;h1 id=&quot;前言&quot;&gt;前言&lt;/h1&gt;&lt;p&gt;目前主流的无线WIFI网络设备不管是&lt;code&gt;802.11b/g&lt;/code&gt;还是&lt;code&gt;802.11b/g/n&lt;/code&gt;一般都支持13个信道。它们的中心频率虽然不同, 但是因为都占据一定的频率范围, 所以会有一些相互重叠的情况。&lt;/p&gt;&lt;p&gt;下面是常用的 2.4GHz(=2400MHz)频带的信道划分, 表中只列出信道的中心频率。&lt;/p&gt;&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;信道&lt;/th&gt;&lt;th&gt;中心频率&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;1&lt;/td&gt;&lt;td&gt;2412MHz&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;2&lt;/td&gt;&lt;td&gt;2417MHz&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;3&lt;/td&gt;&lt;td&gt;2422MHz&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;4&lt;/td&gt;&lt;td&gt;2427MHz&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;5&lt;/td&gt;&lt;td&gt;2432MHz&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;6&lt;/td&gt;&lt;td&gt;2437MHz&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;7&lt;/td&gt;&lt;td&gt;2442MHz&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;8&lt;/td&gt;&lt;td&gt;2447MHz&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;9&lt;/td&gt;&lt;td&gt;2452MHz&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;10&lt;/td&gt;&lt;td&gt;2457MHz&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;11&lt;/td&gt;&lt;td&gt;2462MHz&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;12&lt;/td&gt;&lt;td&gt;2467MHz&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;13&lt;/td&gt;&lt;td&gt;2472MHz&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
    
    </summary>
    
      <category term="网络配置" scheme="https://vonsdite.cn/categories/%E7%BD%91%E7%BB%9C%E9%85%8D%E7%BD%AE/"/>
    
    
      <category term="网络配置" scheme="https://vonsdite.cn/tags/%E7%BD%91%E7%BB%9C%E9%85%8D%E7%BD%AE/"/>
    
  </entry>
  
  <entry>
    <title>无线路由器无缝漫游上网探讨</title>
    <link href="https://vonsdite.cn/posts/d0d26fb9.html"/>
    <id>https://vonsdite.cn/posts/d0d26fb9.html</id>
    <published>2019-02-02T07:41:35.000Z</published>
    <updated>2019-02-02T15:50:33.371Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Fri Feb 15 2019 12:49:28 GMT+0800 (中国标准时间) --><h1 id="前言">前言</h1><p>现在做到无缝漫游上网的模式以<strong>AC+(瘦)AP的模式</strong>为主,</p><blockquote><p>用到的设备有</p><ul><li>企业认证网关(路由功能, AC管理, 认证上网)</li><li>POE交换机</li><li>无线瘦AP</li></ul></blockquote><p>但目前还有很多人利用<strong>多个无线路由器</strong>来做无线wifi覆盖(比如说我自己), 这样做的原因是成本低, 但这样做实际上做不到无缝漫游上网, 原因除了无线路由器本身是普通家用路由器外, 还有其他的因素。</p><a id="more"></a><h1 id="多个无线路由器的方法">多个无线路由器的方法</h1><p>用<strong>多个无线路由器</strong>来做无线wifi覆盖方式:</p><blockquote><ul><li>统一wifi名称</li><li>wifi认证一致(加密协议、wifi密码一致等)</li><li>信道错开(2.4GHz 选择信道 1、6、11这三个不相互干扰的信道)</li><li>不同路由器LAN口设置不同的IP段</li><li>WAN口设置为动态IP获取</li></ul></blockquote><p>一台主路由器, 交换机, 多个无线路由器<br>连接图:<br><img src="/images/2019-02-02-15-51-00.png" alt=""><br>这里的无线路由器所做的wifi覆盖是一个独立的无线网络, 无线路由器自己独立分配IP, 从1到2到3的区域走, 都需要先断开原来的无线路由器连接, 才能再连接下一个无线路由器。这个过程是有一定的时间空隙, 会感觉到断网, 还有可能断开了原来的网络, 不会再连接下一个无线网络可能, 这跟设备有关。<br>实际上, 手机连wifi, 手机会获取路由器的信息(网关IP, 网关MAC唯一); 而无线路由器也会获取到手机同样信息。不管怎么样, 手机获取一台新接入的无线路由器信息都需要个时间, 虽然不长, 但这似乎不符合无缝漫游上网的条件。</p><p><strong>当然, 就我个人现在的体验来看, 手机和电脑都会自动切换wifi, 确实存在切换过程网络不可用的情况, 但这个时间不会很长, 同时, 一般使用网络中, 我们并不频繁走动, 所以这种方法体验起来还是OK的</strong></p><h1 id="另一种方法">另一种方法</h1><p>在上述方法中, 关闭各路由器的DHCP功能, 使IP分配由同一个主路由器来分配, 保证IP不变, 这是无缝漫游上网的一个条件(这个方法我<strong>未实现</strong>…)</p><h2 id="欠缺">欠缺</h2><p>但无缝漫游上网还有一个最重要的功能, 就是<strong>漫游阀值</strong>。<br>意思就是①结合无线AP的wifi信号强度; ②还要结合这个区域的在线人数, 以此来设置一个数值</p><h3 id="欠缺1-家用路由器不能设置信号强度">欠缺1 家用路由器不能设置信号强度</h3><p>我们知道无线路由器只有在信号很弱的情况下才断开, 手机正常上网信号是在-75以上强度, 但手机连接路由器wifi可以在-75以下。<br>当wifi强度在-75以下时, 手机上网就开始不正常了(网速慢, 上网卡), 只有移动到信号弱到很弱后, wifi才会断开。<br>但是家用无线路由器是<strong>设置不了</strong>在何种信号强度下断开wifi, 即不会在-75的信号强度自己去断开手机连接, 因此它们都没有办法设置漫游阀值<br>但在<strong>有AC功能的路由器</strong>上就可以设置。<br><img src="/images/2019-02-02-15-54-05.png" alt=""></p><h3 id="欠缺2-家用路由器不能限制在线人数">欠缺2 家用路由器不能限制在线人数</h3><p>除了漫游信号阀值还可以<strong>设置无线AP的在线人数</strong>, 人数满了后连接的手机会连接到其他信号稳定的无线AP上人(负载均衡功能)。这个功能家用无线路由器也是没有的。<br><img src="/images/2019-02-02-15-54-08.png" alt=""></p><p>所以就有一前头说的现在做到无缝漫游上网的模式还是以AC+(瘦)AP的模式为主, 用到的设备有企业认证网关(路由功能, AC管理, 认证上网), POE交换机, 无线瘦AP<br><img src="/images/2019-02-02-15-54-17.png" alt=""></p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Fri Feb 15 2019 12:49:28 GMT+0800 (中国标准时间) --&gt;&lt;h1 id=&quot;前言&quot;&gt;前言&lt;/h1&gt;&lt;p&gt;现在做到无缝漫游上网的模式以&lt;strong&gt;AC+(瘦)AP的模式&lt;/strong&gt;为主,&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;用到的设备有&lt;/p&gt;&lt;ul&gt;&lt;li&gt;企业认证网关(路由功能, AC管理, 认证上网)&lt;/li&gt;&lt;li&gt;POE交换机&lt;/li&gt;&lt;li&gt;无线瘦AP&lt;/li&gt;&lt;/ul&gt;&lt;/blockquote&gt;&lt;p&gt;但目前还有很多人利用&lt;strong&gt;多个无线路由器&lt;/strong&gt;来做无线wifi覆盖(比如说我自己), 这样做的原因是成本低, 但这样做实际上做不到无缝漫游上网, 原因除了无线路由器本身是普通家用路由器外, 还有其他的因素。&lt;/p&gt;
    
    </summary>
    
      <category term="网络配置" scheme="https://vonsdite.cn/categories/%E7%BD%91%E7%BB%9C%E9%85%8D%E7%BD%AE/"/>
    
    
      <category term="网络配置" scheme="https://vonsdite.cn/tags/%E7%BD%91%E7%BB%9C%E9%85%8D%E7%BD%AE/"/>
    
      <category term="路由器" scheme="https://vonsdite.cn/tags/%E8%B7%AF%E7%94%B1%E5%99%A8/"/>
    
  </entry>
  
  <entry>
    <title>一台交换机下配置多个无线路由器</title>
    <link href="https://vonsdite.cn/posts/869d86ab.html"/>
    <id>https://vonsdite.cn/posts/869d86ab.html</id>
    <published>2019-02-02T02:06:48.000Z</published>
    <updated>2019-02-02T07:47:43.784Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Fri Feb 15 2019 12:49:27 GMT+0800 (中国标准时间) --><h1 id="前言">前言</h1><p>在家中或者公司, 可能因为<strong>墙壁过多太厚</strong>或者<strong>距离太远</strong>, 导致无线路由器<strong>wifi信号衰弱</strong>, 使得无法使用<br>wifi上网, 这个时候, 我们可能有一些<strong>闲置旧的路由器</strong>, 我们可以使用这些路由器来<strong>拓展</strong>wifi。<br>拓展wifi信号的方式有几种, 有中继, 也有非中继的办法, 本文主要介绍的是<strong>非中继的方法</strong>, 即<strong>一台交换机下配置多个无线路由器</strong></p><a id="more"></a><p>以一台交换机, 两个路由器为例</p><h1 id="方法一">方法一</h1><p>交换机----路由器A wan口, 路由器B wan口, 路由器C wan口<br><img src="/images/2019-02-02-14-46-28.png" alt=""></p><p>三个路由器使用并行的网络,<br>但这样<strong>可能</strong>会出现一个问题, 如果路由器IP都是默认设置的192.168.1.1, 在同一交换机下配置多个路由器, 所有的路由器公用一个IP段, <strong>导致ARP冲突</strong>, 最后结果<strong>只能一个路由器</strong>可用, 其他都不能正常使用。<br><strong>解决办法:</strong><br>只要设置路由器在不同的IP段192.168.1.1, 192.168.2.1, 192.168.3.1等, 这样便会解决ARP冲突, 具体实现过程如下：</p><ol><li>登录路由器设置界面(比如华三魔术家的登录界面)<br><img src="/images/2019-02-02-14-50-59.png" alt=""></li><li>WAN口设置动态IP<br><img src="/images/2019-02-02-14-51-45.png" alt=""></li><li>LAN口设置IP地址(不同的路由器设置不同的IP地址即可)<br><img src="/images/2019-02-02-14-52-45.png" alt=""></li><li>重启路由器即可</li></ol><h2 id="查看的办法">查看的办法</h2><p>其实网络入户, 有一条入户网线, 插在光猫上(我家的光纤线插在了<strong>天翼网关</strong>上, IP段在192.168.1.1上);<br>所以实际上网络最上层是插在一个路由器上, 再插到交换机来拓展接口, 之后再通过其他路由器来发射无线wifi。</p><p>我家的入户光猫的网段是<strong>192.168.1.1</strong>,<br>然后按照上面教程分别设置<br>华三路由器网段在<strong>192.168.0.1</strong>,<br>水星路由器网段在<strong>192.168.2.1</strong>,<br><strong>设置成功后</strong><br>所有路由器的WAN口的DHCP的网关地址应该<strong>192.168.1.1</strong><br><img src="/images/2019-02-02-15-00-23.png" alt=""><br><img src="/images/2019-02-02-15-03-55.png" alt=""></p><p>然而可惜的是, 我的水星路由器的网关地址却是<strong>192.168.0.1</strong>, 即它不是直接连接到光猫上, 而是由华三路由器DHCP分配给了水星路由器,<br>接法就等同于<strong>方法二</strong>了</p><p>解决的方式也有, 就是直接将水星路由器接在交换机的<strong>那条线直接接到光猫口</strong>上, 这样就会不会经由华三路由器转发了。</p><h1 id="方法二">方法二</h1><p>交换机----路由器1 wan口; 路由器1 lan口----路由器2 wan口; 路由器2 lan口----电脑<br><img src="/images/2019-02-02-14-41-41.png" alt=""></p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Fri Feb 15 2019 12:49:27 GMT+0800 (中国标准时间) --&gt;&lt;h1 id=&quot;前言&quot;&gt;前言&lt;/h1&gt;&lt;p&gt;在家中或者公司, 可能因为&lt;strong&gt;墙壁过多太厚&lt;/strong&gt;或者&lt;strong&gt;距离太远&lt;/strong&gt;, 导致无线路由器&lt;strong&gt;wifi信号衰弱&lt;/strong&gt;, 使得无法使用&lt;br&gt;wifi上网, 这个时候, 我们可能有一些&lt;strong&gt;闲置旧的路由器&lt;/strong&gt;, 我们可以使用这些路由器来&lt;strong&gt;拓展&lt;/strong&gt;wifi。&lt;br&gt;拓展wifi信号的方式有几种, 有中继, 也有非中继的办法, 本文主要介绍的是&lt;strong&gt;非中继的方法&lt;/strong&gt;, 即&lt;strong&gt;一台交换机下配置多个无线路由器&lt;/strong&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="网络配置" scheme="https://vonsdite.cn/categories/%E7%BD%91%E7%BB%9C%E9%85%8D%E7%BD%AE/"/>
    
    
      <category term="网络配置" scheme="https://vonsdite.cn/tags/%E7%BD%91%E7%BB%9C%E9%85%8D%E7%BD%AE/"/>
    
      <category term="路由器" scheme="https://vonsdite.cn/tags/%E8%B7%AF%E7%94%B1%E5%99%A8/"/>
    
      <category term="交换机" scheme="https://vonsdite.cn/tags/%E4%BA%A4%E6%8D%A2%E6%9C%BA/"/>
    
  </entry>
  
  <entry>
    <title>[Chrome 71版本]彻底解决Chrome请停用以开发者模式运行的扩展程序</title>
    <link href="https://vonsdite.cn/posts/d0e30452.html"/>
    <id>https://vonsdite.cn/posts/d0e30452.html</id>
    <published>2019-01-15T07:02:10.000Z</published>
    <updated>2019-01-15T07:46:06.659Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Fri Feb 15 2019 12:49:27 GMT+0800 (中国标准时间) --><h1 id="前言">前言</h1><p>想使用Chrome商店以外的插件时, 总会遇到以下的问题。<br>每次重启Chrome插件, 都会弹出<strong>请停用以开发者模式运行的扩展程序</strong>, 以下通过反汇编修改<strong>dll</strong>的方式<br><img src="/images/2019-01-15-15-11-47.png" alt=""></p><p>参考: <a href="https://stackoverflow.com/questions/30287907/how-to-get-rid-of-disable-developer-mode-extensions-pop-up/30361260#30361260" target="_blank" rel="noopener">https://stackoverflow.com/questions/30287907/how-to-get-rid-of-disable-developer-mode-extensions-pop-up/30361260#30361260</a></p><a id="more"></a><h1 id="题外话">题外话</h1><p>解决该问题的办法三种,</p><ul><li>一种是<strong>组策略白名单法(早就失效)</strong></li><li>一种是<strong>批处理法(Chrome 60版本左右已失效)</strong>,</li><li>最后一种就是<strong>修改dll</strong>方法, 唯一能成功的办法了, 也是接下来要介绍的办法(实际上批处理法只是将该办法封装成代码了而已)</li></ul><h1 id="解决办法">解决办法</h1><h2 id="安装x64dbg">安装x64dbg</h2><blockquote><ul><li>到<strong>x64dbg官网</strong>下载x64dbg, <a href="https://x64dbg.com/#start" target="_blank" rel="noopener">https://x64dbg.com/#start</a></li></ul></blockquote><h2 id="修改chrome-dll">修改chrome.dll</h2><ol><li><p>找到Chrome的主目录, 一般在<code>C:\Program Files (x86)</code>中, 然后找到如图的目录路径下的<strong>chrome.dll</strong><br><img src="/images/2019-01-15-15-18-56.png" alt=""></p></li><li><p>使用刚下载好的x64dbg打开chrome.dll</p></li></ol><p>双击<strong>x96dbg.exe</strong>, 然后选择x64dbg(如果打不开, 换x32dbg打开)<br><img src="/images/2019-01-15-15-20-49.png" alt=""></p><p><img src="/images/2019-01-15-15-23-26.png" alt=""></p><p><img src="/images/2019-01-15-15-26-06.png" alt=""></p><p>然后在主面板<strong>右键</strong>, 依次选择<code>搜索</code>-&gt; <code>当前模块</code> -&gt; <code>字符串</code><br><img src="/images/2019-01-15-15-26-55.png" alt=""></p><p>接着会进入一个搜索界面, 等待进度条加载完毕, 搜索<code>ExtensionDeveloperModeWarning</code>, 然后<strong>双击第一行结果</strong><br><img src="/images/2019-01-15-15-29-11.png" alt=""></p><p>接着会跳转到反汇编界面, 往上翻一点, 找到<code>cmp eax, 2</code>(也有可能是<code>cmp eax, 3</code>)<br><img src="/images/2019-01-15-15-30-40.png" alt=""></p><p>双击打开编辑页面, 修改成<code>cmp eax,9</code>, 然后点击确定, 注意只需要点击一次确定即可, 点击确定后它还是会继续弹出其它行的编辑界面, 此时直接关闭对话框即可。<br><img src="/images/2019-01-15-15-31-30.png" alt=""></p><p>修改完之后<code>Ctrl+P</code>导出修改过的dll文件(点击<strong>修补文件</strong>按钮就是导出dll文件)<br><img src="/images/2019-01-15-15-32-07.png" alt=""></p><p>你可以把dll文件导出到其它某个位置, 然后把<strong>原始chrome.dll文件备份</strong>, 再把这个修改过的替换, 然后重启Chrome, 可以发现提示已经没有了。</p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Fri Feb 15 2019 12:49:27 GMT+0800 (中国标准时间) --&gt;&lt;h1 id=&quot;前言&quot;&gt;前言&lt;/h1&gt;&lt;p&gt;想使用Chrome商店以外的插件时, 总会遇到以下的问题。&lt;br&gt;每次重启Chrome插件, 都会弹出&lt;strong&gt;请停用以开发者模式运行的扩展程序&lt;/strong&gt;, 以下通过反汇编修改&lt;strong&gt;dll&lt;/strong&gt;的方式&lt;br&gt;&lt;img src=&quot;/images/2019-01-15-15-11-47.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;&lt;p&gt;参考: &lt;a href=&quot;https://stackoverflow.com/questions/30287907/how-to-get-rid-of-disable-developer-mode-extensions-pop-up/30361260#30361260&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://stackoverflow.com/questions/30287907/how-to-get-rid-of-disable-developer-mode-extensions-pop-up/30361260#30361260&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="逆向" scheme="https://vonsdite.cn/categories/%E9%80%86%E5%90%91/"/>
    
      <category term="Chrome" scheme="https://vonsdite.cn/categories/%E9%80%86%E5%90%91/Chrome/"/>
    
    
      <category term="逆向" scheme="https://vonsdite.cn/tags/%E9%80%86%E5%90%91/"/>
    
      <category term="Chrome" scheme="https://vonsdite.cn/tags/Chrome/"/>
    
  </entry>
  
  <entry>
    <title>获取leetcode题目Html代码, markdown原汁原味呈现leetcode题目</title>
    <link href="https://vonsdite.cn/posts/31cb5475.html"/>
    <id>https://vonsdite.cn/posts/31cb5475.html</id>
    <published>2019-01-14T16:08:14.000Z</published>
    <updated>2019-01-14T16:21:50.163Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Fri Feb 15 2019 12:49:28 GMT+0800 (中国标准时间) --><p><a href="https://github.com/VonSdite/GetLeetcodeQuestion" target="_blank" rel="noopener">项目代码: https://github.com/VonSdite/GetLeetcodeQuestion</a></p><h1 id="前言">前言</h1><p>写leetcode题解(特指用<strong>markdown</strong>写)的时候, 想把leetcode的<strong>题目信息</strong>也放入到题解中,<br>但是又不想截图(图片占空间、而且题目可能很长, 需要分段截图),<br>因此想着把leetcode题目的html直接拿下来, 但是直接copy html代码,<br>又会<strong>丢失</strong>css样式, 不能很好地将题目原样呈现出来, 而且操作<strong>繁琐</strong>,<br>所以就做了一个<strong>获取leetcode题目信息html代码的Chrome插件</strong></p><a id="more"></a><h1 id="环境">环境</h1><blockquote><ul><li><strong>Chrome插件</strong>(仅适用Chrome内核的浏览器, 比如Chrome、360、QQ浏览器等)</li></ul></blockquote><h1 id="使用">使用</h1><ol><li>使用命令<code>git</code><strong>clone</strong>本项目</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/VonSdite/GetLeetcodeQuestion.git</span><br></pre></td></tr></table></figure><ol start="2"><li><p>打开<strong>Chrome浏览器</strong>的扩展程序(点击Chrome浏览器右上角<strong>设置</strong> - <strong>更多工具</strong> - <strong>扩展程序(E)</strong>)<br><img src="/images/2019-01-14-23-54-56.png" alt=""></p></li><li><p>点击<strong>加载已解压的扩展程序</strong>, 选择本项目即可<br><img src="/images/2019-01-14-23-56-57.png" alt=""></p></li></ol><h1 id="演示">演示</h1><p>完成上述操作后,<br>以后打开<strong>leetcode</strong>的题目就会在<strong>题目旁边</strong>多了如下的按钮, 点击按钮即可将题目的html代码放入到剪切板中<br><img src="/images/2019-01-14-23-58-23.png" alt=""><br><img src="/images/2019-01-14-23-59-14.png" alt=""></p><h2 id="复制的html代码">复制的html代码</h2><p>之后只需要<code>ctrl</code>+<code>v</code>就可以粘贴代码了, 比如上面这题<strong>Two Sum</strong>粘贴出来的代码如下</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">[Two Sum - LeetCode](https://leetcode.com/problems/two-sum/)</span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"margin:1em 0;font-size:13px;"</span>&gt;</span><span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">p</span>&gt;</span>Given an array of integers, return <span class="tag">&lt;<span class="name">strong</span>&gt;</span>indices<span class="tag">&lt;/<span class="name">strong</span>&gt;</span> of the two numbers such that they add up to a specific target.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>You may assume that each input would have <span class="tag">&lt;<span class="name">strong</span>&gt;</span><span class="tag">&lt;<span class="name">em</span>&gt;</span>exactly<span class="tag">&lt;/<span class="name">em</span>&gt;</span><span class="tag">&lt;/<span class="name">strong</span>&gt;</span> one solution, and you may not use the <span class="tag">&lt;<span class="name">em</span>&gt;</span>same<span class="tag">&lt;/<span class="name">em</span>&gt;</span> element twice.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">strong</span>&gt;</span>Example:<span class="tag">&lt;/<span class="name">strong</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">pre</span> <span class="attr">style</span>=<span class="string">"white-space:pre-wrap;background:#f7f9fa;padding:10px15px;color:#263238;line-height:1.6;font-size:13px;border-radius:3px;margin-top:0;margin-bottom:1em;overflow:auto;font-family:SFMono-Regular,Consolas,LiberationMono,Menlo,Courier,monospace;"</span>&gt;</span>Given nums = [2, 7, 11, 15], target = 9,</span><br><span class="line"></span><br><span class="line">Because nums[<span class="tag">&lt;<span class="name">strong</span>&gt;</span>0<span class="tag">&lt;/<span class="name">strong</span>&gt;</span>] + nums[<span class="tag">&lt;<span class="name">strong</span>&gt;</span>1<span class="tag">&lt;/<span class="name">strong</span>&gt;</span>] = 2 + 7 = 9,</span><br><span class="line">return [<span class="tag">&lt;<span class="name">strong</span>&gt;</span>0<span class="tag">&lt;/<span class="name">strong</span>&gt;</span>, <span class="tag">&lt;<span class="name">strong</span>&gt;</span>1<span class="tag">&lt;/<span class="name">strong</span>&gt;</span>].</span><br><span class="line"><span class="tag">&lt;/<span class="name">pre</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>&amp;nbsp;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><details><summary>markdown中的效果</summary><p><a href="https://leetcode.com/problems/two-sum/" target="_blank" rel="noopener">Two Sum - LeetCode</a></p><div style="margin:1em 0;font-size:13px"><div><p>Given an array of integers, return <strong>indices</strong> of the two numbers such that they add up to a specific target.</p><p>You may assume that each input would have <strong><em>exactly</em></strong> one solution, and you may not use the <em>same</em> element twice.</p><p><strong>Example:</strong></p><pre style="white-space:pre-wrap;background:#f7f9fa;padding:10px15px;color:#263238;line-height:1.6;font-size:13px;border-radius:3px;margin-top:0;margin-bottom:1em;overflow:auto;font-family:SFMono-Regular,Consolas,LiberationMono,Menlo,Courier,monospace">Given nums = [2, 7, 11, 15], target = 9,Because nums[<strong>0</strong>] + nums[<strong>1</strong>] = 2 + 7 = 9,return [<strong>0</strong>, <strong>1</strong>].</pre><p>&nbsp;</p></div></div></details><p>可以发现, 粘贴的代码与原来的html代码的区别:</p><ol><li>html标签的<code>class</code>均被替换为原来的<strong>css样式</strong></li><li><code>&lt;pre&gt;</code>标签额外添加了它的<strong>css样式</strong></li></ol><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Fri Feb 15 2019 12:49:28 GMT+0800 (中国标准时间) --&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/VonSdite/GetLeetcodeQuestion&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;项目代码: https://github.com/VonSdite/GetLeetcodeQuestion&lt;/a&gt;&lt;/p&gt;&lt;h1 id=&quot;前言&quot;&gt;前言&lt;/h1&gt;&lt;p&gt;写leetcode题解(特指用&lt;strong&gt;markdown&lt;/strong&gt;写)的时候, 想把leetcode的&lt;strong&gt;题目信息&lt;/strong&gt;也放入到题解中,&lt;br&gt;但是又不想截图(图片占空间、而且题目可能很长, 需要分段截图),&lt;br&gt;因此想着把leetcode题目的html直接拿下来, 但是直接copy html代码,&lt;br&gt;又会&lt;strong&gt;丢失&lt;/strong&gt;css样式, 不能很好地将题目原样呈现出来, 而且操作&lt;strong&gt;繁琐&lt;/strong&gt;,&lt;br&gt;所以就做了一个&lt;strong&gt;获取leetcode题目信息html代码的Chrome插件&lt;/strong&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="JavaScript" scheme="https://vonsdite.cn/categories/JavaScript/"/>
    
      <category term="Chrome插件" scheme="https://vonsdite.cn/categories/JavaScript/Chrome%E6%8F%92%E4%BB%B6/"/>
    
    
      <category term="JavaScript" scheme="https://vonsdite.cn/tags/JavaScript/"/>
    
      <category term="Chrome插件" scheme="https://vonsdite.cn/tags/Chrome%E6%8F%92%E4%BB%B6/"/>
    
      <category term="Leetcode" scheme="https://vonsdite.cn/tags/Leetcode/"/>
    
  </entry>
  
  <entry>
    <title>Jupyter 常用魔法命令</title>
    <link href="https://vonsdite.cn/posts/e422ea85.html"/>
    <id>https://vonsdite.cn/posts/e422ea85.html</id>
    <published>2019-01-09T08:31:20.000Z</published>
    <updated>2019-01-14T13:58:15.352Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Fri Feb 15 2019 12:49:27 GMT+0800 (中国标准时间) --><h1 id="前言">前言</h1><p>Jupyter NoteBook 是功能强大的Python交互IDE, 自带的一些常用Magic Command 可以让它变得更加得心应手。</p><p>magic函数主要包含两大类，一类是**行魔法（Line magic）<strong>前缀为<code>%</code>，一类是</strong>单元魔法(Cell magic)**前缀为<code>%%</code>;</p><a id="more"></a><h1 id="lsmagic">%lsmagic</h1><p>打印当前可以用的魔法命令<br><img src="/images/2019-01-09-16-39-15.png" alt=""></p><h1 id="matplotlib-inline">%matplotlib inline</h1><p>使用matplotlib画图时，图片嵌入在jupyter notebook里面，不以单独窗口显示<br><img src="/images/2019-01-09-16-43-22.png" alt=""></p><h1 id="timeit-timeit">%timeit %%timeit</h1><p>为代码执行计时<br>%timeit 是 <strong>行魔法命令</strong><br>%%timeit 是 <strong>块魔法命令</strong><br><img src="/images/2019-01-09-16-45-04.png" alt=""></p><h1 id="writefile">%%writefile</h1><p>后面紧接着一个file_name.py, 表示在jupyter notebook里面创建一个py文件，后面cell里面的内容为py文件内容</p><p>比如</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">%%writefile test_peace.py</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">print(np.random.randint(<span class="number">1</span>,<span class="number">5</span>))</span><br></pre></td></tr></table></figure><p>在当前路径下会生成一个test_peace.py的文件，内容就是cell里面的内容</p><h1 id="run">%run</h1><p>后面紧接着一个相对地址的file_name.py，表示运行一个py文件</p><p>比如</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">%run test_peace.py</span><br></pre></td></tr></table></figure><h1 id="pwd">%pwd</h1><p>查找当前目录<br><img src="/images/2019-01-09-16-46-57.png" alt=""></p><h1 id="cd">%cd</h1><p>更改当前目录<br><img src="/images/2019-01-09-16-47-39.png" alt=""></p><h1 id="cp">%cp</h1><p>复制文件</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">%cp test_peace.py test_load.py</span><br></pre></td></tr></table></figure><h1 id="whos">%whos</h1><p>查看当前变量,类型，信息</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Variable   Type       Data/Info</span><br><span class="line">-------------------------------</span><br><span class="line">np         module     &lt;module <span class="string">'numpy'</span> <span class="keyword">from</span> <span class="string">'/us&lt;...&gt;kages/numpy/__init__.py'</span>&gt;</span><br><span class="line">plt        module     &lt;module <span class="string">'matplotlib.pyplo&lt;...&gt;es/matplotlib/pyplot.py'</span>&gt;</span><br><span class="line">x          float64    <span class="number">-0.3048106211022167</span></span><br><span class="line">y          list       n=<span class="number">3</span></span><br></pre></td></tr></table></figure><h1 id="reset">%reset</h1><p>清除变量</p><h1 id="del">%del</h1><p>清除某一个变量</p><h1 id="load">%load</h1><p>加载一个文件里面的内容</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">%load test_peace.py</span><br></pre></td></tr></table></figure><h1 id="魔法命令">魔法命令+?</h1><p>加<code>?</code>可以获取魔法命令的用法<br><img src="/images/2019-01-09-16-41-04.png" alt=""><br><img src="/images/2019-01-09-16-40-47.png" alt=""></p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Fri Feb 15 2019 12:49:27 GMT+0800 (中国标准时间) --&gt;&lt;h1 id=&quot;前言&quot;&gt;前言&lt;/h1&gt;&lt;p&gt;Jupyter NoteBook 是功能强大的Python交互IDE, 自带的一些常用Magic Command 可以让它变得更加得心应手。&lt;/p&gt;&lt;p&gt;magic函数主要包含两大类，一类是**行魔法（Line magic）&lt;strong&gt;前缀为&lt;code&gt;%&lt;/code&gt;，一类是&lt;/strong&gt;单元魔法(Cell magic)**前缀为&lt;code&gt;%%&lt;/code&gt;;&lt;/p&gt;
    
    </summary>
    
      <category term="Python" scheme="https://vonsdite.cn/categories/Python/"/>
    
      <category term="Jupyter" scheme="https://vonsdite.cn/categories/Python/Jupyter/"/>
    
    
      <category term="Python" scheme="https://vonsdite.cn/tags/Python/"/>
    
      <category term="Jupyter" scheme="https://vonsdite.cn/tags/Jupyter/"/>
    
  </entry>
  
  <entry>
    <title>Jupyter Lab默认快捷键与Jupyter Notebook的区别</title>
    <link href="https://vonsdite.cn/posts/c0a62ed9.html"/>
    <id>https://vonsdite.cn/posts/c0a62ed9.html</id>
    <published>2019-01-09T06:57:52.000Z</published>
    <updated>2019-01-09T08:03:59.708Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Fri Feb 15 2019 12:49:27 GMT+0800 (中国标准时间) --><h1 id="前言">前言</h1><p>Jupyter Notebook和Jupyter Lab还是挺像的, 但Jupyter Lab更像IDE多一点</p><p>虽说Jupyter Lab包含 Jupyter Notebook, 但是Jupyter Notebook的一些快捷键在 Jupyter Lab中用不了</p><p><strong>以下均是Jupyter Notebook的快捷键, 会说明哪些在Jupyter Lab中失效了</strong></p><a id="more"></a><h1 id="命令行模式-按-esc-生效">命令行模式(按 <strong>Esc</strong> 生效)</h1><table><thead><tr><th>按键</th><th>功能</th></tr></thead><tbody><tr><td>F</td><td>查找并且替换 <img src="/images/ExclamationMark.png" alt="">Lab中失效了</td></tr><tr><td>Ctrl-Shift-F</td><td>打开命令配置 <img src="/images/ExclamationMark.png" alt="">Lab中失效了, 变成了隐藏侧边栏</td></tr><tr><td>Ctrl-Shift-P</td><td>打开命令配置 <img src="/images/ExclamationMark.png" alt="">Lab中失效了, 打印服务…</td></tr><tr><td>Enter</td><td>进入编辑模式</td></tr><tr><td>P</td><td>打开命令配置 <img src="/images/ExclamationMark.png" alt="">Lab中失效了</td></tr><tr><td>Alt-Enter</td><td>运行代码块并且插入下面</td></tr><tr><td>Y</td><td>把代码块变成代码</td></tr><tr><td>M</td><td>把代码块变成标签</td></tr><tr><td>R</td><td>清除代码块格式</td></tr><tr><td>1</td><td>把代码块变成heading 1</td></tr><tr><td>2</td><td>把代码块变成heading 2</td></tr><tr><td>3</td><td>把代码块变成heading 3</td></tr><tr><td>4</td><td>把代码块变成heading 4</td></tr><tr><td>5</td><td>把代码块变成heading 5</td></tr><tr><td>6</td><td>把代码块变成heading 6</td></tr><tr><td>K</td><td>选择上面的代码块</td></tr><tr><td>方向键上</td><td>选择上面的代码块</td></tr><tr><td>方向键下</td><td>选择下面的代码块</td></tr><tr><td>J</td><td>选择下面的代码块</td></tr><tr><td>Shift-K</td><td>扩展上面选择的代码块</td></tr><tr><td>Shift-方向键上</td><td>扩展上面选择的代码块</td></tr><tr><td>Shift-方向键下</td><td>扩展下面选择的代码块</td></tr><tr><td>Shift-J</td><td>扩展下面选择的代码块</td></tr><tr><td>A</td><td>在上面插入代码块</td></tr><tr><td>B</td><td>在下面插入代码块</td></tr><tr><td>X</td><td>剪切选择的代码块</td></tr><tr><td>C</td><td>复制选择的代码块</td></tr><tr><td>Shift-V</td><td>粘贴到上面</td></tr><tr><td>V</td><td>粘贴到下面</td></tr><tr><td>Z</td><td>撤销</td></tr><tr><td>D,D</td><td>删除选中单元格</td></tr><tr><td>Shift-M</td><td>合并选中单元格, 如果只有一个单元格被选中</td></tr><tr><td>Ctrl-S</td><td>保存并检查</td></tr><tr><td>S</td><td>保存并检查 <img src="/images/ExclamationMark.png" alt="">Lab中失效了</td></tr><tr><td>L</td><td>切换行号</td></tr><tr><td>O</td><td>折叠单元格的输出 <img src="/images/ExclamationMark.png" alt="">Lab中失效了</td></tr><tr><td>Shift-O</td><td>切换选定单元的输出滚动 <img src="/images/ExclamationMark.png" alt="">不知道有什么用, 也失效了</td></tr><tr><td>H</td><td>显示快捷键 <img src="/images/ExclamationMark.png" alt="">Lab中失效了</td></tr><tr><td>I,I</td><td>中断服务</td></tr><tr><td>0,0</td><td>重启服务(带窗口)</td></tr><tr><td>Shift-L</td><td>在所有单元格中切换行号, 并保持设置</td></tr><tr><td>Shift-空格</td><td>向上滚动</td></tr><tr><td>空格</td><td>向下滚动</td></tr></tbody></table><h1 id="编辑模式-按-enter-生效">编辑模式(按 <strong>Enter</strong> 生效)</h1><table><thead><tr><th>按键</th><th>功能</th></tr></thead><tbody><tr><td>Tab</td><td>代码完成或缩进</td></tr><tr><td>Shift-Tab</td><td>工具提示 <img src="/images/ExclamationMark.png" alt="">不知道有什么用</td></tr><tr><td>Ctrl-]</td><td>缩进</td></tr><tr><td>Ctrl-[</td><td>取消缩进</td></tr><tr><td>Ctrl-A</td><td>全选</td></tr><tr><td>Ctrl-Z</td><td>撤销</td></tr><tr><td>Ctrl-/</td><td>注释</td></tr><tr><td>Ctrl-D</td><td>删除整行</td></tr><tr><td>Ctrl-U</td><td>撤销</td></tr><tr><td>Insert</td><td>切换 重写标志</td></tr><tr><td>Ctrl-Home</td><td>跳到单元格起始处</td></tr><tr><td>Ctrl-上</td><td>跳到单元格起始处</td></tr><tr><td>Ctrl-End</td><td>跳到单元格最后</td></tr><tr><td>Ctrl-下</td><td>跳到单元格最后</td></tr><tr><td>Ctrl-左</td><td>跳到单词左边</td></tr><tr><td>Ctrl-右</td><td>跳到单词右边</td></tr><tr><td>Ctrl-backspace</td><td>删除前面的单词</td></tr><tr><td>Ctrl-Delete</td><td>删除后面的单词</td></tr><tr><td>Ctrl-Y</td><td>重做</td></tr><tr><td>Ctrl-M</td><td>进入命令行模式</td></tr><tr><td>Ctrl-Shift-F</td><td>打开命令配置 <img src="/images/ExclamationMark.png" alt="">Lab中失效了, 变成了隐藏侧边栏</td></tr><tr><td>Ctrl-Shift-P</td><td>打开命令配置 <img src="/images/ExclamationMark.png" alt="">Lab中失效了, 打印服务…</td></tr><tr><td>Esc</td><td>进入命令行模式</td></tr><tr><td>Alt-Enter</td><td>运行代码块并且插入下面</td></tr><tr><td>Ctrl-S</td><td>保存并检查</td></tr><tr><td>方向键下</td><td>光标下移</td></tr><tr><td>方向键上</td><td>光标上移</td></tr></tbody></table><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Fri Feb 15 2019 12:49:27 GMT+0800 (中国标准时间) --&gt;&lt;h1 id=&quot;前言&quot;&gt;前言&lt;/h1&gt;&lt;p&gt;Jupyter Notebook和Jupyter Lab还是挺像的, 但Jupyter Lab更像IDE多一点&lt;/p&gt;&lt;p&gt;虽说Jupyter Lab包含 Jupyter Notebook, 但是Jupyter Notebook的一些快捷键在 Jupyter Lab中用不了&lt;/p&gt;&lt;p&gt;&lt;strong&gt;以下均是Jupyter Notebook的快捷键, 会说明哪些在Jupyter Lab中失效了&lt;/strong&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Python" scheme="https://vonsdite.cn/categories/Python/"/>
    
      <category term="Jupyter" scheme="https://vonsdite.cn/categories/Python/Jupyter/"/>
    
    
      <category term="Python" scheme="https://vonsdite.cn/tags/Python/"/>
    
      <category term="Jupyter" scheme="https://vonsdite.cn/tags/Jupyter/"/>
    
  </entry>
  
  <entry>
    <title>conda 管理python包和环境</title>
    <link href="https://vonsdite.cn/posts/99747462.html"/>
    <id>https://vonsdite.cn/posts/99747462.html</id>
    <published>2019-01-08T12:44:37.000Z</published>
    <updated>2019-01-08T16:08:54.432Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Fri Feb 15 2019 12:49:27 GMT+0800 (中国标准时间) --><h1 id="前言">前言</h1><p>Conda 是一个开源的软件包管理系统和环境管理系统, 用于安装多个版本的软件包及其依赖关系, 并可在它们之间轻松切换。<br>Conda 是为 Python 程序创建的, 适用于 Linux, OS X 和Windows, 是目前最流行的 Python 环境管理工具</p><a id="more"></a><h1 id="管理包">管理包</h1><h2 id="conda-安装包">conda 安装包</h2><p>在终端中键入 <code>conda install [-n env_name] package_name</code><br>可以通过<code>[-n env_name]</code>指定要安装包的环境</p><p>例如, 要安装 numpy, 请键入 <code>conda install numpy</code>。</p><p>你还可以同时安装多个包。类似 <code>conda install numpy scipy pandas</code> 的命令会同时安装所有这些包。还可以通过添加版本号(例如 <code>conda install numpy=1.10</code>)来指定所需的包版本。</p><p>Conda 还会自动为你安装依赖项。例如, scipy 依赖于 numpy, 因为它使用并需要 numpy。如果你只安装 scipy (<code>conda install scipy</code>), 则 conda 还会安装 numpy(如果尚未安装的话)。</p><h3 id="添加国内源">添加国内源</h3><p>详情见: <a href="https://mirrors.tuna.tsinghua.edu.cn/help/anaconda/" target="_blank" rel="noopener">清华镜像 https://mirrors.tuna.tsinghua.edu.cn/help/anaconda/</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">conda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/free/</span><br><span class="line">conda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/main/</span><br><span class="line">conda config --set show_channel_urls yes</span><br></pre></td></tr></table></figure><h2 id="conda-删除包">conda 删除包</h2><p>在终端中键入 <code>conda remove [-n env_name] package_name</code><br>可以通过<code>[-n env_name]</code>指定要删除包的环境</p><h2 id="conda-更新包">conda 更新包</h2><p>在终端中键入 <code>conda update package_name</code></p><p>如果想更新环境中的所有包, 请使用 <code>conda update --all</code></p><h2 id="conda-列出包">conda 列出包</h2><p>在终端中键入 <code>conda list</code><br><img src="/images/2019-01-08-21-02-39.png" alt=""></p><h2 id="conda-搜索包">conda 搜索包</h2><p>在终端中键入 <code>conda search search_iterm</code></p><h1 id="管理环境">管理环境</h1><h2 id="conda-创建环境">conda 创建环境</h2><p>你可以使用 conda 创建环境以隔离项目。</p><p>要创建环境, 请在终端中使用 <code>conda create -n env_name [list of packages] [python=version]</code>。</p><p>创建具有特定 Python 版本的环境,<br>请键入类似于 <code>conda create -n py3 python=3</code> 或 <code>conda create -n py2 python=2</code> 的命令,<br>这些命令将<strong>分别安装</strong> Python 3 和 Python 2 的最新版本。<br>要安装特定版本(例如 Python 3.3), 请使用 <code>conda create -n py python=3.3</code>。</p><p>在这里,</p><blockquote><ul><li><code>-n env_name</code> 设置环境的名称(<strong>-n 是指名称</strong>),</li><li><code>list of packages</code> 是要安装在环境中的包的列表, 可不设置</li><li><code>python=version</code> version是指python版本, 一般都指定</li><li>只执行<code>conda create -n env_name</code>只会创建一个<strong>空的环境</strong>, 连python都没有, 运行的python是环境变量的python。需要装一个库后, 才会有python</li></ul></blockquote><p>例如, 要创建名为 my_env 的环境并在其中安装 numpy, 请键入 <code>conda create -n my_env numpy python=3.7</code>。<br><img src="/images/2019-01-08-21-25-55.png" alt=""></p><h2 id="conda-进入环境">conda 进入环境</h2><p>创建了环境后,<br>在 OSX/Linux 上使用 <code>source activate my_env</code> 进入环境<br>在 Windows 上, 请使用 <code>activate my_env</code></p><p><img src="/images/2019-01-08-21-38-35.png" alt=""></p><h2 id="conda-退出环境">conda 退出环境</h2><p>要离开环境,<br>在 OSX/Linux 上使用 <code>source deactivate</code><br>在 Windows 上, 请使用 <code>deactivate</code><br><img src="/images/2019-01-08-21-39-14.png" alt=""></p><h2 id="conda-查看环境">conda 查看环境</h2><p>终端键入 <code>conda info -e</code> 或 <code>conda info --env</code><br><img src="/images/2019-01-08-21-41-28.png" alt=""></p><h2 id="conda-删除环境">conda 删除环境</h2><p>终端键入 <code>conda remove -n env_name --all</code><br><img src="/images/2019-01-08-21-42-39.png" alt=""></p><h1 id="环境导出和导入">环境导出和导入</h1><h2 id="环境导出">环境导出</h2><p>使用 <code>conda env export &gt; environment.yaml</code> 将<strong>包信息</strong>保存为 YAML。<br>命令的第一部分 <code>conda env export</code> 用于输出环境中的所有包的名称(包括 Python 版本)。</p><h2 id="环境导入">环境导入</h2><p>要通过环境文件导入环境,<br>使用 <code>conda env create -f environment.yaml</code><br>这会创建一个新环境, 而且它具有同样的在 <code>environment.yaml</code> 中列出的库。</p><h1 id="其他">其他</h1><p><code>conda update conda # 检查更新当前conda</code><br><code>python -version # 检查当前环境python版本</code></p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Fri Feb 15 2019 12:49:27 GMT+0800 (中国标准时间) --&gt;&lt;h1 id=&quot;前言&quot;&gt;前言&lt;/h1&gt;&lt;p&gt;Conda 是一个开源的软件包管理系统和环境管理系统, 用于安装多个版本的软件包及其依赖关系, 并可在它们之间轻松切换。&lt;br&gt;Conda 是为 Python 程序创建的, 适用于 Linux, OS X 和Windows, 是目前最流行的 Python 环境管理工具&lt;/p&gt;
    
    </summary>
    
      <category term="Python" scheme="https://vonsdite.cn/categories/Python/"/>
    
      <category term="Anaconda" scheme="https://vonsdite.cn/categories/Python/Anaconda/"/>
    
    
      <category term="Python" scheme="https://vonsdite.cn/tags/Python/"/>
    
      <category term="Anaconda" scheme="https://vonsdite.cn/tags/Anaconda/"/>
    
  </entry>
  
  <entry>
    <title>Anaconda Navigator 简介</title>
    <link href="https://vonsdite.cn/posts/13d55c5e.html"/>
    <id>https://vonsdite.cn/posts/13d55c5e.html</id>
    <published>2019-01-08T12:14:24.000Z</published>
    <updated>2019-01-08T12:33:48.740Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Fri Feb 15 2019 12:49:27 GMT+0800 (中国标准时间) --><h1 id="简介">简介</h1><h2 id="anaconda-navigator">Anaconda Navigator</h2><p><strong>Anaconda Navigator</strong>: 是Anaconda Prompt的图形界面, 提供图形化显示和鼠标操作, 可以管理、安装更新第三方包等<br><img src="/images/2019-01-08-20-17-24.png" alt=""></p><a id="more"></a><h2 id="anaconda-prompt">Anaconda Prompt</h2><p><strong>Anaconda Prompt</strong>: 是一个Anaconda的终端, 类似cmd命令可以便捷操作conda环境, 可以建立不同的python版本环境如Python2和Python3<br><img src="/images/2019-01-08-20-18-27.png" alt=""></p><h2 id="ipython">IPython</h2><p><strong>IPython</strong>: 是一个 python 的交互式 shell, 比默认的python shell 好用得多, 支持<strong>变量自动补全</strong>(tab), 自动缩进, 支持 <code>bash shell</code> 命令, 内置了许多很有用的功能和函数。</p><p><img src="/images/2019-01-08-20-25-37.png" alt=""></p><ul><li>自动补全功能, 使用tab键, 如输入im后按tab键, 可自动补全import。</li><li>进入IPython, CMD中输入ipython</li><li>退出IPython, CMD中输入quit()</li></ul><h3 id="使用魔法指令">使用魔法指令%</h3><blockquote><ul><li><code>%run test.py</code> 直接运行python脚本</li><li><code>%pwd</code>: 显示当前工作目录。</li><li><code>%cd</code>: 切换工作目录。</li><li><code>%bookmark</code>: 工作目录书签</li></ul></blockquote><h3 id="使用快捷键">使用快捷键</h3><blockquote><ul><li><code>ctrl+u</code> 删除整行(光标在最后)</li><li><code>ctrl+k</code> 删除整行(光标在最前)</li><li><code>ctrl+l</code> 清空屏幕</li><li><code>ctrl+c</code> 中止运行程序</li><li><code>ctrl+e</code> 跳转到最后</li><li><code>ctrl+a</code> 跳转到第一行(与Windows热键冲突, 是全选)</li><li><code>ctrl+r</code> 反向搜索历史</li></ul></blockquote><h2 id="jupyter-notebook">Jupyter Notebook</h2><p><strong>Jupyter Notebook</strong>: 这得从<code>IPython3.x</code>版本开始说起, 这是最后的大一统版本, 包括notebook、qtconsole等等, 从IPython 4.0版本开始IPython只集中精力做交互式shell, 变得轻量化; 而剩下的notebook格式, qtconsole, 和notebook web应用等都分离出来统一命名为<strong>Jupyter</strong>,至此IPython和Jupyter分家。<strong>jupyter用网页浏览器打开, 以cell为单元运行, 可用cmd命令直接打开</strong>。</p><h3 id="jupyter的各种快捷键">Jupyter的各种快捷键</h3><blockquote><ul><li>执行当前cell, 并自动跳到下一个cell: <code>Shift Enter</code></li><li>执行当前cell, 执行后不自动调转到下一个cell: <code>Ctrl Enter</code></li><li>是当前的cell进入编辑模式:<code>Enter</code></li><li>退出当前cell的编辑模式: <code>Esc</code></li><li>删除当前的cell: <code>双D</code></li><li>为当前的cell加入line number: <code>单L</code></li><li>将当前的cell转化为具有一级标题的maskdown: <code>单1</code></li><li>将当前的cell转化为具有二级标题的maskdown: <code>单2</code></li><li>将当前的cell转化为具有三级标题的maskdown: <code>单3</code></li><li>为一行或者多行添加/取消注释: <code>Crtl /</code></li><li>撤销对某个cell的删除: <code>z</code></li><li>浏览器的各个Tab之间切换: <code>Crtl PgUp</code>和<code>Crtl PgDn</code></li><li>快速跳转到首个cell: <code>Crtl Home</code></li><li>快速跳转到最后一个cell: <code>Crtl End</code></li></ul></blockquote><h2 id="jupyter-qtconsole">Jupyter Qtconsole</h2><p><strong>Jupyter Qtconsole</strong>: 调用交互式命令台。从IPython4.0版本开始, 很多IPython子命令现在变成了Jupyter子命令, 如ipython notebook现在是jupyter noteboook。</p><h2 id="spyder">Spyder</h2><p>Spyder: 是一个使用Python语言的开放源代码跨平台科学运算IDE。Spyder可以跨平台, 也可以使用附加组件扩充, 自带交互式工具以处理数据。可以直接查看对象, 如果是多列还是彩色的, 相对来说便于分辨行列。</p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Fri Feb 15 2019 12:49:27 GMT+0800 (中国标准时间) --&gt;&lt;h1 id=&quot;简介&quot;&gt;简介&lt;/h1&gt;&lt;h2 id=&quot;anaconda-navigator&quot;&gt;Anaconda Navigator&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;Anaconda Navigator&lt;/strong&gt;: 是Anaconda Prompt的图形界面, 提供图形化显示和鼠标操作, 可以管理、安装更新第三方包等&lt;br&gt;&lt;img src=&quot;/images/2019-01-08-20-17-24.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Python" scheme="https://vonsdite.cn/categories/Python/"/>
    
      <category term="Anaconda" scheme="https://vonsdite.cn/categories/Python/Anaconda/"/>
    
    
      <category term="Python" scheme="https://vonsdite.cn/tags/Python/"/>
    
      <category term="Anaconda" scheme="https://vonsdite.cn/tags/Anaconda/"/>
    
  </entry>
  
  <entry>
    <title>解决hexo leancloud Too many requests 错误</title>
    <link href="https://vonsdite.cn/posts/416930d1.html"/>
    <id>https://vonsdite.cn/posts/416930d1.html</id>
    <published>2019-01-08T10:19:40.000Z</published>
    <updated>2019-01-08T10:44:05.853Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Fri Feb 15 2019 12:49:28 GMT+0800 (中国标准时间) --><h1 id="前言">前言</h1><p>LeanCloud可以统计Hexo文章的阅读次数, 但是有它的缺陷。<br>当你的文章数目逐渐变多的时候, 使用<code>hexo d</code>时, 经常会出现 Too many requests的错误。<br>原因是, 使用<strong>免费开发版</strong>Leancloud无法短时间内接受太多的请求, 所以会导致429错误。<br><img src="/images/2019-01-08-18-37-36.png" alt=""></p><a id="more"></a><h1 id="官方解释">官方解释</h1><blockquote><p>信息 - Too many requests.<br>含义 - 超过应用的流控限制, 即超过每个应用同一时刻最多可使用的工作线程数, 或者说同一时刻最多可以同时处理的数据请求。通过 控制台 &gt; 存储 &gt; API 统计 &gt; API 性能 &gt; 总览 可以查看应用产生的请求统计数据, 如平均工作线程、平均响应时间等。使用 LeanCloud 商用版或企业版 的用户, 如有需要, 可以联系我们来调整工作线程数。</p></blockquote><h1 id="原因">原因</h1><p>查看源代码, <code>node_modules\hexo-leancloud-counter-security\index.js</code>, 发现每次进行<code>hexo d</code>的时候, 他对每个博文的title和url, 向leancloud发送一次查询请求, 如果发现leancloud那边儿没有该条记录的话, 那么再发送一条插入请求。<br>原逻辑如下:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">_.forEach(urls, <span class="function"><span class="keyword">function</span> (<span class="params">x</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> query = <span class="keyword">new</span> AV.Query(<span class="string">'Counter'</span>);</span><br><span class="line">    query.equalTo(<span class="string">'url'</span>, x.url);</span><br><span class="line">    query.count().then(<span class="function"><span class="keyword">function</span> (<span class="params">count</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (count === <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">var</span> counter = <span class="keyword">new</span> Counter();</span><br><span class="line">            counter.set(<span class="string">'url'</span>, x.url);</span><br><span class="line">            counter.set(<span class="string">'title'</span>, x.title);</span><br><span class="line">            counter.set(<span class="string">'time'</span>, <span class="number">0</span>);</span><br><span class="line">            counter.save().then(<span class="function"><span class="keyword">function</span> (<span class="params">obj</span>) </span>&#123;</span><br><span class="line">                log.info(x.title + <span class="string">' is saved as: '</span> + obj.id);</span><br><span class="line">            &#125;, <span class="function"><span class="keyword">function</span> (<span class="params">error</span>) </span>&#123;</span><br><span class="line">                log.error(error);</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;, <span class="function"><span class="keyword">function</span> (<span class="params">error</span>) </span>&#123;</span><br><span class="line">        log.error(error);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>就是说, 每一次<code>hexo d</code>的时候最少的查询次数等于你的博文个数。如果你的leancloud的应用的处理能力不够强大的时候, 对于这种高强度的请求, 当然会出现Too Many Requests的错误代码。</p><p>我们要做的就是较少不必要的请求咯。<br>本地记录一个title和url的json数组, 每次查询这个数组, 看看哪些是真正的需要查询的, 然后再去查询leancloud。其实可以这样理解, 这个本地的数组存储就是leancloud的远程数据库表。<br>因为筛除了一些记录, 所以每次hexo d时的请求数量仅仅是相比上一次hexo d时候的增量。</p><h1 id="修改代码">修改代码</h1><p>修改<code>node_modules\hexo-leancloud-counter-security\index.js</code>这个文件, 修改处代码均有注释, 往下翻就可以看到了</p><details><summary>展开代码</summary><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">'use strict'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> _regenerator = <span class="built_in">require</span>(<span class="string">'babel-runtime/regenerator'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> _regenerator2 = _interopRequireDefault(_regenerator);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> _asyncToGenerator2 = <span class="built_in">require</span>(<span class="string">'babel-runtime/helpers/asyncToGenerator'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> _stringify = <span class="built_in">require</span>(<span class="string">'babel-runtime/core-js/json/stringify'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> _stringify2 = _interopRequireDefault(_stringify);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> sync = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> _ref = (<span class="number">0</span>, _asyncToGenerator3.default)( <span class="comment">/*#__PURE__*/</span>_regenerator2.default.mark(<span class="function"><span class="keyword">function</span> _callee(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> log, config, APP_ID, APP_KEY, publicDir, UrlsFile, urls, currentUser, userName, passWord, Counter;</span><br><span class="line">        <span class="keyword">return</span> _regenerator2.default.wrap(<span class="function"><span class="keyword">function</span> _callee$(<span class="params">_context</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">while</span> (<span class="number">1</span>) &#123;</span><br><span class="line">                <span class="keyword">switch</span> (_context.prev = _context.next) &#123;</span><br><span class="line">                    <span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">                        log = <span class="keyword">this</span>.log;</span><br><span class="line">                        config = <span class="keyword">this</span>.config;</span><br><span class="line"></span><br><span class="line">                        <span class="keyword">if</span> (!config.leancloud_counter_security.enable_sync) &#123;</span><br><span class="line">                            _context.next = <span class="number">19</span>;</span><br><span class="line">                            <span class="keyword">break</span>;</span><br><span class="line">                        &#125;</span><br><span class="line"></span><br><span class="line">                        APP_ID = config.leancloud_counter_security.app_id;</span><br><span class="line">                        APP_KEY = config.leancloud_counter_security.app_key;</span><br><span class="line">                        publicDir = <span class="keyword">this</span>.public_dir;</span><br><span class="line">                        UrlsFile = pathFn.join(publicDir, <span class="string">'leancloud_counter_security_urls.json'</span>);</span><br><span class="line">                        urls = <span class="built_in">JSON</span>.parse(fs.readFileSync(UrlsFile, <span class="string">'utf8'</span>));</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">                        AV.init(&#123;</span><br><span class="line">                            appId: APP_ID,</span><br><span class="line">                            appKey: APP_KEY</span><br><span class="line">                        &#125;);</span><br><span class="line"></span><br><span class="line">                        currentUser = AV.User.current();</span><br><span class="line"></span><br><span class="line">                        <span class="keyword">if</span> (currentUser) &#123;</span><br><span class="line">                            _context.next = <span class="number">16</span>;</span><br><span class="line">                            <span class="keyword">break</span>;</span><br><span class="line">                        &#125;</span><br><span class="line"></span><br><span class="line">                        userName = config.leancloud_counter_security.username;</span><br><span class="line">                        passWord = config.leancloud_counter_security.password;</span><br><span class="line"></span><br><span class="line">                        <span class="keyword">if</span> (!userName) &#123;</span><br><span class="line">                            userName = readlineSync.question(<span class="string">'Enter your username: '</span>);</span><br><span class="line">                            passWord = readlineSync.question(<span class="string">'Enter your password: '</span>, &#123; <span class="attr">hideEchoBack</span>: <span class="literal">true</span> &#125;);</span><br><span class="line">                        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (!passWord) &#123;</span><br><span class="line">                            passWord = readlineSync.question(<span class="string">'Enter your password: '</span>, &#123; <span class="attr">hideEchoBack</span>: <span class="literal">true</span> &#125;);</span><br><span class="line">                        &#125;</span><br><span class="line">                        _context.next = <span class="number">16</span>;</span><br><span class="line">                        <span class="keyword">return</span> AV.User.logIn(userName, passWord).then(<span class="function"><span class="keyword">function</span> (<span class="params">loginedUser</span>) </span>&#123;</span><br><span class="line">                            log.info(<span class="string">'Logined as: '</span> + loginedUser.getUsername());</span><br><span class="line">                        &#125;, <span class="function"><span class="keyword">function</span> (<span class="params">error</span>) </span>&#123;</span><br><span class="line">                            log.error(error);</span><br><span class="line">                        &#125;);</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">case</span> <span class="number">16</span>:</span><br><span class="line"></span><br><span class="line">                        log.info(<span class="string">'Now syncing your posts list to leancloud counter...'</span>);</span><br><span class="line">                        Counter = AV.Object.extend(<span class="string">'Counter'</span>);</span><br><span class="line"></span><br><span class="line">                        <span class="comment">//----add----</span></span><br><span class="line">                        urls.sort(cmp);</span><br><span class="line"></span><br><span class="line">                        <span class="keyword">var</span> memoFile = pathFn.join(publicDir, <span class="string">"leancloud_memo.json"</span>);</span><br><span class="line">                        <span class="keyword">if</span>(!fs.existsSync(memoFile))&#123;</span><br><span class="line">                            fs.writeFileSync(memoFile, <span class="string">"[\n]"</span>);</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">var</span> memoData = fs.readFileSync(memoFile, <span class="string">"utf-8"</span>).split(<span class="string">"\n"</span>);</span><br><span class="line">                        <span class="keyword">var</span> memoIdx = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">                        <span class="keyword">var</span> newData = [];</span><br><span class="line">                        <span class="keyword">var</span> cnt = <span class="number">0</span>;</span><br><span class="line">                        <span class="keyword">var</span> limit = <span class="number">0</span>;</span><br><span class="line">                        <span class="keyword">var</span> env = <span class="keyword">this</span>;</span><br><span class="line">                        <span class="comment">//----end----</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">                        _.forEach(urls, <span class="function"><span class="keyword">function</span> (<span class="params">x</span>) </span>&#123;</span><br><span class="line">                            <span class="comment">//----add----</span></span><br><span class="line">                            <span class="keyword">var</span> y = &#123;&#125;;</span><br><span class="line">                            y.title = <span class="string">""</span>;</span><br><span class="line">                            y.url = <span class="string">""</span>;</span><br><span class="line"></span><br><span class="line">                            <span class="keyword">var</span> flag = <span class="literal">false</span>;</span><br><span class="line">                            <span class="keyword">while</span>(<span class="literal">true</span>)&#123;</span><br><span class="line">                                <span class="keyword">if</span>(memoData[memoIdx] == <span class="string">']'</span>) <span class="keyword">break</span>;</span><br><span class="line">                                y = <span class="built_in">JSON</span>.parse(memoData[memoIdx].substring(<span class="number">0</span>, memoData[memoIdx].length<span class="number">-1</span>));</span><br><span class="line">                                <span class="keyword">if</span>(y.url &gt; x.url) <span class="keyword">break</span>;</span><br><span class="line">                                <span class="keyword">if</span>(y.url == x.url &amp;&amp; y.title == x.title)&#123;</span><br><span class="line">                                    flag = <span class="literal">true</span>;</span><br><span class="line">                                    <span class="keyword">break</span>;</span><br><span class="line">                                &#125;</span><br><span class="line">                                memoIdx++;</span><br><span class="line">                            &#125;</span><br><span class="line">                            <span class="keyword">if</span>(!flag) &#123;</span><br><span class="line">                                log.info(<span class="string">"Dealing with record of "</span> + x.title);</span><br><span class="line">                                limit++;</span><br><span class="line">                                <span class="comment">//----end----</span></span><br><span class="line">                                <span class="keyword">var</span> query = <span class="keyword">new</span> AV.Query(<span class="string">'Counter'</span>);</span><br><span class="line">                                query.equalTo(<span class="string">'url'</span>, x.url);</span><br><span class="line">                                query.count().then(<span class="function"><span class="keyword">function</span> (<span class="params">count</span>) </span>&#123;</span><br><span class="line">                                    <span class="keyword">if</span> (count === <span class="number">0</span>) &#123;</span><br><span class="line">                                        <span class="keyword">var</span> counter = <span class="keyword">new</span> Counter();</span><br><span class="line">                                        counter.set(<span class="string">'url'</span>, x.url);</span><br><span class="line">                                        counter.set(<span class="string">'title'</span>, x.title);</span><br><span class="line">                                        counter.set(<span class="string">'time'</span>, <span class="number">0</span>);</span><br><span class="line">                                        counter.save().then(<span class="function"><span class="keyword">function</span> (<span class="params">obj</span>) </span>&#123;</span><br><span class="line">                                            log.info(x.title + <span class="string">' is saved as: '</span> + obj.id);</span><br><span class="line">                                            <span class="comment">//----add----</span></span><br><span class="line">                                            newData.push(x);</span><br><span class="line">                                            cnt++;</span><br><span class="line">                                            postOperation(env, cnt, limit, newData, memoData);</span><br><span class="line">                                            <span class="comment">//----end----</span></span><br><span class="line"></span><br><span class="line">                                        &#125;, <span class="function"><span class="keyword">function</span> (<span class="params">error</span>) </span>&#123;</span><br><span class="line">                                            log.error(error);</span><br><span class="line">                                            <span class="comment">//----add----</span></span><br><span class="line">                                            cnt++;</span><br><span class="line">                                            postOperation(env, cnt, limit, newData, memoData);</span><br><span class="line">                                            <span class="comment">//----end----</span></span><br><span class="line">                                        &#125;);</span><br><span class="line">                                    &#125;</span><br><span class="line">                                    <span class="comment">//----add----</span></span><br><span class="line">                                    <span class="keyword">else</span>&#123;</span><br><span class="line">                                        newData.push(x);</span><br><span class="line">                                        cnt++;</span><br><span class="line">                                        postOperation(env, cnt, limit, newData, memoData);</span><br><span class="line">                                    &#125;</span><br><span class="line">                                    <span class="comment">//----end----</span></span><br><span class="line"></span><br><span class="line">                                &#125;, <span class="function"><span class="keyword">function</span> (<span class="params">error</span>) </span>&#123;</span><br><span class="line">                                    log.error(error);</span><br><span class="line">                                    <span class="comment">//----add----</span></span><br><span class="line">                                    cnt++;</span><br><span class="line">                                    postOperation(env, cnt, limit, newData, memoData);</span><br><span class="line">                                    <span class="comment">//----end----</span></span><br><span class="line">                                &#125;);</span><br><span class="line">                            <span class="comment">//----add----</span></span><br><span class="line">                            &#125;</span><br><span class="line">                            <span class="comment">//----end----</span></span><br><span class="line">                        &#125;);</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">case</span> <span class="number">19</span>:</span><br><span class="line">                    <span class="keyword">case</span> <span class="string">'end'</span>:</span><br><span class="line">                        <span class="keyword">return</span> _context.stop();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, _callee, <span class="keyword">this</span>);</span><br><span class="line">    &#125;));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> <span class="title">sync</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> _ref.apply(<span class="keyword">this</span>, <span class="built_in">arguments</span>);</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;();</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> _interopRequireDefault(<span class="params">obj</span>) </span>&#123; <span class="keyword">return</span> obj &amp;&amp; obj.__esModule ? obj : &#123; <span class="attr">default</span>: obj &#125;; &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> AV = <span class="built_in">require</span>(<span class="string">'leancloud-storage'</span>);</span><br><span class="line"><span class="keyword">var</span> _ = <span class="built_in">require</span>(<span class="string">'lodash'</span>);</span><br><span class="line"><span class="keyword">var</span> readlineSync = <span class="built_in">require</span>(<span class="string">'readline-sync'</span>);</span><br><span class="line"><span class="keyword">var</span> packageInfo = <span class="built_in">require</span>(<span class="string">'./package.json'</span>);</span><br><span class="line"><span class="keyword">var</span> pathFn = <span class="built_in">require</span>(<span class="string">'path'</span>);</span><br><span class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">generate_post_list</span>(<span class="params">locals</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> config = <span class="keyword">this</span>.config;</span><br><span class="line">    <span class="keyword">if</span> (config.leancloud_counter_security.enable_sync) &#123;</span><br><span class="line">        <span class="keyword">var</span> urlsPath = <span class="string">'leancloud_counter_security_urls.json'</span>;</span><br><span class="line">        <span class="keyword">var</span> urls = [].concat(locals.posts.toArray()).filter(<span class="function"><span class="keyword">function</span> (<span class="params">x</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> x.published;</span><br><span class="line">        &#125;).map(<span class="function"><span class="keyword">function</span> (<span class="params">x</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> &#123;</span><br><span class="line">                title: x.title,</span><br><span class="line">                url: config.root + x.path</span><br><span class="line">            &#125;;</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            path: urlsPath,</span><br><span class="line">            data: (<span class="number">0</span>, _stringify2.default)(urls)</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">hexo.extend.generator.register(<span class="string">'leancloud_counter_security_generator'</span>, generate_post_list);</span><br><span class="line"></span><br><span class="line">hexo.extend.deployer.register(<span class="string">'leancloud_counter_security_sync'</span>, sync);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> commandOptions = &#123;</span><br><span class="line">    desc: packageInfo.description,</span><br><span class="line">    usage: <span class="string">' &lt;argument&gt;'</span>,</span><br><span class="line">    <span class="string">'arguments'</span>: [&#123;</span><br><span class="line">        <span class="string">'name'</span>: <span class="string">'register | r &lt;username&gt; &lt;password&gt;'</span>,</span><br><span class="line">        <span class="string">'desc'</span>: <span class="string">'Register a new user.'</span></span><br><span class="line">    &#125;]</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">commandFunc</span>(<span class="params">args</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> log = <span class="keyword">this</span>.log;</span><br><span class="line">    <span class="keyword">var</span> config = <span class="keyword">this</span>.config;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (args._.length !== <span class="number">3</span>) &#123;</span><br><span class="line">        log.error(<span class="string">'Too Few or Many Arguments.'</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (args._[<span class="number">0</span>] === <span class="string">'register'</span> || args._[<span class="number">0</span>] === <span class="string">'r'</span>) &#123;</span><br><span class="line">        <span class="keyword">var</span> APP_ID = config.leancloud_counter_security.app_id;</span><br><span class="line">        <span class="keyword">var</span> APP_KEY = config.leancloud_counter_security.app_key;</span><br><span class="line">        AV.init(&#123;</span><br><span class="line">            appId: APP_ID,</span><br><span class="line">            appKey: APP_KEY</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> user = <span class="keyword">new</span> AV.User();</span><br><span class="line">        user.setUsername(<span class="built_in">String</span>(args._[<span class="number">1</span>]));</span><br><span class="line">        user.setPassword(<span class="built_in">String</span>(args._[<span class="number">2</span>]));</span><br><span class="line">        user.signUp().then(<span class="function"><span class="keyword">function</span> (<span class="params">loginedUser</span>) </span>&#123;</span><br><span class="line">            log.info(loginedUser.getUsername() + <span class="string">' is successfully signed up'</span>);</span><br><span class="line">        &#125;, <span class="function"><span class="keyword">function</span> (<span class="params">error</span>) </span>&#123;</span><br><span class="line">            log.error(error);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        log.error(<span class="string">'Unknown Command.'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">hexo.extend.console.register(<span class="string">'lc-counter'</span>, <span class="string">'hexo-leancloud-counter-security'</span>, commandOptions, commandFunc);</span><br><span class="line"><span class="comment">//----add----</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">cmp</span>(<span class="params">x, y</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(x.url &lt; y.url)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(x.url == y.url)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> postOperation = <span class="function"><span class="keyword">function</span> (<span class="params">env, cnt, limit, newData, memoData</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(cnt == limit)&#123;</span><br><span class="line">        <span class="keyword">var</span> log = env.log;</span><br><span class="line">        newData.sort(cmp);</span><br><span class="line">        <span class="keyword">var</span> sourceDir = env.source_dir;</span><br><span class="line">        <span class="keyword">var</span> publicDir = env.public_dir;</span><br><span class="line">        <span class="keyword">var</span> memoFile = pathFn.join(sourceDir, <span class="string">"leancloud_memo.json"</span>);</span><br><span class="line">        fs.writeFileSync(memoFile, <span class="string">"[\n"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> memoIdx = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; newData[i]; i++)&#123;</span><br><span class="line">            <span class="keyword">while</span>(<span class="literal">true</span>)&#123;</span><br><span class="line">                <span class="keyword">if</span>(memoData[memoIdx] == <span class="string">']'</span>) <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">var</span> y = <span class="built_in">JSON</span>.parse(memoData[memoIdx].substring(<span class="number">0</span>, memoData[memoIdx].length<span class="number">-1</span>));</span><br><span class="line">                <span class="keyword">if</span>(y.url &gt; newData[i].url) <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">                fs.writeFileSync(memoFile, memoData[memoIdx] + <span class="string">"\n"</span>, &#123;<span class="string">'flag'</span>:<span class="string">'a'</span>&#125;);</span><br><span class="line">                memoIdx++;</span><br><span class="line">            &#125;</span><br><span class="line">            fs.writeFileSync(memoFile, <span class="string">"&#123;\"title\":\""</span> + newData[i].title + <span class="string">"\",\"url\":\""</span> + newData[i].url + <span class="string">"\"&#125;,\n"</span>, &#123;<span class="string">'flag'</span>:<span class="string">'a'</span>&#125;);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span>(memoData[memoIdx] != <span class="string">']'</span>)&#123;</span><br><span class="line">            fs.writeFileSync(memoFile, memoData[memoIdx] + <span class="string">"\n"</span>, &#123;<span class="string">'flag'</span>:<span class="string">'a'</span>&#125;);</span><br><span class="line">            memoIdx++;</span><br><span class="line">        &#125;</span><br><span class="line">        fs.writeFileSync(memoFile, memoData[memoIdx], &#123;<span class="string">'flag'</span>:<span class="string">'a'</span>&#125;);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> srcFile = pathFn.join(sourceDir, <span class="string">"leancloud_memo.json"</span>);</span><br><span class="line">        <span class="keyword">var</span> destFile = pathFn.join(publicDir, <span class="string">"leancloud_memo.json"</span>);</span><br><span class="line">        <span class="keyword">var</span> readStream = fs.createReadStream(srcFile);</span><br><span class="line">        <span class="keyword">var</span> writeStream = fs.createWriteStream(destFile);</span><br><span class="line">        readStream.pipe(writeStream);</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"leancloud_memo.json successfully updated."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></details><p>修改完后, 还需要打开博客配置文件<code>_config.yml</code>找到<code>skip_render:</code>这一项，然后加上<code>leancloud_memo.json</code>。</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">skip_render:</span> </span><br><span class="line"><span class="bullet">  -</span> <span class="string">leancloud_memo.json</span></span><br></pre></td></tr></table></figure><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Fri Feb 15 2019 12:49:28 GMT+0800 (中国标准时间) --&gt;&lt;h1 id=&quot;前言&quot;&gt;前言&lt;/h1&gt;&lt;p&gt;LeanCloud可以统计Hexo文章的阅读次数, 但是有它的缺陷。&lt;br&gt;当你的文章数目逐渐变多的时候, 使用&lt;code&gt;hexo d&lt;/code&gt;时, 经常会出现 Too many requests的错误。&lt;br&gt;原因是, 使用&lt;strong&gt;免费开发版&lt;/strong&gt;Leancloud无法短时间内接受太多的请求, 所以会导致429错误。&lt;br&gt;&lt;img src=&quot;/images/2019-01-08-18-37-36.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Hexo" scheme="https://vonsdite.cn/categories/Hexo/"/>
    
      <category term="Next" scheme="https://vonsdite.cn/categories/Hexo/Next/"/>
    
    
      <category term="Hexo" scheme="https://vonsdite.cn/tags/Hexo/"/>
    
      <category term="Next" scheme="https://vonsdite.cn/tags/Next/"/>
    
      <category term="Leancloud" scheme="https://vonsdite.cn/tags/Leancloud/"/>
    
  </entry>
  
  <entry>
    <title>K-Means 算法实现, 动态显示变化</title>
    <link href="https://vonsdite.cn/posts/b62ef61c.html"/>
    <id>https://vonsdite.cn/posts/b62ef61c.html</id>
    <published>2019-01-08T07:07:57.000Z</published>
    <updated>2019-01-08T06:36:58.873Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Fri Feb 15 2019 12:49:27 GMT+0800 (中国标准时间) --><h1 id="项目介绍">项目介绍</h1><p><strong>源代码: <a href="https://github.com/VonSdite/K-Means" target="_blank" rel="noopener">https://github.com/VonSdite/K-Means</a></strong><br><strong>使用前记得先安装相关的包</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install -r requirement.txt</span><br></pre></td></tr></table></figure><h2 id="以本项目为例">以本项目为例</h2><ol><li>先运行<code>dataClean.py</code>程序, 对数据<code>iris.data</code>做处理, 得到<code>iris.csv</code>以及真实的分类图<br><img src="/images/2.png" alt=""></li></ol><a id="more"></a><blockquote><p><code>iris.data</code>是鸢尾花数据集, 包含3个不同品种的鸢尾花(Setosa, Versicolour, and Virginica)数据, 以及花瓣和萼片的长度、宽度。 数据有150行4列, 150行指150朵花, 4列分别是Sepal Length(萼片长度), Sepal Width(萼片宽度), Petal Length(花瓣长度) and Petal Width(花瓣宽度)</p></blockquote><ol start="2"><li>运行<code>main.py</code></li></ol><p><img src="/images/1.png" alt=""></p><ol start="3"><li>点击 <code>打开</code>-<code>open file</code>, 打开csv文件(也只能打开csv文件)</li></ol><p><strong>注意csv文件的要求:</strong></p><ul><li>要带有表头</li><li>数据是两列数值数据, 所以需要先处理数据<br>数据格式类似如下</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">x,y</span><br><span class="line">1,1</span><br><span class="line">2,3</span><br><span class="line">4,5</span><br></pre></td></tr></table></figure><ol start="4"><li><p>打开后, 会先绘制出数据的散点图<br><img src="/images/3.png" alt=""></p></li><li><p>输入<code>分类个数k</code>-点击<code>分类</code>, 分类过程如下</p></li></ol><p>分类过程中, <strong>左下角状态栏</strong>会显示<strong>当前的状态</strong><br><img src="/images/4.gif" alt=""></p><h2 id="分类结果比较">分类结果比较</h2><p><img src="/images/6.jpg" alt=""></p><p><strong>分析</strong></p><p>因为数据只用到了<strong>萼片的宽度和长度</strong>, 只做了二维数据的<code>k-means</code>, 所以对于区分<strong>1类</strong>和<strong>2类花朵</strong>的效果还没达到完全区分的效果, 但是已经能万全区分<strong>0类花朵</strong>了</p><p>提升方面, 提升维度, 把花瓣的宽度和长度也考虑进去, 可能可以更好的区分</p><h1 id="k-means介绍">K-Means介绍</h1><h2 id="概述">概述</h2><p><code>K-means算法</code>是集简单和经典于一身的<strong>基于距离</strong>的聚类算法</p><p>采用距离作为相似性的评价指标, 即认为两个对象的距离越近, 其相似度就越大。</p><p>该算法认为类簇是由距离靠近的对象组成的, 因此把得到<strong>紧凑且独立</strong>的簇作为最终目标。</p><h2 id="核心思想">核心思想</h2><p>通过迭代寻找k个类簇的一种划分方案, 使得用这k个类簇的均值来代表相应各类样本时所得的总体误差最小。</p><p>k个聚类具有以下特点：各聚类本身尽可能的紧凑, 而各聚类之间尽可能的分开。</p><p>k-means算法的基础是最小误差平方和准则,</p><p>其代价函数是：<br><img src="/images/6.png" alt=""> 式中, μc(i)表示第i个聚类的均值。</p><p>各类簇内的样本越相似, 其与该类均值间的误差平方越小, 对所有类所得到的误差平方求和, 即可验证分为k类时, 各聚类是否是最优的。</p><p>上式的代价函数无法用解析的方法最小化, 只能有迭代的方法。</p><h2 id="算法实现步骤">算法实现步骤</h2><p>k-means算法是将样本聚类成 k个簇(cluster), 其中k是用户给定的, 其求解过程非常直观简单, 具体算法描述如下：</p><ol><li><p>随机选取 k个聚类质心点</p></li><li><p>重复下面过程直到收敛 {</p></li></ol><p>对于每一个样例 i, 计算其应该属于的类：<br><img src="/images/7.png" alt=""></p><p>对于每一个类 j, 重新计算该类的质心：<br><img src="/images/8.png" alt=""><br>}</p><p>其伪代码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">创建k个点作为初始的质心点(随机选择)</span><br><span class="line"></span><br><span class="line">当任意一个点的簇分配结果发生改变时</span><br><span class="line"></span><br><span class="line">       对数据集中的每一个数据点</span><br><span class="line"></span><br><span class="line">              对每一个质心</span><br><span class="line"></span><br><span class="line">                     计算质心与数据点的距离</span><br><span class="line"></span><br><span class="line">              将数据点分配到距离最近的簇</span><br><span class="line"></span><br><span class="line">       对每一个簇, 计算簇中所有点的均值, 并将均值作为质心</span><br></pre></td></tr></table></figure><h2 id="k-means算法补充">K-means算法补充</h2><p>K-means算法的缺点及改进方法</p><p>(1)k值的选择是用户指定的,不同的k得到的结果会有挺大的不同,如下图所示,左边是k=3的结果,这个就太稀疏了,蓝色的那个簇其实是可以再划分成两个簇的。而右图是k=5的结果,可以看到红色菱形和蓝色菱形这两个簇应该是可以合并成一个簇的：</p><p>改进：</p><p>对k的选择可以先用一些算法分析数据的分布,如重心和密度等,然后选择合适的k</p><p><img src="/images/9.png" alt=""></p><p>(2)对k个<strong>初始质心</strong>的选择比较敏感,容易陷入<strong>局部最小值</strong>。例如,我们上面的算法运行的时候,有可能会得到不同的结果,如下面这两种情况。K-means也是收敛了,只是收敛到了局部最小值：</p><p>改进：<br>有人提出了另一个成为二分k均值(bisecting k-means)算法,它对初始的k个质心的选择就不太敏感</p><p><img src="/images/10.png" alt=""></p><p>(3)存在局限性,如下面这种非球状的数据分布就搞不定了：</p><p><img src="/images/11.png" alt=""></p><p>(4)数据集<strong>比较大</strong>的时候,收敛会<strong>比较慢</strong>。</p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Fri Feb 15 2019 12:49:27 GMT+0800 (中国标准时间) --&gt;&lt;h1 id=&quot;项目介绍&quot;&gt;项目介绍&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;源代码: &lt;a href=&quot;https://github.com/VonSdite/K-Means&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://github.com/VonSdite/K-Means&lt;/a&gt;&lt;/strong&gt;&lt;br&gt;&lt;strong&gt;使用前记得先安装相关的包&lt;/strong&gt;&lt;/p&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;pip install -r requirement.txt&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h2 id=&quot;以本项目为例&quot;&gt;以本项目为例&lt;/h2&gt;&lt;ol&gt;&lt;li&gt;先运行&lt;code&gt;dataClean.py&lt;/code&gt;程序, 对数据&lt;code&gt;iris.data&lt;/code&gt;做处理, 得到&lt;code&gt;iris.csv&lt;/code&gt;以及真实的分类图&lt;br&gt;&lt;img src=&quot;/images/2.png&quot; alt=&quot;&quot;&gt;&lt;/li&gt;&lt;/ol&gt;
    
    </summary>
    
      <category term="Python" scheme="https://vonsdite.cn/categories/Python/"/>
    
      <category term="KMeans" scheme="https://vonsdite.cn/categories/Python/KMeans/"/>
    
    
      <category term="Python" scheme="https://vonsdite.cn/tags/Python/"/>
    
      <category term="KMeans" scheme="https://vonsdite.cn/tags/KMeans/"/>
    
  </entry>
  
  <entry>
    <title>vi/vim 字符出现次数统计</title>
    <link href="https://vonsdite.cn/posts/205709c1.html"/>
    <id>https://vonsdite.cn/posts/205709c1.html</id>
    <published>2019-01-03T11:22:45.000Z</published>
    <updated>2019-01-12T10:58:49.229Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Fri Feb 15 2019 12:49:27 GMT+0800 (中国标准时间) --><h1 id="vi-vim统计字符出现次数">Vi/Vim统计字符出现次数</h1><p>将被统计的文本内容如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"> network. 1network net work Networked NETWORK</span><br><span class="line"> network 1network net work Networked NETWORK</span><br><span class="line">networked</span><br><span class="line">network network,hello worldk</span><br></pre></td></tr></table></figure><a id="more"></a><h2 id="全词匹配">全词匹配</h2><p>只统计&quot;network&quot;这个单词出现的次数</p><p>vi进入ex模式, 键入如下的命令</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">:%s/\&lt;network\&gt;//gn</span><br></pre></td></tr></table></figure><p><img src="/images/2019-01-03-19-36-59.png" alt=""></p><p>由图可知, 共<strong>匹配到4次</strong>, 而且我们知道单词<strong>network后面跟 &quot;.&quot; &quot;,&quot;</strong>, 它依旧是 network单词, 均被匹配到了</p><p><strong>解释</strong></p><blockquote><ul><li><strong>%</strong> 指明操作区间, **%**表示全文本; 可以使用1,$或者行区间代替</li><li><strong>n</strong> 统计字符的个数, 替换操作不会被执行</li><li><strong>g</strong> 所有满足匹配的字符</li><li><strong>&quot;\&gt;&quot;</strong> 是一个特殊的记号, 表示只匹配单词<strong>末尾</strong>。类似地, <strong>&quot;&lt;&quot;</strong> 只匹配单词的<strong>开头</strong>。</li></ul></blockquote><h2 id="字符串匹配">字符串匹配</h2><p>统计&quot;network&quot;这个字符串出现的次数<br>vi进入ex模式, 键入如下的命令</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">:%s/network//gn</span><br></pre></td></tr></table></figure><p><img src="/images/2019-01-03-19-41-36.png" alt=""><br>由图可知, 共<strong>匹配到7次</strong>。<br>字符串匹配, 只要有&quot;network&quot;这个字符串出现, 则就算一次匹配了。</p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Fri Feb 15 2019 12:49:27 GMT+0800 (中国标准时间) --&gt;&lt;h1 id=&quot;vi-vim统计字符出现次数&quot;&gt;Vi/Vim统计字符出现次数&lt;/h1&gt;&lt;p&gt;将被统计的文本内容如下&lt;/p&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt; network. 1network net work Networked NETWORK&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; network 1network net work Networked NETWORK&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;networked&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;network network,hello worldk&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="Linux" scheme="https://vonsdite.cn/categories/Linux/"/>
    
      <category term="Vim" scheme="https://vonsdite.cn/categories/Linux/Vim/"/>
    
    
      <category term="Linux" scheme="https://vonsdite.cn/tags/Linux/"/>
    
      <category term="Vim" scheme="https://vonsdite.cn/tags/Vim/"/>
    
  </entry>
  
  <entry>
    <title>makefile 介绍与编写(四) 伪目标</title>
    <link href="https://vonsdite.cn/posts/a08b2a98.html"/>
    <id>https://vonsdite.cn/posts/a08b2a98.html</id>
    <published>2019-01-02T14:00:20.000Z</published>
    <updated>2019-01-02T14:31:05.550Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Fri Feb 15 2019 12:49:27 GMT+0800 (中国标准时间) --><h1 id="前言">前言</h1><p><strong>摘录于 《跟我一起写makefile》</strong></p><p>本文主要开始介绍<strong>makefile</strong>的伪目标。</p><a id="more"></a><h1 id="伪目标">伪目标</h1><p>最早先的一个例子中, 我们提到过一个&quot;clean&quot;的目标, 这是一个&quot;伪目标&quot;,</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">clean:</span></span><br><span class="line">    rm *.o temp</span><br></pre></td></tr></table></figure><p>正像我们前面例子中的&quot;clean&quot;一样, 即然我们生成了许多文件编译文件, 我们也应该提供一个清除它们的&quot;目标&quot;以备完整地重编译而用。 (以&quot;make clean&quot;来使用该目标)<br>因为, 我们并不生成&quot;clean&quot;这个文件。&quot;伪目标&quot;并不是一个文件, 只是一个标签。由于&quot;伪目标&quot;不是文件, 所以 make 无法生成它的依赖关系和决定它是否要执行。我们只有通过显示地指明这个&quot;目标&quot;才能让其生效。当然, &quot;伪目标&quot;的取名不能和文件名重名, 不然其就失去了&quot;伪目标&quot;的意义了。</p><p>当然, 为了避免和文件重名的这种情况, 我们可以使用一个特殊的标记<code>&quot;.PHONY&quot;</code>来显示地指明一个目标是&quot;伪目标&quot;, 向 make 说明, 不管是否有这个文件, 这个目标就是&quot;伪目标&quot;。</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.PHONY : clean</span><br></pre></td></tr></table></figure><p><strong>只要有这个声明</strong>, 不管是否有&quot;clean&quot;文件, 要运行&quot;clean&quot;这个目标, <strong>只有&quot;make clean&quot;这样</strong>。于是整个过程可以这样写:</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"><span class="meta-keyword">.PHONY</span>: clean</span></span><br><span class="line"><span class="section">clean:</span></span><br><span class="line">rm *.o temp</span><br></pre></td></tr></table></figure><p>伪目标一般没有依赖的文件, 但是, 我们也可以<strong>为伪目标指定所依赖的文件</strong>。<br>伪目标同样可以作为&quot;默认目标&quot;, 只要将其放在第一个。</p><h2 id="作为默认目标示例">作为默认目标示例</h2><p>一个示例就是, 如果你的 Makefile 需要一口气生成若干个可执行文件, 但你只想简单地敲一个 make 完事, 并且, 所有的目标文件<br>都写在一个 Makefile 中, 那么你可以使用&quot;伪目标&quot;这个特性:</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">all : prog1 prog2 prog3</span><br><span class="line">.PHONY : all</span><br><span class="line">prog1 : prog1.o utils.o</span><br><span class="line">cc -o prog1 prog1.o utils.o</span><br><span class="line">prog2 : prog2.o</span><br><span class="line">cc -o prog2 prog2.o</span><br><span class="line">prog3 : prog3.o sort.o utils.o</span><br><span class="line">cc -o prog3 prog3.o sort.o utils.o</span><br></pre></td></tr></table></figure><p>我们知道, Makefile 中的第一个目标会被作为其<strong>默认目标</strong>。我们声明了一个<code>&quot;all&quot;</code>的伪目标, 其依赖于其它三个目标。<br>由于伪目标的特性是, <strong>总是被执行的</strong>, 所以, 其它三个目标的规则总是会被运行, 也就达到了我们一口气生成多个目标的目的。</p><p>&quot;.PHONY : all&quot;声明了&quot;all&quot;这个目标为&quot;伪目标&quot;。</p><h2 id="作为依赖-示例">作为依赖 示例</h2><p>从上面的例子我们可以看出, 目标也可以成为依赖。所以, 伪目标同样也可成为依赖。看下面的例子:</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"><span class="meta-keyword">.PHONY</span>: cleanall cleanobj cleandiff</span></span><br><span class="line">cleanall : cleanobj cleandiff</span><br><span class="line">rm program</span><br><span class="line">cleanobj :</span><br><span class="line">rm *.o</span><br><span class="line">cleandiff :</span><br><span class="line">rm *.diff</span><br></pre></td></tr></table></figure><p>&quot;cleanobj&quot;和&quot;cleandiff&quot;这两个**伪目标有点像&quot;子程序&quot;**的意思。</p><p>我们可以输入<code>&quot;make cleanall&quot;</code>、<code>&quot;make cleanobj&quot;</code>、<code>&quot;make cleandiff&quot;</code>命令来达到清除不同种类文件的目的。</p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Fri Feb 15 2019 12:49:27 GMT+0800 (中国标准时间) --&gt;&lt;h1 id=&quot;前言&quot;&gt;前言&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;摘录于 《跟我一起写makefile》&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;本文主要开始介绍&lt;strong&gt;makefile&lt;/strong&gt;的伪目标。&lt;/p&gt;
    
    </summary>
    
      <category term="C/C++" scheme="https://vonsdite.cn/categories/C-C/"/>
    
      <category term="Makefile" scheme="https://vonsdite.cn/categories/C-C/Makefile/"/>
    
    
      <category term="C/C++" scheme="https://vonsdite.cn/tags/C-C/"/>
    
      <category term="Makefile" scheme="https://vonsdite.cn/tags/Makefile/"/>
    
  </entry>
  
  <entry>
    <title>makefile 介绍与编写(三) make 文件遍寻</title>
    <link href="https://vonsdite.cn/posts/1faeaacd.html"/>
    <id>https://vonsdite.cn/posts/1faeaacd.html</id>
    <published>2019-01-02T13:37:12.000Z</published>
    <updated>2019-01-02T13:55:21.925Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Fri Feb 15 2019 12:49:27 GMT+0800 (中国标准时间) --><h1 id="前言">前言</h1><p><strong>摘录于 《跟我一起写makefile》</strong></p><p>本文主要开始介绍<strong>makefile</strong>的文件遍寻。</p><a id="more"></a><h1 id="文件遍寻">文件遍寻</h1><p>在一些大的工程中, 有大量的源文件, 我们通常的做法是把这许多的源文件分类, 并存放在不同的目录中。所以, 当 make 需要去找寻文件的依赖关系时, 你可以在文件前加上路径, 但最好的方法是把一个路径告诉 make, 让 make 在自动去找。</p><h2 id="vpath">VPATH</h2><p>Makefile 文件中的特殊变量&quot;VPATH&quot;可以指定源文件的目录所在。<br>如果没有指明这个变量, make 只会在<strong>当前的目录中去找寻依赖文件和目标文件</strong>。<br>如果定义了这个变量, 那么, make就会在当 当前目录找不到的情况下, 到所<strong>指定的目录中</strong>去找寻文件了。</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">VPATH = src:../headers</span><br></pre></td></tr></table></figure><p>上面的的定义指定两个目录, &quot;src&quot;和&quot;…/headers&quot;,<br>make 会按照这个顺序进行搜索。目录由&quot;冒号&quot;分隔。(当然, 当前目录永远是最高优先搜索的地方)</p><h2 id="vpath-v2">vpath</h2><p>另一个设置文件搜索路径的方法是使用 make 的&quot;vpath&quot;<strong>关键字</strong>(注意, 它是<strong>全小写</strong>的), 这<strong>不是变量</strong>, 这是一个 make 的关键字, 这和上面提到的那个 VPATH 变量很类似, 但是它更为灵活。</p><p>它可以指定<strong>不同的文件在不同的搜索目录</strong>中。</p><h3 id="使用方法">使用方法</h3><p>使用方法有三种:</p><ol><li><p><code>vpath &lt;pattern&gt; &lt;directories&gt;</code><br>为符合模式<pattern>的文件指定搜索目录<directories></directories></pattern></p></li><li><p><code>vpath &lt;pattern&gt;</code><br><strong>清除</strong>符合模式<pattern>的文件的搜索目录。</pattern></p></li><li><p><code>vpath</code><br><strong>清除所有</strong>已被设置好了的文件搜索目录。</p></li></ol><p>vapth 使用方法中的<pattern>需要包含<code>&quot;%&quot;</code>字符。<code>&quot;%&quot;</code>的意思是<strong>匹配零或若干字符</strong>。</pattern></p><p>例如, &quot;%.h&quot;表示所有以&quot;.h&quot;结尾的文件。</p><p><pattern>指定了要搜索的文件集, 而<directories>则指定了<pattern>的文件集的搜索的目录。</pattern></directories></pattern></p><p>例如:</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">vpath</span> %.h ../headers</span><br></pre></td></tr></table></figure><p>该语句表示, 要求 make 在&quot;…/headers&quot;目录下搜索所有以&quot;.h&quot;结尾的文件。(如果某文件在当前目录没有找到的话)</p><p>我们可以连续地使用 vpath 语句, 以指定不同搜索策略。<br>如果连续的 vpath 语句中出现了相同的<pattern>, 或是被重复了的<pattern>, 那么, make 会按照 vpath 语句的<strong>先后顺序</strong>来执行搜索。如:</pattern></pattern></p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">vpath</span> %.c foo</span><br><span class="line"><span class="keyword">vpath</span> % blish</span><br><span class="line"><span class="keyword">vpath</span> %.c bar</span><br></pre></td></tr></table></figure><p>其表示&quot;.c&quot;结尾的文件, 先在&quot;foo&quot;目录, 然后是&quot;blish&quot;, 最后是&quot;bar&quot;目录。</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">vpath</span> %.c foo:bar</span><br><span class="line"><span class="keyword">vpath</span> % blish</span><br></pre></td></tr></table></figure><p>而上面的语句则表示&quot;.c&quot;结尾的文件, 先在&quot;foo&quot;目录, 然后是&quot;bar&quot;目录, 最后才是&quot;blish&quot;目录</p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Fri Feb 15 2019 12:49:27 GMT+0800 (中国标准时间) --&gt;&lt;h1 id=&quot;前言&quot;&gt;前言&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;摘录于 《跟我一起写makefile》&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;本文主要开始介绍&lt;strong&gt;makefile&lt;/strong&gt;的文件遍寻。&lt;/p&gt;
    
    </summary>
    
      <category term="C/C++" scheme="https://vonsdite.cn/categories/C-C/"/>
    
      <category term="Makefile" scheme="https://vonsdite.cn/categories/C-C/Makefile/"/>
    
    
      <category term="C/C++" scheme="https://vonsdite.cn/tags/C-C/"/>
    
      <category term="Makefile" scheme="https://vonsdite.cn/tags/Makefile/"/>
    
  </entry>
  
</feed>
